
001_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dcc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006170  08006170  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006178  08006178  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014428  20000078  080061f8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a0  080061f8  000244a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f88  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315b  00000000  00000000  00038030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0003b190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024edf  00000000  00000000  0003d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153cd  00000000  00000000  00062307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd4fc  00000000  00000000  000776d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154bd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005264  00000000  00000000  00154c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f84 	.word	0x08005f84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005f84 	.word	0x08005f84

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200143e8 	.word	0x200143e8
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96e 	b.w	8000644 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468c      	mov	ip, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8083 	bne.w	8000496 <__udivmoddi4+0x116>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d947      	bls.n	8000426 <__udivmoddi4+0xa6>
 8000396:	fab2 f282 	clz	r2, r2
 800039a:	b142      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039c:	f1c2 0020 	rsb	r0, r2, #32
 80003a0:	fa24 f000 	lsr.w	r0, r4, r0
 80003a4:	4091      	lsls	r1, r2
 80003a6:	4097      	lsls	r7, r2
 80003a8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ac:	4094      	lsls	r4, r2
 80003ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fbbc f6f8 	udiv	r6, ip, r8
 80003b8:	fa1f fe87 	uxth.w	lr, r7
 80003bc:	fb08 c116 	mls	r1, r8, r6, ip
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f10e 	mul.w	r1, r6, lr
 80003c8:	4299      	cmp	r1, r3
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x60>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d2:	f080 8119 	bcs.w	8000608 <__udivmoddi4+0x288>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 8116 	bls.w	8000608 <__udivmoddi4+0x288>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x8c>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fe:	f080 8105 	bcs.w	800060c <__udivmoddi4+0x28c>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f240 8102 	bls.w	800060c <__udivmoddi4+0x28c>
 8000408:	3802      	subs	r0, #2
 800040a:	443c      	add	r4, r7
 800040c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	2600      	movs	r6, #0
 8000416:	b11d      	cbz	r5, 8000420 <__udivmoddi4+0xa0>
 8000418:	40d4      	lsrs	r4, r2
 800041a:	2300      	movs	r3, #0
 800041c:	e9c5 4300 	strd	r4, r3, [r5]
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	b902      	cbnz	r2, 800042a <__udivmoddi4+0xaa>
 8000428:	deff      	udf	#255	; 0xff
 800042a:	fab2 f282 	clz	r2, r2
 800042e:	2a00      	cmp	r2, #0
 8000430:	d150      	bne.n	80004d4 <__udivmoddi4+0x154>
 8000432:	1bcb      	subs	r3, r1, r7
 8000434:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000438:	fa1f f887 	uxth.w	r8, r7
 800043c:	2601      	movs	r6, #1
 800043e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000442:	0c21      	lsrs	r1, r4, #16
 8000444:	fb0e 331c 	mls	r3, lr, ip, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb08 f30c 	mul.w	r3, r8, ip
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0xe4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0xe2>
 800045c:	428b      	cmp	r3, r1
 800045e:	f200 80e9 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 8000462:	4684      	mov	ip, r0
 8000464:	1ac9      	subs	r1, r1, r3
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000470:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x10c>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x10a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80d9 	bhi.w	800063c <__udivmoddi4+0x2bc>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e7bf      	b.n	8000416 <__udivmoddi4+0x96>
 8000496:	428b      	cmp	r3, r1
 8000498:	d909      	bls.n	80004ae <__udivmoddi4+0x12e>
 800049a:	2d00      	cmp	r5, #0
 800049c:	f000 80b1 	beq.w	8000602 <__udivmoddi4+0x282>
 80004a0:	2600      	movs	r6, #0
 80004a2:	e9c5 0100 	strd	r0, r1, [r5]
 80004a6:	4630      	mov	r0, r6
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	fab3 f683 	clz	r6, r3
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d14a      	bne.n	800054c <__udivmoddi4+0x1cc>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d302      	bcc.n	80004c0 <__udivmoddi4+0x140>
 80004ba:	4282      	cmp	r2, r0
 80004bc:	f200 80b8 	bhi.w	8000630 <__udivmoddi4+0x2b0>
 80004c0:	1a84      	subs	r4, r0, r2
 80004c2:	eb61 0103 	sbc.w	r1, r1, r3
 80004c6:	2001      	movs	r0, #1
 80004c8:	468c      	mov	ip, r1
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	d0a8      	beq.n	8000420 <__udivmoddi4+0xa0>
 80004ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80004d2:	e7a5      	b.n	8000420 <__udivmoddi4+0xa0>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f603 	lsr.w	r6, r0, r3
 80004dc:	4097      	lsls	r7, r2
 80004de:	fa01 f002 	lsl.w	r0, r1, r2
 80004e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e6:	40d9      	lsrs	r1, r3
 80004e8:	4330      	orrs	r0, r6
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80004f0:	fa1f f887 	uxth.w	r8, r7
 80004f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fc:	fb06 f108 	mul.w	r1, r6, r8
 8000500:	4299      	cmp	r1, r3
 8000502:	fa04 f402 	lsl.w	r4, r4, r2
 8000506:	d909      	bls.n	800051c <__udivmoddi4+0x19c>
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	f106 3cff 	add.w	ip, r6, #4294967295
 800050e:	f080 808d 	bcs.w	800062c <__udivmoddi4+0x2ac>
 8000512:	4299      	cmp	r1, r3
 8000514:	f240 808a 	bls.w	800062c <__udivmoddi4+0x2ac>
 8000518:	3e02      	subs	r6, #2
 800051a:	443b      	add	r3, r7
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b281      	uxth	r1, r0
 8000520:	fbb3 f0fe 	udiv	r0, r3, lr
 8000524:	fb0e 3310 	mls	r3, lr, r0, r3
 8000528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052c:	fb00 f308 	mul.w	r3, r0, r8
 8000530:	428b      	cmp	r3, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x1c4>
 8000534:	1879      	adds	r1, r7, r1
 8000536:	f100 3cff 	add.w	ip, r0, #4294967295
 800053a:	d273      	bcs.n	8000624 <__udivmoddi4+0x2a4>
 800053c:	428b      	cmp	r3, r1
 800053e:	d971      	bls.n	8000624 <__udivmoddi4+0x2a4>
 8000540:	3802      	subs	r0, #2
 8000542:	4439      	add	r1, r7
 8000544:	1acb      	subs	r3, r1, r3
 8000546:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800054a:	e778      	b.n	800043e <__udivmoddi4+0xbe>
 800054c:	f1c6 0c20 	rsb	ip, r6, #32
 8000550:	fa03 f406 	lsl.w	r4, r3, r6
 8000554:	fa22 f30c 	lsr.w	r3, r2, ip
 8000558:	431c      	orrs	r4, r3
 800055a:	fa20 f70c 	lsr.w	r7, r0, ip
 800055e:	fa01 f306 	lsl.w	r3, r1, r6
 8000562:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000566:	fa21 f10c 	lsr.w	r1, r1, ip
 800056a:	431f      	orrs	r7, r3
 800056c:	0c3b      	lsrs	r3, r7, #16
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fa1f f884 	uxth.w	r8, r4
 8000576:	fb0e 1119 	mls	r1, lr, r9, r1
 800057a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800057e:	fb09 fa08 	mul.w	sl, r9, r8
 8000582:	458a      	cmp	sl, r1
 8000584:	fa02 f206 	lsl.w	r2, r2, r6
 8000588:	fa00 f306 	lsl.w	r3, r0, r6
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x220>
 800058e:	1861      	adds	r1, r4, r1
 8000590:	f109 30ff 	add.w	r0, r9, #4294967295
 8000594:	d248      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 8000596:	458a      	cmp	sl, r1
 8000598:	d946      	bls.n	8000628 <__udivmoddi4+0x2a8>
 800059a:	f1a9 0902 	sub.w	r9, r9, #2
 800059e:	4421      	add	r1, r4
 80005a0:	eba1 010a 	sub.w	r1, r1, sl
 80005a4:	b2bf      	uxth	r7, r7
 80005a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005b2:	fb00 f808 	mul.w	r8, r0, r8
 80005b6:	45b8      	cmp	r8, r7
 80005b8:	d907      	bls.n	80005ca <__udivmoddi4+0x24a>
 80005ba:	19e7      	adds	r7, r4, r7
 80005bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005c0:	d22e      	bcs.n	8000620 <__udivmoddi4+0x2a0>
 80005c2:	45b8      	cmp	r8, r7
 80005c4:	d92c      	bls.n	8000620 <__udivmoddi4+0x2a0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	4427      	add	r7, r4
 80005ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ce:	eba7 0708 	sub.w	r7, r7, r8
 80005d2:	fba0 8902 	umull	r8, r9, r0, r2
 80005d6:	454f      	cmp	r7, r9
 80005d8:	46c6      	mov	lr, r8
 80005da:	4649      	mov	r1, r9
 80005dc:	d31a      	bcc.n	8000614 <__udivmoddi4+0x294>
 80005de:	d017      	beq.n	8000610 <__udivmoddi4+0x290>
 80005e0:	b15d      	cbz	r5, 80005fa <__udivmoddi4+0x27a>
 80005e2:	ebb3 020e 	subs.w	r2, r3, lr
 80005e6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ee:	40f2      	lsrs	r2, r6
 80005f0:	ea4c 0202 	orr.w	r2, ip, r2
 80005f4:	40f7      	lsrs	r7, r6
 80005f6:	e9c5 2700 	strd	r2, r7, [r5]
 80005fa:	2600      	movs	r6, #0
 80005fc:	4631      	mov	r1, r6
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e70b      	b.n	8000420 <__udivmoddi4+0xa0>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0x60>
 800060c:	4618      	mov	r0, r3
 800060e:	e6fd      	b.n	800040c <__udivmoddi4+0x8c>
 8000610:	4543      	cmp	r3, r8
 8000612:	d2e5      	bcs.n	80005e0 <__udivmoddi4+0x260>
 8000614:	ebb8 0e02 	subs.w	lr, r8, r2
 8000618:	eb69 0104 	sbc.w	r1, r9, r4
 800061c:	3801      	subs	r0, #1
 800061e:	e7df      	b.n	80005e0 <__udivmoddi4+0x260>
 8000620:	4608      	mov	r0, r1
 8000622:	e7d2      	b.n	80005ca <__udivmoddi4+0x24a>
 8000624:	4660      	mov	r0, ip
 8000626:	e78d      	b.n	8000544 <__udivmoddi4+0x1c4>
 8000628:	4681      	mov	r9, r0
 800062a:	e7b9      	b.n	80005a0 <__udivmoddi4+0x220>
 800062c:	4666      	mov	r6, ip
 800062e:	e775      	b.n	800051c <__udivmoddi4+0x19c>
 8000630:	4630      	mov	r0, r6
 8000632:	e74a      	b.n	80004ca <__udivmoddi4+0x14a>
 8000634:	f1ac 0c02 	sub.w	ip, ip, #2
 8000638:	4439      	add	r1, r7
 800063a:	e713      	b.n	8000464 <__udivmoddi4+0xe4>
 800063c:	3802      	subs	r0, #2
 800063e:	443c      	add	r4, r7
 8000640:	e724      	b.n	800048c <__udivmoddi4+0x10c>
 8000642:	bf00      	nop

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	BaseType_t status;
	TaskHandle_t *task1_handle = NULL;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
	TaskHandle_t *task2_handle = NULL;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fa9d 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f84f 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f8bb 	bl	80007d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0);
 8000662:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <main+0x98>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <main+0x98>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800066e:	f003 f821 	bl	80036b4 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000672:	f003 ff7f 	bl	8004574 <SEGGER_SYSVIEW_Start>
  status = xTaskCreate(task1_handler, "Task1", 200, "Hello world from Task1", 2, task1_handle);
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <main+0x9c>)
 8000680:	22c8      	movs	r2, #200	; 0xc8
 8000682:	4919      	ldr	r1, [pc, #100]	; (80006e8 <main+0xa0>)
 8000684:	4819      	ldr	r0, [pc, #100]	; (80006ec <main+0xa4>)
 8000686:	f001 fde4 	bl	8002252 <xTaskCreate>
 800068a:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d00a      	beq.n	80006a8 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006a4:	bf00      	nop
 80006a6:	e7fe      	b.n	80006a6 <main+0x5e>

  status = xTaskCreate(task2_handler, "Task2", 200, "Hello world from Task2", 2, task2_handle);
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	2302      	movs	r3, #2
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <main+0xa8>)
 80006b2:	22c8      	movs	r2, #200	; 0xc8
 80006b4:	490f      	ldr	r1, [pc, #60]	; (80006f4 <main+0xac>)
 80006b6:	4810      	ldr	r0, [pc, #64]	; (80006f8 <main+0xb0>)
 80006b8:	f001 fdcb 	bl	8002252 <xTaskCreate>
 80006bc:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d00a      	beq.n	80006da <main+0x92>
        __asm volatile
 80006c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c8:	f383 8811 	msr	BASEPRI, r3
 80006cc:	f3bf 8f6f 	isb	sy
 80006d0:	f3bf 8f4f 	dsb	sy
 80006d4:	607b      	str	r3, [r7, #4]
    }
 80006d6:	bf00      	nop
 80006d8:	e7fe      	b.n	80006d8 <main+0x90>

  vTaskStartScheduler();
 80006da:	f001 ff53 	bl	8002584 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006de:	e7fe      	b.n	80006de <main+0x96>
 80006e0:	e0001000 	.word	0xe0001000
 80006e4:	08005f9c 	.word	0x08005f9c
 80006e8:	08005fb4 	.word	0x08005fb4
 80006ec:	080008d5 	.word	0x080008d5
 80006f0:	08005fbc 	.word	0x08005fbc
 80006f4:	08005fd4 	.word	0x08005fd4
 80006f8:	080008ed 	.word	0x080008ed

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 fce0 	bl	80050d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <SystemClock_Config+0xd4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <SystemClock_Config+0xd4>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <SystemClock_Config+0xd4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <SystemClock_Config+0xd8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <SystemClock_Config+0xd8>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <SystemClock_Config+0xd8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000770:	2310      	movs	r3, #16
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000778:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4618      	mov	r0, r3
 800078c:	f000 ffbe 	bl	800170c <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000796:	f000 f8c7 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2102      	movs	r1, #2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fcbe 	bl	8001138 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007c2:	f000 f8b1 	bl	8000928 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <MX_GPIO_Init+0xf0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a34      	ldr	r2, [pc, #208]	; (80008c8 <MX_GPIO_Init+0xf0>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a2d      	ldr	r2, [pc, #180]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_GPIO_Init+0xf0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_GPIO_Init+0xf0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <MX_GPIO_Init+0xf0>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_GPIO_Init+0xf4>)
 8000864:	f000 fc4e 	bl	8001104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <MX_GPIO_Init+0xf8>)
 8000880:	f000 faac 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000884:	230c      	movs	r3, #12
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000894:	2307      	movs	r3, #7
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0xf4>)
 80008a0:	f000 fa9c 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a4:	2320      	movs	r3, #32
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0xf4>)
 80008bc:	f000 fa8e 	bl	8000ddc <HAL_GPIO_Init>

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020800 	.word	0x40020800

080008d4 <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void* parameters)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("\n%s",(char*)parameters);
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	4802      	ldr	r0, [pc, #8]	; (80008e8 <task1_handler+0x14>)
 80008e0:	f004 fbfe 	bl	80050e0 <iprintf>
 80008e4:	e7fa      	b.n	80008dc <task1_handler+0x8>
 80008e6:	bf00      	nop
 80008e8:	08005fdc 	.word	0x08005fdc

080008ec <task2_handler>:
//		taskYIELD();
	}
}
void task2_handler(void* parameters)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("\n%s",(char*)parameters);
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <task2_handler+0x14>)
 80008f8:	f004 fbf2 	bl	80050e0 <iprintf>
 80008fc:	e7fa      	b.n	80008f4 <task2_handler+0x8>
 80008fe:	bf00      	nop
 8000900:	08005fdc 	.word	0x08005fdc

08000904 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d101      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000916:	f000 f95f 	bl	8000bd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40001000 	.word	0x40001000

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000972:	f002 fae9 	bl	8002f48 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	2036      	movs	r0, #54	; 0x36
 800099a:	f000 f9f5 	bl	8000d88 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800099e:	2036      	movs	r0, #54	; 0x36
 80009a0:	f000 fa0e 	bl	8000dc0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_InitTick+0xa4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <HAL_InitTick+0xa4>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_InitTick+0xa4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c0:	f107 0210 	add.w	r2, r7, #16
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fcba 	bl	8001344 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009d0:	f000 fca4 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 80009d4:	4603      	mov	r3, r0
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <HAL_InitTick+0xa8>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	0c9b      	lsrs	r3, r3, #18
 80009e4:	3b01      	subs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_InitTick+0xac>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <HAL_InitTick+0xb0>)
 80009ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_InitTick+0xac>)
 80009f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_InitTick+0xac>)
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_InitTick+0xac>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_InitTick+0xac>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <HAL_InitTick+0xac>)
 8000a0a:	f001 f91d 	bl	8001c48 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d104      	bne.n	8000a1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <HAL_InitTick+0xac>)
 8000a16:	f001 f971 	bl	8001cfc <HAL_TIM_Base_Start_IT>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3730      	adds	r7, #48	; 0x30
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	2001439c 	.word	0x2001439c
 8000a34:	40001000 	.word	0x40001000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <TIM6_DAC_IRQHandler+0x10>)
 8000a6a:	f001 f9b7 	bl	8001ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2001439c 	.word	0x2001439c

08000a78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e00a      	b.n	8000aa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a8a:	f3af 8000 	nop.w
 8000a8e:	4601      	mov	r1, r0
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60ba      	str	r2, [r7, #8]
 8000a96:	b2ca      	uxtb	r2, r1
 8000a98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf0      	blt.n	8000a8a <_read+0x12>
	}

return len;
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ada:	605a      	str	r2, [r3, #4]
	return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_isatty>:

int _isatty(int file)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	return 1;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b5c:	4c0b      	ldr	r4, [pc, #44]	; (8000b8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b6a:	f7ff ffd7 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f004 fa6f 	bl	8005050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b72:	f7ff fd69 	bl	8000648 <main>
  bx  lr    
 8000b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b84:	08006180 	.word	0x08006180
  ldr r2, =_sbss
 8000b88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b8c:	200144a0 	.word	0x200144a0

08000b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <HAL_Init+0x40>)
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_Init+0x40>)
 8000baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_Init+0x40>)
 8000bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f8d8 	bl	8000d72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f7ff fede 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff feb4 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	200143e4 	.word	0x200143e4

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	200143e4 	.word	0x200143e4

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ff4c 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9a:	f7ff ff61 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000d9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	6978      	ldr	r0, [r7, #20]
 8000da6:	f7ff ffb1 	bl	8000d0c <NVIC_EncodePriority>
 8000daa:	4602      	mov	r2, r0
 8000dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff80 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff54 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	e165      	b.n	80010c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 8154 	bne.w	80010be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d005      	beq.n	8000e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d130      	bne.n	8000e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f003 0201 	and.w	r2, r3, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d017      	beq.n	8000ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d123      	bne.n	8000f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	69b9      	ldr	r1, [r7, #24]
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0203 	and.w	r2, r3, #3
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80ae 	beq.w	80010be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <HAL_GPIO_Init+0x300>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a5c      	ldr	r2, [pc, #368]	; (80010dc <HAL_GPIO_Init+0x300>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <HAL_GPIO_Init+0x300>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7e:	4a58      	ldr	r2, [pc, #352]	; (80010e0 <HAL_GPIO_Init+0x304>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4f      	ldr	r2, [pc, #316]	; (80010e4 <HAL_GPIO_Init+0x308>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d025      	beq.n	8000ff6 <HAL_GPIO_Init+0x21a>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4e      	ldr	r2, [pc, #312]	; (80010e8 <HAL_GPIO_Init+0x30c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d01f      	beq.n	8000ff2 <HAL_GPIO_Init+0x216>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4d      	ldr	r2, [pc, #308]	; (80010ec <HAL_GPIO_Init+0x310>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x212>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4c      	ldr	r2, [pc, #304]	; (80010f0 <HAL_GPIO_Init+0x314>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x20e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4b      	ldr	r2, [pc, #300]	; (80010f4 <HAL_GPIO_Init+0x318>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x20a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <HAL_GPIO_Init+0x31c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x206>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a49      	ldr	r2, [pc, #292]	; (80010fc <HAL_GPIO_Init+0x320>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x202>
 8000fda:	2306      	movs	r3, #6
 8000fdc:	e00c      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000fde:	2307      	movs	r3, #7
 8000fe0:	e00a      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001008:	4935      	ldr	r1, [pc, #212]	; (80010e0 <HAL_GPIO_Init+0x304>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <HAL_GPIO_Init+0x324>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103a:	4a31      	ldr	r2, [pc, #196]	; (8001100 <HAL_GPIO_Init+0x324>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001040:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <HAL_GPIO_Init+0x324>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001064:	4a26      	ldr	r2, [pc, #152]	; (8001100 <HAL_GPIO_Init+0x324>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <HAL_GPIO_Init+0x324>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_GPIO_Init+0x324>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_GPIO_Init+0x324>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <HAL_GPIO_Init+0x324>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	f67f ae96 	bls.w	8000df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40021800 	.word	0x40021800
 8001100:	40013c00 	.word	0x40013c00

08001104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
 8001110:	4613      	mov	r3, r2
 8001112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001114:	787b      	ldrb	r3, [r7, #1]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001120:	e003      	b.n	800112a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	041a      	lsls	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	619a      	str	r2, [r3, #24]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0cc      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d90c      	bls.n	8001174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001162:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0b8      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d020      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800118c:	4b59      	ldr	r3, [pc, #356]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a58      	ldr	r2, [pc, #352]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a4:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	494d      	ldr	r1, [pc, #308]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d044      	beq.n	8001258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d119      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e07f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d003      	beq.n	80011f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e06f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e067      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f023 0203 	bic.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4934      	ldr	r1, [pc, #208]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	4313      	orrs	r3, r2
 8001226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff fcea 	bl	8000c00 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	e00a      	b.n	8001246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001230:	f7ff fce6 	bl	8000c00 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	; 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e04f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 020c 	and.w	r2, r3, #12
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	429a      	cmp	r2, r3
 8001256:	d1eb      	bne.n	8001230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 030f 	and.w	r3, r3, #15
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d20c      	bcs.n	8001280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d001      	beq.n	8001280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e032      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4916      	ldr	r1, [pc, #88]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	4313      	orrs	r3, r2
 800129c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	490e      	ldr	r1, [pc, #56]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012be:	f000 f873 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	490a      	ldr	r1, [pc, #40]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	5ccb      	ldrb	r3, [r1, r3]
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_RCC_ClockConfig+0x1c8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fb50 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00
 80012f4:	40023800 	.word	0x40023800
 80012f8:	080060ac 	.word	0x080060ac
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_RCC_GetHCLKFreq+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000000 	.word	0x20000000

0800131c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001320:	f7ff fff0 	bl	8001304 <HAL_RCC_GetHCLKFreq>
 8001324:	4602      	mov	r2, r0
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	0a9b      	lsrs	r3, r3, #10
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	4903      	ldr	r1, [pc, #12]	; (8001340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001332:	5ccb      	ldrb	r3, [r1, r3]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	080060bc 	.word	0x080060bc

08001344 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	220f      	movs	r2, #15
 8001352:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_RCC_GetClockConfig+0x60>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 020f 	and.w	r2, r3, #15
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	601a      	str	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ac:	b088      	sub	sp, #32
 80013ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013c4:	4bce      	ldr	r3, [pc, #824]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b0c      	cmp	r3, #12
 80013ce:	f200 818d 	bhi.w	80016ec <HAL_RCC_GetSysClockFreq+0x344>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <HAL_RCC_GetSysClockFreq+0x30>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	0800140d 	.word	0x0800140d
 80013dc:	080016ed 	.word	0x080016ed
 80013e0:	080016ed 	.word	0x080016ed
 80013e4:	080016ed 	.word	0x080016ed
 80013e8:	08001413 	.word	0x08001413
 80013ec:	080016ed 	.word	0x080016ed
 80013f0:	080016ed 	.word	0x080016ed
 80013f4:	080016ed 	.word	0x080016ed
 80013f8:	08001419 	.word	0x08001419
 80013fc:	080016ed 	.word	0x080016ed
 8001400:	080016ed 	.word	0x080016ed
 8001404:	080016ed 	.word	0x080016ed
 8001408:	0800158d 	.word	0x0800158d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800140c:	4bbd      	ldr	r3, [pc, #756]	; (8001704 <HAL_RCC_GetSysClockFreq+0x35c>)
 800140e:	61bb      	str	r3, [r7, #24]
       break;
 8001410:	e16f      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001412:	4bbd      	ldr	r3, [pc, #756]	; (8001708 <HAL_RCC_GetSysClockFreq+0x360>)
 8001414:	61bb      	str	r3, [r7, #24]
      break;
 8001416:	e16c      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001418:	4bb9      	ldr	r3, [pc, #740]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001420:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001422:	4bb7      	ldr	r3, [pc, #732]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d053      	beq.n	80014d6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142e:	4bb4      	ldr	r3, [pc, #720]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	099b      	lsrs	r3, r3, #6
 8001434:	461a      	mov	r2, r3
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800143e:	f04f 0100 	mov.w	r1, #0
 8001442:	ea02 0400 	and.w	r4, r2, r0
 8001446:	603c      	str	r4, [r7, #0]
 8001448:	400b      	ands	r3, r1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001450:	4620      	mov	r0, r4
 8001452:	4629      	mov	r1, r5
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	014b      	lsls	r3, r1, #5
 800145e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001462:	0142      	lsls	r2, r0, #5
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	4623      	mov	r3, r4
 800146a:	1ac0      	subs	r0, r0, r3
 800146c:	462b      	mov	r3, r5
 800146e:	eb61 0103 	sbc.w	r1, r1, r3
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	018b      	lsls	r3, r1, #6
 800147c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001480:	0182      	lsls	r2, r0, #6
 8001482:	1a12      	subs	r2, r2, r0
 8001484:	eb63 0301 	sbc.w	r3, r3, r1
 8001488:	f04f 0000 	mov.w	r0, #0
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	00d9      	lsls	r1, r3, #3
 8001492:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001496:	00d0      	lsls	r0, r2, #3
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4621      	mov	r1, r4
 800149e:	1852      	adds	r2, r2, r1
 80014a0:	4629      	mov	r1, r5
 80014a2:	eb43 0101 	adc.w	r1, r3, r1
 80014a6:	460b      	mov	r3, r1
 80014a8:	f04f 0000 	mov.w	r0, #0
 80014ac:	f04f 0100 	mov.w	r1, #0
 80014b0:	0259      	lsls	r1, r3, #9
 80014b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80014b6:	0250      	lsls	r0, r2, #9
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	f7fe ff42 	bl	8000350 <__aeabi_uldivmod>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4613      	mov	r3, r2
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	e04c      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d6:	4b8a      	ldr	r3, [pc, #552]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	099b      	lsrs	r3, r3, #6
 80014dc:	461a      	mov	r2, r3
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	ea02 0a00 	and.w	sl, r2, r0
 80014ee:	ea03 0b01 	and.w	fp, r3, r1
 80014f2:	4650      	mov	r0, sl
 80014f4:	4659      	mov	r1, fp
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	014b      	lsls	r3, r1, #5
 8001500:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001504:	0142      	lsls	r2, r0, #5
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	ebb0 000a 	subs.w	r0, r0, sl
 800150e:	eb61 010b 	sbc.w	r1, r1, fp
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	018b      	lsls	r3, r1, #6
 800151c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001520:	0182      	lsls	r2, r0, #6
 8001522:	1a12      	subs	r2, r2, r0
 8001524:	eb63 0301 	sbc.w	r3, r3, r1
 8001528:	f04f 0000 	mov.w	r0, #0
 800152c:	f04f 0100 	mov.w	r1, #0
 8001530:	00d9      	lsls	r1, r3, #3
 8001532:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001536:	00d0      	lsls	r0, r2, #3
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	eb12 020a 	adds.w	r2, r2, sl
 8001540:	eb43 030b 	adc.w	r3, r3, fp
 8001544:	f04f 0000 	mov.w	r0, #0
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	0299      	lsls	r1, r3, #10
 800154e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001552:	0290      	lsls	r0, r2, #10
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	461a      	mov	r2, r3
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f7fe fef4 	bl	8000350 <__aeabi_uldivmod>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4613      	mov	r3, r2
 800156e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001570:	4b63      	ldr	r3, [pc, #396]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	0c1b      	lsrs	r3, r3, #16
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	3301      	adds	r3, #1
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	fbb2 f3f3 	udiv	r3, r2, r3
 8001588:	61bb      	str	r3, [r7, #24]
      break;
 800158a:	e0b2      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800158c:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001594:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001596:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d04d      	beq.n	800163e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a2:	4b57      	ldr	r3, [pc, #348]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	099b      	lsrs	r3, r3, #6
 80015a8:	461a      	mov	r2, r3
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	ea02 0800 	and.w	r8, r2, r0
 80015ba:	ea03 0901 	and.w	r9, r3, r1
 80015be:	4640      	mov	r0, r8
 80015c0:	4649      	mov	r1, r9
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	014b      	lsls	r3, r1, #5
 80015cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015d0:	0142      	lsls	r2, r0, #5
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	ebb0 0008 	subs.w	r0, r0, r8
 80015da:	eb61 0109 	sbc.w	r1, r1, r9
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	018b      	lsls	r3, r1, #6
 80015e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015ec:	0182      	lsls	r2, r0, #6
 80015ee:	1a12      	subs	r2, r2, r0
 80015f0:	eb63 0301 	sbc.w	r3, r3, r1
 80015f4:	f04f 0000 	mov.w	r0, #0
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	00d9      	lsls	r1, r3, #3
 80015fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001602:	00d0      	lsls	r0, r2, #3
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	eb12 0208 	adds.w	r2, r2, r8
 800160c:	eb43 0309 	adc.w	r3, r3, r9
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	f04f 0100 	mov.w	r1, #0
 8001618:	0259      	lsls	r1, r3, #9
 800161a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800161e:	0250      	lsls	r0, r2, #9
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	461a      	mov	r2, r3
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	f7fe fe8e 	bl	8000350 <__aeabi_uldivmod>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4613      	mov	r3, r2
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	e04a      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163e:	4b30      	ldr	r3, [pc, #192]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	461a      	mov	r2, r3
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	ea02 0400 	and.w	r4, r2, r0
 8001656:	ea03 0501 	and.w	r5, r3, r1
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	014b      	lsls	r3, r1, #5
 8001668:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800166c:	0142      	lsls	r2, r0, #5
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	1b00      	subs	r0, r0, r4
 8001674:	eb61 0105 	sbc.w	r1, r1, r5
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	018b      	lsls	r3, r1, #6
 8001682:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001686:	0182      	lsls	r2, r0, #6
 8001688:	1a12      	subs	r2, r2, r0
 800168a:	eb63 0301 	sbc.w	r3, r3, r1
 800168e:	f04f 0000 	mov.w	r0, #0
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	00d9      	lsls	r1, r3, #3
 8001698:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800169c:	00d0      	lsls	r0, r2, #3
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	1912      	adds	r2, r2, r4
 80016a4:	eb45 0303 	adc.w	r3, r5, r3
 80016a8:	f04f 0000 	mov.w	r0, #0
 80016ac:	f04f 0100 	mov.w	r1, #0
 80016b0:	0299      	lsls	r1, r3, #10
 80016b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016b6:	0290      	lsls	r0, r2, #10
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	461a      	mov	r2, r3
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	f7fe fe42 	bl	8000350 <__aeabi_uldivmod>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4613      	mov	r3, r2
 80016d2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	0f1b      	lsrs	r3, r3, #28
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	61bb      	str	r3, [r7, #24]
      break;
 80016ea:	e002      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016ee:	61bb      	str	r3, [r7, #24]
      break;
 80016f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016f2:	69bb      	ldr	r3, [r7, #24]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	00f42400 	.word	0x00f42400
 8001708:	007a1200 	.word	0x007a1200

0800170c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e28d      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8083 	beq.w	8001832 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800172c:	4b94      	ldr	r3, [pc, #592]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b04      	cmp	r3, #4
 8001736:	d019      	beq.n	800176c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001738:	4b91      	ldr	r3, [pc, #580]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001740:	2b08      	cmp	r3, #8
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001744:	4b8e      	ldr	r3, [pc, #568]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001750:	d00c      	beq.n	800176c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001752:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800175a:	2b0c      	cmp	r3, #12
 800175c:	d112      	bne.n	8001784 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175e:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800176a:	d10b      	bne.n	8001784 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	4b84      	ldr	r3, [pc, #528]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d05b      	beq.n	8001830 <HAL_RCC_OscConfig+0x124>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d157      	bne.n	8001830 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e25a      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d106      	bne.n	800179c <HAL_RCC_OscConfig+0x90>
 800178e:	4b7c      	ldr	r3, [pc, #496]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a7b      	ldr	r2, [pc, #492]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xcc>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0xb4>
 80017a6:	4b76      	ldr	r3, [pc, #472]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a75      	ldr	r2, [pc, #468]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b73      	ldr	r3, [pc, #460]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a72      	ldr	r2, [pc, #456]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xcc>
 80017c0:	4b6f      	ldr	r3, [pc, #444]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a6e      	ldr	r2, [pc, #440]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b6c      	ldr	r3, [pc, #432]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a6b      	ldr	r2, [pc, #428]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fa0e 	bl	8000c00 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fa0a 	bl	8000c00 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e21f      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b61      	ldr	r3, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xdc>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff f9fa 	bl	8000c00 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff f9f6 	bl	8000c00 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e20b      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	4b57      	ldr	r3, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x104>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d06f      	beq.n	800191e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800183e:	4b50      	ldr	r3, [pc, #320]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b00      	cmp	r3, #0
 8001848:	d017      	beq.n	800187a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800184a:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001852:	2b08      	cmp	r3, #8
 8001854:	d105      	bne.n	8001862 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001856:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001862:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800186a:	2b0c      	cmp	r3, #12
 800186c:	d11c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186e:	4b44      	ldr	r3, [pc, #272]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x186>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e1d3      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4937      	ldr	r1, [pc, #220]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a6:	e03a      	b.n	800191e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b0:	4b34      	ldr	r3, [pc, #208]	; (8001984 <HAL_RCC_OscConfig+0x278>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff f9a3 	bl	8000c00 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff f99f 	bl	8000c00 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e1b4      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4925      	ldr	r1, [pc, #148]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x278>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff f982 	bl	8000c00 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff f97e 	bl	8000c00 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e193      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d036      	beq.n	8001998 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d016      	beq.n	8001960 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_RCC_OscConfig+0x27c>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff f962 	bl	8000c00 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff f95e 	bl	8000c00 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e173      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x234>
 800195e:	e01b      	b.n	8001998 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_RCC_OscConfig+0x27c>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff f94b 	bl	8000c00 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	e00e      	b.n	800198c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196e:	f7ff f947 	bl	8000c00 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d907      	bls.n	800198c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e15c      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
 8001980:	40023800 	.word	0x40023800
 8001984:	42470000 	.word	0x42470000
 8001988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	4b8a      	ldr	r3, [pc, #552]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ea      	bne.n	800196e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8097 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b83      	ldr	r3, [pc, #524]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a7e      	ldr	r2, [pc, #504]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b79      	ldr	r3, [pc, #484]	; (8001bbc <HAL_RCC_OscConfig+0x4b0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x4b0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a75      	ldr	r2, [pc, #468]	; (8001bbc <HAL_RCC_OscConfig+0x4b0>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff f907 	bl	8000c00 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff f903 	bl	8000c00 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e118      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x4b0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x31e>
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
 8001a28:	e01c      	b.n	8001a64 <HAL_RCC_OscConfig+0x358>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x340>
 8001a32:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	4a60      	ldr	r2, [pc, #384]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	4a5d      	ldr	r2, [pc, #372]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0x358>
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	4a59      	ldr	r2, [pc, #356]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6713      	str	r3, [r2, #112]	; 0x70
 8001a58:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	4a56      	ldr	r2, [pc, #344]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	f023 0304 	bic.w	r3, r3, #4
 8001a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d015      	beq.n	8001a98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff f8c8 	bl	8000c00 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a74:	f7ff f8c4 	bl	8000c00 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0d7      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8a:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0ee      	beq.n	8001a74 <HAL_RCC_OscConfig+0x368>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff f8b2 	bl	8000c00 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f8ae 	bl	8000c00 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e0c1      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ee      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac8:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	4a3a      	ldr	r2, [pc, #232]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80ad 	beq.w	8001c38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ade:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d060      	beq.n	8001bac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d145      	bne.n	8001b7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_RCC_OscConfig+0x4b4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f882 	bl	8000c00 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f87e 	bl	8000c00 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e093      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	019b      	lsls	r3, r3, #6
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	071b      	lsls	r3, r3, #28
 8001b4a:	491b      	ldr	r1, [pc, #108]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x4b4>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b56:	f7ff f853 	bl	8000c00 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7ff f84f 	bl	8000c00 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e064      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x452>
 8001b7c:	e05c      	b.n	8001c38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_OscConfig+0x4b4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff f83c 	bl	8000c00 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff f838 	bl	8000c00 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e04d      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x480>
 8001baa:	e045      	b.n	8001c38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e040      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_RCC_OscConfig+0x538>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d030      	beq.n	8001c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d129      	bne.n	8001c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d122      	bne.n	8001c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d119      	bne.n	8001c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	085b      	lsrs	r3, r3, #1
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d10f      	bne.n	8001c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800

08001c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e041      	b.n	8001cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f839 	bl	8001ce6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3304      	adds	r3, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f000 f9d8 	bl	800203c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d001      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e04e      	b.n	8001db2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d022      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x80>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3e:	d01d      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x80>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d018      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x80>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d013      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x80>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_TIM_Base_Start_IT+0xd0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00e      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x80>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d009      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x80>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d004      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x80>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d111      	bne.n	8001da0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d010      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9e:	e007      	b.n	8001db0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	40000800 	.word	0x40000800
 8001dcc:	40000c00 	.word	0x40000c00
 8001dd0:	40010400 	.word	0x40010400
 8001dd4:	40014000 	.word	0x40014000
 8001dd8:	40001800 	.word	0x40001800

08001ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d122      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d11b      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0202 	mvn.w	r2, #2
 8001e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8ee 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8e0 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8f1 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d122      	bne.n	8001e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d11b      	bne.n	8001e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0204 	mvn.w	r2, #4
 8001e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8c4 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001e78:	e005      	b.n	8001e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8b6 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f8c7 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d122      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0208 	mvn.w	r2, #8
 8001eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f89a 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f88c 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f89d 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d122      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d11b      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0210 	mvn.w	r2, #16
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2208      	movs	r2, #8
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f870 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f862 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f873 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0201 	mvn.w	r2, #1
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fcd2 	bl	8000904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b80      	cmp	r3, #128	; 0x80
 8001f6c:	d10e      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f78:	2b80      	cmp	r3, #128	; 0x80
 8001f7a:	d107      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f902 	bl	8002190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	2b40      	cmp	r3, #64	; 0x40
 8001f98:	d10e      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa4:	2b40      	cmp	r3, #64	; 0x40
 8001fa6:	d107      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f838 	bl	8002028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0220 	mvn.w	r2, #32
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8cc 	bl	800217c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a40      	ldr	r2, [pc, #256]	; (8002150 <TIM_Base_SetConfig+0x114>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205a:	d00f      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3d      	ldr	r2, [pc, #244]	; (8002154 <TIM_Base_SetConfig+0x118>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00b      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3c      	ldr	r2, [pc, #240]	; (8002158 <TIM_Base_SetConfig+0x11c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3b      	ldr	r2, [pc, #236]	; (800215c <TIM_Base_SetConfig+0x120>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a3a      	ldr	r2, [pc, #232]	; (8002160 <TIM_Base_SetConfig+0x124>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d108      	bne.n	800208e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <TIM_Base_SetConfig+0x114>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02b      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d027      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a2c      	ldr	r2, [pc, #176]	; (8002154 <TIM_Base_SetConfig+0x118>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d023      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a2b      	ldr	r2, [pc, #172]	; (8002158 <TIM_Base_SetConfig+0x11c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01f      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a2a      	ldr	r2, [pc, #168]	; (800215c <TIM_Base_SetConfig+0x120>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01b      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a29      	ldr	r2, [pc, #164]	; (8002160 <TIM_Base_SetConfig+0x124>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d017      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a28      	ldr	r2, [pc, #160]	; (8002164 <TIM_Base_SetConfig+0x128>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a27      	ldr	r2, [pc, #156]	; (8002168 <TIM_Base_SetConfig+0x12c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00f      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <TIM_Base_SetConfig+0x130>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00b      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a25      	ldr	r2, [pc, #148]	; (8002170 <TIM_Base_SetConfig+0x134>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a24      	ldr	r2, [pc, #144]	; (8002174 <TIM_Base_SetConfig+0x138>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d003      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a23      	ldr	r2, [pc, #140]	; (8002178 <TIM_Base_SetConfig+0x13c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d108      	bne.n	8002100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <TIM_Base_SetConfig+0x114>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <TIM_Base_SetConfig+0xf8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <TIM_Base_SetConfig+0x124>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d103      	bne.n	800213c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	615a      	str	r2, [r3, #20]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	40000c00 	.word	0x40000c00
 8002160:	40010400 	.word	0x40010400
 8002164:	40014000 	.word	0x40014000
 8002168:	40014400 	.word	0x40014400
 800216c:	40014800 	.word	0x40014800
 8002170:	40001800 	.word	0x40001800
 8002174:	40001c00 	.word	0x40001c00
 8002178:	40002000 	.word	0x40002000

0800217c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f103 0208 	add.w	r2, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f103 0208 	add.w	r2, r3, #8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f103 0208 	add.w	r2, r3, #8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6892      	ldr	r2, [r2, #8]
 8002214:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6852      	ldr	r2, [r2, #4]
 800221e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	d103      	bne.n	8002232 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002252:	b580      	push	{r7, lr}
 8002254:	b08c      	sub	sp, #48	; 0x30
 8002256:	af04      	add	r7, sp, #16
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4618      	mov	r0, r3
 8002268:	f001 f818 	bl	800329c <pvPortMalloc>
 800226c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00e      	beq.n	8002292 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002274:	2058      	movs	r0, #88	; 0x58
 8002276:	f001 f811 	bl	800329c <pvPortMalloc>
 800227a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
 8002288:	e005      	b.n	8002296 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f001 f8e6 	bl	800345c <vPortFree>
 8002290:	e001      	b.n	8002296 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800229c:	88fa      	ldrh	r2, [r7, #6]
 800229e:	2300      	movs	r3, #0
 80022a0:	9303      	str	r3, [sp, #12]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	9302      	str	r3, [sp, #8]
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f80e 	bl	80022d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80022b8:	69f8      	ldr	r0, [r7, #28]
 80022ba:	f000 f8af 	bl	800241c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80022be:	2301      	movs	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	e002      	b.n	80022ca <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
 80022c8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80022ca:	69bb      	ldr	r3, [r7, #24]
    }
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	461a      	mov	r2, r3
 80022ec:	21a5      	movs	r1, #165	; 0xa5
 80022ee:	f002 feef 	bl	80050d0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022fc:	3b01      	subs	r3, #1
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f023 0307 	bic.w	r3, r3, #7
 800230a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	617b      	str	r3, [r7, #20]
    }
 8002328:	bf00      	nop
 800232a:	e7fe      	b.n	800232a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01f      	beq.n	8002372 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	e012      	b.n	800235e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	7819      	ldrb	r1, [r3, #0]
 8002340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	3334      	adds	r3, #52	; 0x34
 8002348:	460a      	mov	r2, r1
 800234a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3301      	adds	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	2b09      	cmp	r3, #9
 8002362:	d9e9      	bls.n	8002338 <prvInitialiseNewTask+0x64>
 8002364:	e000      	b.n	8002368 <prvInitialiseNewTask+0x94>
            {
                break;
 8002366:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002370:	e003      	b.n	800237a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	2b04      	cmp	r3, #4
 800237e:	d90a      	bls.n	8002396 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	613b      	str	r3, [r7, #16]
    }
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	2b04      	cmp	r3, #4
 800239a:	d901      	bls.n	80023a0 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800239c:	2304      	movs	r3, #4
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023aa:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80023ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ae:	2200      	movs	r2, #0
 80023b0:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	3304      	adds	r3, #4
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff14 	bl	80021e4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	3318      	adds	r3, #24
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff0f 	bl	80021e4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ca:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	f1c3 0205 	rsb	r2, r3, #5
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023da:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	3350      	adds	r3, #80	; 0x50
 80023e0:	2204      	movs	r2, #4
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fe73 	bl	80050d0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	3354      	adds	r3, #84	; 0x54
 80023ee:	2201      	movs	r2, #1
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 fe6c 	bl	80050d0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	68f9      	ldr	r1, [r7, #12]
 80023fc:	69b8      	ldr	r0, [r7, #24]
 80023fe:	f000 fc73 	bl	8002ce8 <pxPortInitialiseStack>
 8002402:	4602      	mov	r2, r0
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002412:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002414:	bf00      	nop
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800241c:	b5b0      	push	{r4, r5, r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
 8002422:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002424:	f000 fe0e 	bl	8003044 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002428:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <prvAddNewTaskToReadyList+0x14c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	4a4e      	ldr	r2, [pc, #312]	; (8002568 <prvAddNewTaskToReadyList+0x14c>)
 8002430:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002432:	4b4e      	ldr	r3, [pc, #312]	; (800256c <prvAddNewTaskToReadyList+0x150>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800243a:	4a4c      	ldr	r2, [pc, #304]	; (800256c <prvAddNewTaskToReadyList+0x150>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002440:	4b49      	ldr	r3, [pc, #292]	; (8002568 <prvAddNewTaskToReadyList+0x14c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d110      	bne.n	800246a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002448:	f000 fbb4 	bl	8002bb4 <prvInitialiseTaskLists>
 800244c:	e00d      	b.n	800246a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800244e:	4b48      	ldr	r3, [pc, #288]	; (8002570 <prvAddNewTaskToReadyList+0x154>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002456:	4b45      	ldr	r3, [pc, #276]	; (800256c <prvAddNewTaskToReadyList+0x150>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	429a      	cmp	r2, r3
 8002462:	d802      	bhi.n	800246a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002464:	4a41      	ldr	r2, [pc, #260]	; (800256c <prvAddNewTaskToReadyList+0x150>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800246a:	4b42      	ldr	r3, [pc, #264]	; (8002574 <prvAddNewTaskToReadyList+0x158>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	4a40      	ldr	r2, [pc, #256]	; (8002574 <prvAddNewTaskToReadyList+0x158>)
 8002472:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002474:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <prvAddNewTaskToReadyList+0x158>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <prvAddNewTaskToReadyList+0x94>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	f002 fbd3 	bl	8004c30 <SEGGER_SYSVIEW_OnTaskCreate>
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	461d      	mov	r5, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461c      	mov	r4, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	1ae3      	subs	r3, r4, r3
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	462b      	mov	r3, r5
 80024ac:	f001 f99c 	bl	80037e8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 fc40 	bl	8004d38 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	2201      	movs	r2, #1
 80024be:	409a      	lsls	r2, r3
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <prvAddNewTaskToReadyList+0x15c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	4a2c      	ldr	r2, [pc, #176]	; (8002578 <prvAddNewTaskToReadyList+0x15c>)
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ce:	492b      	ldr	r1, [pc, #172]	; (800257c <prvAddNewTaskToReadyList+0x160>)
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	3304      	adds	r3, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	3204      	adds	r2, #4
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <prvAddNewTaskToReadyList+0x160>)
 800250e:	441a      	add	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	615a      	str	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	4918      	ldr	r1, [pc, #96]	; (800257c <prvAddNewTaskToReadyList+0x160>)
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1c59      	adds	r1, r3, #1
 8002528:	4814      	ldr	r0, [pc, #80]	; (800257c <prvAddNewTaskToReadyList+0x160>)
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4403      	add	r3, r0
 8002534:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002536:	f000 fdb5 	bl	80030a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <prvAddNewTaskToReadyList+0x154>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00e      	beq.n	8002560 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <prvAddNewTaskToReadyList+0x150>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	429a      	cmp	r2, r3
 800254e:	d207      	bcs.n	8002560 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <prvAddNewTaskToReadyList+0x164>)
 8002552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bdb0      	pop	{r4, r5, r7, pc}
 8002568:	2000016c 	.word	0x2000016c
 800256c:	20000094 	.word	0x20000094
 8002570:	20000178 	.word	0x20000178
 8002574:	20000188 	.word	0x20000188
 8002578:	20000174 	.word	0x20000174
 800257c:	20000098 	.word	0x20000098
 8002580:	e000ed04 	.word	0xe000ed04

08002584 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <vTaskStartScheduler+0x98>)
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	2300      	movs	r3, #0
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2300      	movs	r3, #0
 8002594:	2282      	movs	r2, #130	; 0x82
 8002596:	4922      	ldr	r1, [pc, #136]	; (8002620 <vTaskStartScheduler+0x9c>)
 8002598:	4822      	ldr	r0, [pc, #136]	; (8002624 <vTaskStartScheduler+0xa0>)
 800259a:	f7ff fe5a 	bl	8002252 <xTaskCreate>
 800259e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d124      	bne.n	80025f0 <vTaskStartScheduler+0x6c>
        __asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	60bb      	str	r3, [r7, #8]
    }
 80025b8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <vTaskStartScheduler+0xa4>)
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <vTaskStartScheduler+0xa8>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <vTaskStartScheduler+0xac>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <vTaskStartScheduler+0xb0>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <vTaskStartScheduler+0x98>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d102      	bne.n	80025e0 <vTaskStartScheduler+0x5c>
 80025da:	f002 fb0d 	bl	8004bf8 <SEGGER_SYSVIEW_OnIdle>
 80025de:	e004      	b.n	80025ea <vTaskStartScheduler+0x66>
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <vTaskStartScheduler+0xb0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fb65 	bl	8004cb4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025ea:	f000 fc0b 	bl	8002e04 <xPortStartScheduler>
 80025ee:	e00e      	b.n	800260e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d10a      	bne.n	800260e <vTaskStartScheduler+0x8a>
        __asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	607b      	str	r3, [r7, #4]
    }
 800260a:	bf00      	nop
 800260c:	e7fe      	b.n	800260c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <vTaskStartScheduler+0xb4>)
 8002610:	681b      	ldr	r3, [r3, #0]
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000190 	.word	0x20000190
 8002620:	08005fe0 	.word	0x08005fe0
 8002624:	08002b85 	.word	0x08002b85
 8002628:	2000018c 	.word	0x2000018c
 800262c:	20000178 	.word	0x20000178
 8002630:	20000170 	.word	0x20000170
 8002634:	20000094 	.word	0x20000094
 8002638:	2000000c 	.word	0x2000000c

0800263c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <vTaskSuspendAll+0x18>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	4a03      	ldr	r2, [pc, #12]	; (8002654 <vTaskSuspendAll+0x18>)
 8002648:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	20000194 	.word	0x20000194

08002658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002666:	4b73      	ldr	r3, [pc, #460]	; (8002834 <xTaskResumeAll+0x1dc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <xTaskResumeAll+0x2c>
        __asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	607b      	str	r3, [r7, #4]
    }
 8002680:	bf00      	nop
 8002682:	e7fe      	b.n	8002682 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002684:	f000 fcde 	bl	8003044 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002688:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <xTaskResumeAll+0x1dc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3b01      	subs	r3, #1
 800268e:	4a69      	ldr	r2, [pc, #420]	; (8002834 <xTaskResumeAll+0x1dc>)
 8002690:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002692:	4b68      	ldr	r3, [pc, #416]	; (8002834 <xTaskResumeAll+0x1dc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 80c4 	bne.w	8002824 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800269c:	4b66      	ldr	r3, [pc, #408]	; (8002838 <xTaskResumeAll+0x1e0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80bf 	beq.w	8002824 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026a6:	e08e      	b.n	80027c6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026a8:	4b64      	ldr	r3, [pc, #400]	; (800283c <xTaskResumeAll+0x1e4>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	6a12      	ldr	r2, [r2, #32]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	69d2      	ldr	r2, [r2, #28]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3318      	adds	r3, #24
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d103      	bne.n	80026de <xTaskResumeAll+0x86>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	6a1a      	ldr	r2, [r3, #32]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	2200      	movs	r2, #0
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	1e5a      	subs	r2, r3, #1
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	68d2      	ldr	r2, [r2, #12]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	3304      	adds	r3, #4
 8002710:	429a      	cmp	r2, r3
 8002712:	d103      	bne.n	800271c <xTaskResumeAll+0xc4>
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1e5a      	subs	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4618      	mov	r0, r3
 8002730:	f002 fb02 	bl	8004d38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	2201      	movs	r2, #1
 800273a:	409a      	lsls	r2, r3
 800273c:	4b40      	ldr	r3, [pc, #256]	; (8002840 <xTaskResumeAll+0x1e8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	4a3f      	ldr	r2, [pc, #252]	; (8002840 <xTaskResumeAll+0x1e8>)
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274a:	493e      	ldr	r1, [pc, #248]	; (8002844 <xTaskResumeAll+0x1ec>)
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3304      	adds	r3, #4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	3204      	adds	r2, #4
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	1d1a      	adds	r2, r3, #4
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4a2e      	ldr	r2, [pc, #184]	; (8002844 <xTaskResumeAll+0x1ec>)
 800278a:	441a      	add	r2, r3
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	615a      	str	r2, [r3, #20]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002794:	492b      	ldr	r1, [pc, #172]	; (8002844 <xTaskResumeAll+0x1ec>)
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	1c59      	adds	r1, r3, #1
 80027a4:	4827      	ldr	r0, [pc, #156]	; (8002844 <xTaskResumeAll+0x1ec>)
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4403      	add	r3, r0
 80027b0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <xTaskResumeAll+0x1f0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	429a      	cmp	r2, r3
 80027be:	d302      	bcc.n	80027c6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <xTaskResumeAll+0x1f4>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <xTaskResumeAll+0x1e4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f47f af6c 	bne.w	80026a8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80027d6:	f000 fa6b 	bl	8002cb0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <xTaskResumeAll+0x1f8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d010      	beq.n	8002808 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80027e6:	f000 f849 	bl	800287c <xTaskIncrementTick>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <xTaskResumeAll+0x1f4>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f1      	bne.n	80027e6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <xTaskResumeAll+0x1f8>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <xTaskResumeAll+0x1f4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d009      	beq.n	8002824 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002810:	2301      	movs	r3, #1
 8002812:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <xTaskResumeAll+0x1fc>)
 8002816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002824:	f000 fc3e 	bl	80030a4 <vPortExitCritical>

    return xAlreadyYielded;
 8002828:	69bb      	ldr	r3, [r7, #24]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000194 	.word	0x20000194
 8002838:	2000016c 	.word	0x2000016c
 800283c:	2000012c 	.word	0x2000012c
 8002840:	20000174 	.word	0x20000174
 8002844:	20000098 	.word	0x20000098
 8002848:	20000094 	.word	0x20000094
 800284c:	20000180 	.word	0x20000180
 8002850:	2000017c 	.word	0x2000017c
 8002854:	e000ed04 	.word	0xe000ed04

08002858 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800285e:	f000 fcdd 	bl	800321c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <xTaskGetTickCountFromISR+0x20>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800286c:	683b      	ldr	r3, [r7, #0]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000170 	.word	0x20000170

0800287c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002886:	4b7f      	ldr	r3, [pc, #508]	; (8002a84 <xTaskIncrementTick+0x208>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 80f0 	bne.w	8002a70 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002890:	4b7d      	ldr	r3, [pc, #500]	; (8002a88 <xTaskIncrementTick+0x20c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002898:	4a7b      	ldr	r2, [pc, #492]	; (8002a88 <xTaskIncrementTick+0x20c>)
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d120      	bne.n	80028e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80028a4:	4b79      	ldr	r3, [pc, #484]	; (8002a8c <xTaskIncrementTick+0x210>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <xTaskIncrementTick+0x48>
        __asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	607b      	str	r3, [r7, #4]
    }
 80028c0:	bf00      	nop
 80028c2:	e7fe      	b.n	80028c2 <xTaskIncrementTick+0x46>
 80028c4:	4b71      	ldr	r3, [pc, #452]	; (8002a8c <xTaskIncrementTick+0x210>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	4b71      	ldr	r3, [pc, #452]	; (8002a90 <xTaskIncrementTick+0x214>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a6f      	ldr	r2, [pc, #444]	; (8002a8c <xTaskIncrementTick+0x210>)
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4a6f      	ldr	r2, [pc, #444]	; (8002a90 <xTaskIncrementTick+0x214>)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b6e      	ldr	r3, [pc, #440]	; (8002a94 <xTaskIncrementTick+0x218>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	4a6d      	ldr	r2, [pc, #436]	; (8002a94 <xTaskIncrementTick+0x218>)
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	f000 f9e5 	bl	8002cb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028e6:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <xTaskIncrementTick+0x21c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a3a      	ldr	r2, [r7, #32]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	f0c0 80aa 	bcc.w	8002a46 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028f2:	4b66      	ldr	r3, [pc, #408]	; (8002a8c <xTaskIncrementTick+0x210>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d104      	bne.n	8002906 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028fc:	4b66      	ldr	r3, [pc, #408]	; (8002a98 <xTaskIncrementTick+0x21c>)
 80028fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002902:	601a      	str	r2, [r3, #0]
                    break;
 8002904:	e09f      	b.n	8002a46 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002906:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <xTaskIncrementTick+0x210>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002916:	6a3a      	ldr	r2, [r7, #32]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	429a      	cmp	r2, r3
 800291c:	d203      	bcs.n	8002926 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800291e:	4a5e      	ldr	r2, [pc, #376]	; (8002a98 <xTaskIncrementTick+0x21c>)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002924:	e08f      	b.n	8002a46 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	68d2      	ldr	r2, [r2, #12]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	6892      	ldr	r2, [r2, #8]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	3304      	adds	r3, #4
 8002948:	429a      	cmp	r2, r3
 800294a:	d103      	bne.n	8002954 <xTaskIncrementTick+0xd8>
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2200      	movs	r2, #0
 8002958:	615a      	str	r2, [r3, #20]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1e5a      	subs	r2, r3, #1
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01e      	beq.n	80029aa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	6a12      	ldr	r2, [r2, #32]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	69d2      	ldr	r2, [r2, #28]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	3318      	adds	r3, #24
 800298e:	429a      	cmp	r2, r3
 8002990:	d103      	bne.n	800299a <xTaskIncrementTick+0x11e>
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2200      	movs	r2, #0
 800299e:	629a      	str	r2, [r3, #40]	; 0x28
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 f9c3 	bl	8004d38 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	2201      	movs	r2, #1
 80029b8:	409a      	lsls	r2, r3
 80029ba:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <xTaskIncrementTick+0x220>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	4a36      	ldr	r2, [pc, #216]	; (8002a9c <xTaskIncrementTick+0x220>)
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	4935      	ldr	r1, [pc, #212]	; (8002aa0 <xTaskIncrementTick+0x224>)
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3304      	adds	r3, #4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	3204      	adds	r2, #4
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	1d1a      	adds	r2, r3, #4
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <xTaskIncrementTick+0x224>)
 8002a08:	441a      	add	r2, r3
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	615a      	str	r2, [r3, #20]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a12:	4923      	ldr	r1, [pc, #140]	; (8002aa0 <xTaskIncrementTick+0x224>)
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	1c59      	adds	r1, r3, #1
 8002a22:	481f      	ldr	r0, [pc, #124]	; (8002aa0 <xTaskIncrementTick+0x224>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4403      	add	r3, r0
 8002a2e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <xTaskIncrementTick+0x228>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	f4ff af59 	bcc.w	80028f2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002a40:	2301      	movs	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a44:	e755      	b.n	80028f2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <xTaskIncrementTick+0x228>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4c:	4914      	ldr	r1, [pc, #80]	; (8002aa0 <xTaskIncrementTick+0x224>)
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d901      	bls.n	8002a62 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <xTaskIncrementTick+0x22c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	e004      	b.n	8002a7a <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <xTaskIncrementTick+0x230>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <xTaskIncrementTick+0x230>)
 8002a78:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3728      	adds	r7, #40	; 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000194 	.word	0x20000194
 8002a88:	20000170 	.word	0x20000170
 8002a8c:	20000124 	.word	0x20000124
 8002a90:	20000128 	.word	0x20000128
 8002a94:	20000184 	.word	0x20000184
 8002a98:	2000018c 	.word	0x2000018c
 8002a9c:	20000174 	.word	0x20000174
 8002aa0:	20000098 	.word	0x20000098
 8002aa4:	20000094 	.word	0x20000094
 8002aa8:	20000180 	.word	0x20000180
 8002aac:	2000017c 	.word	0x2000017c

08002ab0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <vTaskSwitchContext+0xbc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <vTaskSwitchContext+0xc0>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002ac4:	e04d      	b.n	8002b62 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <vTaskSwitchContext+0xc0>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002acc:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <vTaskSwitchContext+0xc4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	f1c3 031f 	rsb	r3, r3, #31
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	4925      	ldr	r1, [pc, #148]	; (8002b78 <vTaskSwitchContext+0xc8>)
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	607b      	str	r3, [r7, #4]
    }
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <vTaskSwitchContext+0x5a>
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <vTaskSwitchContext+0xc8>)
 8002b18:	4413      	add	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d104      	bne.n	8002b3c <vTaskSwitchContext+0x8c>
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <vTaskSwitchContext+0xcc>)
 8002b44:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <vTaskSwitchContext+0xcc>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <vTaskSwitchContext+0xd0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d102      	bne.n	8002b58 <vTaskSwitchContext+0xa8>
 8002b52:	f002 f851 	bl	8004bf8 <SEGGER_SYSVIEW_OnIdle>
}
 8002b56:	e004      	b.n	8002b62 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <vTaskSwitchContext+0xcc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 f8a9 	bl	8004cb4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000194 	.word	0x20000194
 8002b70:	20000180 	.word	0x20000180
 8002b74:	20000174 	.word	0x20000174
 8002b78:	20000098 	.word	0x20000098
 8002b7c:	20000094 	.word	0x20000094
 8002b80:	20000190 	.word	0x20000190

08002b84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b8c:	f000 f852 	bl	8002c34 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <prvIdleTask+0x28>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d9f9      	bls.n	8002b8c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <prvIdleTask+0x2c>)
 8002b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ba8:	e7f0      	b.n	8002b8c <prvIdleTask+0x8>
 8002baa:	bf00      	nop
 8002bac:	20000098 	.word	0x20000098
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	e00c      	b.n	8002bda <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <prvInitialiseTaskLists+0x60>)
 8002bcc:	4413      	add	r3, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fae8 	bl	80021a4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d9ef      	bls.n	8002bc0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <prvInitialiseTaskLists+0x64>)
 8002be2:	f7ff fadf 	bl	80021a4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002be6:	480d      	ldr	r0, [pc, #52]	; (8002c1c <prvInitialiseTaskLists+0x68>)
 8002be8:	f7ff fadc 	bl	80021a4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002bec:	480c      	ldr	r0, [pc, #48]	; (8002c20 <prvInitialiseTaskLists+0x6c>)
 8002bee:	f7ff fad9 	bl	80021a4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002bf2:	480c      	ldr	r0, [pc, #48]	; (8002c24 <prvInitialiseTaskLists+0x70>)
 8002bf4:	f7ff fad6 	bl	80021a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002bf8:	480b      	ldr	r0, [pc, #44]	; (8002c28 <prvInitialiseTaskLists+0x74>)
 8002bfa:	f7ff fad3 	bl	80021a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <prvInitialiseTaskLists+0x78>)
 8002c00:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <prvInitialiseTaskLists+0x64>)
 8002c02:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <prvInitialiseTaskLists+0x7c>)
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <prvInitialiseTaskLists+0x68>)
 8002c08:	601a      	str	r2, [r3, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000098 	.word	0x20000098
 8002c18:	200000fc 	.word	0x200000fc
 8002c1c:	20000110 	.word	0x20000110
 8002c20:	2000012c 	.word	0x2000012c
 8002c24:	20000140 	.word	0x20000140
 8002c28:	20000158 	.word	0x20000158
 8002c2c:	20000124 	.word	0x20000124
 8002c30:	20000128 	.word	0x20000128

08002c34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c3a:	e019      	b.n	8002c70 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002c3c:	f000 fa02 	bl	8003044 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <prvCheckTasksWaitingTermination+0x50>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fad6 	bl	80021fe <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <prvCheckTasksWaitingTermination+0x54>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <prvCheckTasksWaitingTermination+0x54>)
 8002c5a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <prvCheckTasksWaitingTermination+0x58>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <prvCheckTasksWaitingTermination+0x58>)
 8002c64:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c66:	f000 fa1d 	bl	80030a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f810 	bl	8002c90 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <prvCheckTasksWaitingTermination+0x58>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e1      	bne.n	8002c3c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000140 	.word	0x20000140
 8002c88:	2000016c 	.word	0x2000016c
 8002c8c:	20000154 	.word	0x20000154

08002c90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fbdd 	bl	800345c <vPortFree>
                vPortFree( pxTCB );
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fbda 	bl	800345c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <prvResetNextTaskUnblockTime+0x30>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <prvResetNextTaskUnblockTime+0x34>)
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002cc6:	e005      	b.n	8002cd4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <prvResetNextTaskUnblockTime+0x30>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <prvResetNextTaskUnblockTime+0x34>)
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000124 	.word	0x20000124
 8002ce4:	2000018c 	.word	0x2000018c

08002ce8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3b04      	subs	r3, #4
 8002d06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f023 0201 	bic.w	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3b04      	subs	r3, #4
 8002d16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d18:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <pxPortInitialiseStack+0x64>)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3b14      	subs	r3, #20
 8002d22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3b04      	subs	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f06f 0202 	mvn.w	r2, #2
 8002d36:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3b20      	subs	r3, #32
 8002d3c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	08002d51 	.word	0x08002d51

08002d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <prvTaskExitError+0x54>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d00a      	beq.n	8002d7a <prvTaskExitError+0x2a>
        __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	60fb      	str	r3, [r7, #12]
    }
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <prvTaskExitError+0x28>
        __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	60bb      	str	r3, [r7, #8]
    }
 8002d8c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d8e:	bf00      	nop
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0fc      	beq.n	8002d90 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	20000010 	.word	0x20000010
	...

08002db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <pxCurrentTCBConst2>)
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	6808      	ldr	r0, [r1, #0]
 8002db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dba:	f380 8809 	msr	PSP, r0
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f380 8811 	msr	BASEPRI, r0
 8002dca:	4770      	bx	lr
 8002dcc:	f3af 8000 	nop.w

08002dd0 <pxCurrentTCBConst2>:
 8002dd0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop

08002dd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <prvPortStartFirstTask+0x24>)
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f380 8808 	msr	MSP, r0
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8814 	msr	CONTROL, r0
 8002dea:	b662      	cpsie	i
 8002dec:	b661      	cpsie	f
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	df00      	svc	0
 8002df8:	bf00      	nop
 8002dfa:	0000      	.short	0x0000
 8002dfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop

08002e04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e0a:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <xPortStartScheduler+0x120>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <xPortStartScheduler+0x124>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d10a      	bne.n	8002e2a <xPortStartScheduler+0x26>
        __asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	613b      	str	r3, [r7, #16]
    }
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <xPortStartScheduler+0x120>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a3f      	ldr	r2, [pc, #252]	; (8002f2c <xPortStartScheduler+0x128>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10a      	bne.n	8002e4a <xPortStartScheduler+0x46>
        __asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	60fb      	str	r3, [r7, #12]
    }
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <xPortStartScheduler+0x12c>)
 8002e4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <xPortStartScheduler+0x130>)
 8002e70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e74:	2207      	movs	r2, #7
 8002e76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e78:	e009      	b.n	8002e8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d0ef      	beq.n	8002e7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e9a:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00a      	beq.n	8002ebc <xPortStartScheduler+0xb8>
        __asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	60bb      	str	r3, [r7, #8]
    }
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ec4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ece:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ed0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <xPortStartScheduler+0x138>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <xPortStartScheduler+0x138>)
 8002ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <xPortStartScheduler+0x138>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <xPortStartScheduler+0x138>)
 8002eec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ef2:	f000 f963 	bl	80031bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <xPortStartScheduler+0x13c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002efc:	f000 f982 	bl	8003204 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <xPortStartScheduler+0x140>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <xPortStartScheduler+0x140>)
 8002f06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002f0c:	f7ff ff64 	bl	8002dd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f10:	f7ff fdce 	bl	8002ab0 <vTaskSwitchContext>
    prvTaskExitError();
 8002f14:	f7ff ff1c 	bl	8002d50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00
 8002f28:	410fc271 	.word	0x410fc271
 8002f2c:	410fc270 	.word	0x410fc270
 8002f30:	e000e400 	.word	0xe000e400
 8002f34:	20000198 	.word	0x20000198
 8002f38:	2000019c 	.word	0x2000019c
 8002f3c:	e000ed20 	.word	0xe000ed20
 8002f40:	20000010 	.word	0x20000010
 8002f44:	e000ef34 	.word	0xe000ef34

08002f48 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f4e:	4b37      	ldr	r3, [pc, #220]	; (800302c <vInitPrioGroupValue+0xe4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a37      	ldr	r2, [pc, #220]	; (8003030 <vInitPrioGroupValue+0xe8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10a      	bne.n	8002f6e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	613b      	str	r3, [r7, #16]
    }
 8002f6a:	bf00      	nop
 8002f6c:	e7fe      	b.n	8002f6c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f6e:	4b2f      	ldr	r3, [pc, #188]	; (800302c <vInitPrioGroupValue+0xe4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a30      	ldr	r2, [pc, #192]	; (8003034 <vInitPrioGroupValue+0xec>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d10a      	bne.n	8002f8e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	60fb      	str	r3, [r7, #12]
    }
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <vInitPrioGroupValue+0xf0>)
 8002f90:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	22ff      	movs	r2, #255	; 0xff
 8002f9e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <vInitPrioGroupValue+0xf4>)
 8002fb4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8002fb8:	2207      	movs	r2, #7
 8002fba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fbc:	e009      	b.n	8002fd2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8002fc6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	d0ef      	beq.n	8002fbe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1c3 0307 	rsb	r3, r3, #7
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d00a      	beq.n	8003000 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	60bb      	str	r3, [r7, #8]
    }
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8003008:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <vInitPrioGroupValue+0xf8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003012:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8003014:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00
 8003030:	410fc271 	.word	0x410fc271
 8003034:	410fc270 	.word	0x410fc270
 8003038:	e000e400 	.word	0xe000e400
 800303c:	20000198 	.word	0x20000198
 8003040:	2000019c 	.word	0x2000019c

08003044 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
        __asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	607b      	str	r3, [r7, #4]
    }
 800305c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <vPortEnterCritical+0x58>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3301      	adds	r3, #1
 8003064:	4a0d      	ldr	r2, [pc, #52]	; (800309c <vPortEnterCritical+0x58>)
 8003066:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <vPortEnterCritical+0x58>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10f      	bne.n	8003090 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <vPortEnterCritical+0x5c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <vPortEnterCritical+0x4c>
        __asm volatile
 800307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	603b      	str	r3, [r7, #0]
    }
 800308c:	bf00      	nop
 800308e:	e7fe      	b.n	800308e <vPortEnterCritical+0x4a>
    }
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	20000010 	.word	0x20000010
 80030a0:	e000ed04 	.word	0xe000ed04

080030a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <vPortExitCritical+0x50>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <vPortExitCritical+0x24>
        __asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	607b      	str	r3, [r7, #4]
    }
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <vPortExitCritical+0x50>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <vPortExitCritical+0x50>)
 80030d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <vPortExitCritical+0x50>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <vPortExitCritical+0x42>
 80030da:	2300      	movs	r3, #0
 80030dc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80030e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000010 	.word	0x20000010
	...

08003100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003100:	f3ef 8009 	mrs	r0, PSP
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	4b15      	ldr	r3, [pc, #84]	; (8003160 <pxCurrentTCBConst>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f01e 0f10 	tst.w	lr, #16
 8003110:	bf08      	it	eq
 8003112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311a:	6010      	str	r0, [r2, #0]
 800311c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003124:	f380 8811 	msr	BASEPRI, r0
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f7ff fcbe 	bl	8002ab0 <vTaskSwitchContext>
 8003134:	f04f 0000 	mov.w	r0, #0
 8003138:	f380 8811 	msr	BASEPRI, r0
 800313c:	bc09      	pop	{r0, r3}
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	6808      	ldr	r0, [r1, #0]
 8003142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003146:	f01e 0f10 	tst.w	lr, #16
 800314a:	bf08      	it	eq
 800314c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003150:	f380 8809 	msr	PSP, r0
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	f3af 8000 	nop.w

08003160 <pxCurrentTCBConst>:
 8003160:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop

08003168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
        __asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	607b      	str	r3, [r7, #4]
    }
 8003180:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003182:	f001 fcbf 	bl	8004b04 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003186:	f7ff fb79 	bl	800287c <xTaskIncrementTick>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003190:	f001 fd16 	bl	8004bc0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <SysTick_Handler+0x50>)
 8003196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e001      	b.n	80031a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800319e:	f001 fcf3 	bl	8004b88 <SEGGER_SYSVIEW_RecordExitISR>
 80031a2:	2300      	movs	r3, #0
 80031a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f383 8811 	msr	BASEPRI, r3
    }
 80031ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <vPortSetupTimerInterrupt+0x38>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <vPortSetupTimerInterrupt+0x3c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <vPortSetupTimerInterrupt+0x40>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	4a09      	ldr	r2, [pc, #36]	; (8003200 <vPortSetupTimerInterrupt+0x44>)
 80031da:	3b01      	subs	r3, #1
 80031dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010
 80031f4:	e000e018 	.word	0xe000e018
 80031f8:	20000000 	.word	0x20000000
 80031fc:	10624dd3 	.word	0x10624dd3
 8003200:	e000e014 	.word	0xe000e014

08003204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003214 <vPortEnableVFP+0x10>
 8003208:	6801      	ldr	r1, [r0, #0]
 800320a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800320e:	6001      	str	r1, [r0, #0]
 8003210:	4770      	bx	lr
 8003212:	0000      	.short	0x0000
 8003214:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop

0800321c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003222:	f3ef 8305 	mrs	r3, IPSR
 8003226:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	d914      	bls.n	8003258 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <vPortValidateInterruptPriority+0x70>)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <vPortValidateInterruptPriority+0x74>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	7afa      	ldrb	r2, [r7, #11]
 800323e:	429a      	cmp	r2, r3
 8003240:	d20a      	bcs.n	8003258 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	607b      	str	r3, [r7, #4]
    }
 8003254:	bf00      	nop
 8003256:	e7fe      	b.n	8003256 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <vPortValidateInterruptPriority+0x78>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <vPortValidateInterruptPriority+0x7c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d90a      	bls.n	800327e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	603b      	str	r3, [r7, #0]
    }
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <vPortValidateInterruptPriority+0x60>
    }
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e3f0 	.word	0xe000e3f0
 8003290:	20000198 	.word	0x20000198
 8003294:	e000ed0c 	.word	0xe000ed0c
 8003298:	2000019c 	.word	0x2000019c

0800329c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80032a8:	f7ff f9c8 	bl	800263c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80032ac:	4b65      	ldr	r3, [pc, #404]	; (8003444 <pvPortMalloc+0x1a8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80032b4:	f000 f934 	bl	8003520 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80032b8:	4b63      	ldr	r3, [pc, #396]	; (8003448 <pvPortMalloc+0x1ac>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f040 80a7 	bne.w	8003414 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d02d      	beq.n	8003328 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80032cc:	2208      	movs	r2, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d227      	bcs.n	8003328 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80032d8:	2208      	movs	r2, #8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d021      	beq.n	800332e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f023 0307 	bic.w	r3, r3, #7
 80032f0:	3308      	adds	r3, #8
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d214      	bcs.n	8003322 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f023 0307 	bic.w	r3, r3, #7
 80032fe:	3308      	adds	r3, #8
 8003300:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <pvPortMalloc+0x92>
        __asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	617b      	str	r3, [r7, #20]
    }
 800331e:	bf00      	nop
 8003320:	e7fe      	b.n	8003320 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003326:	e002      	b.n	800332e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	e000      	b.n	8003330 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800332e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d06e      	beq.n	8003414 <pvPortMalloc+0x178>
 8003336:	4b45      	ldr	r3, [pc, #276]	; (800344c <pvPortMalloc+0x1b0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d869      	bhi.n	8003414 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003340:	4b43      	ldr	r3, [pc, #268]	; (8003450 <pvPortMalloc+0x1b4>)
 8003342:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003344:	4b42      	ldr	r3, [pc, #264]	; (8003450 <pvPortMalloc+0x1b4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800334a:	e004      	b.n	8003356 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d903      	bls.n	8003368 <pvPortMalloc+0xcc>
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f1      	bne.n	800334c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003368:	4b36      	ldr	r3, [pc, #216]	; (8003444 <pvPortMalloc+0x1a8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336e:	429a      	cmp	r2, r3
 8003370:	d050      	beq.n	8003414 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2208      	movs	r2, #8
 8003378:	4413      	add	r3, r2
 800337a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	1ad2      	subs	r2, r2, r3
 800338c:	2308      	movs	r3, #8
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	429a      	cmp	r2, r3
 8003392:	d91f      	bls.n	80033d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <pvPortMalloc+0x120>
        __asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	613b      	str	r3, [r7, #16]
    }
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	1ad2      	subs	r2, r2, r3
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033ce:	69b8      	ldr	r0, [r7, #24]
 80033d0:	f000 f908 	bl	80035e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <pvPortMalloc+0x1b0>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <pvPortMalloc+0x1b0>)
 80033e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033e2:	4b1a      	ldr	r3, [pc, #104]	; (800344c <pvPortMalloc+0x1b0>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <pvPortMalloc+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d203      	bcs.n	80033f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <pvPortMalloc+0x1b0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <pvPortMalloc+0x1b8>)
 80033f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <pvPortMalloc+0x1ac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	431a      	orrs	r2, r3
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <pvPortMalloc+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	4a11      	ldr	r2, [pc, #68]	; (8003458 <pvPortMalloc+0x1bc>)
 8003412:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003414:	f7ff f920 	bl	8002658 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <pvPortMalloc+0x19c>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	60fb      	str	r3, [r7, #12]
    }
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <pvPortMalloc+0x19a>
    return pvReturn;
 8003438:	69fb      	ldr	r3, [r7, #28]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3728      	adds	r7, #40	; 0x28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20012da8 	.word	0x20012da8
 8003448:	20012dbc 	.word	0x20012dbc
 800344c:	20012dac 	.word	0x20012dac
 8003450:	20012da0 	.word	0x20012da0
 8003454:	20012db0 	.word	0x20012db0
 8003458:	20012db4 	.word	0x20012db4

0800345c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d04d      	beq.n	800350a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800346e:	2308      	movs	r3, #8
 8003470:	425b      	negs	r3, r3
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4413      	add	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	4b24      	ldr	r3, [pc, #144]	; (8003514 <vPortFree+0xb8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <vPortFree+0x44>
        __asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	60fb      	str	r3, [r7, #12]
    }
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <vPortFree+0x62>
        __asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	60bb      	str	r3, [r7, #8]
    }
 80034ba:	bf00      	nop
 80034bc:	e7fe      	b.n	80034bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <vPortFree+0xb8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01e      	beq.n	800350a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d11a      	bne.n	800350a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <vPortFree+0xb8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	43db      	mvns	r3, r3
 80034de:	401a      	ands	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80034e4:	f7ff f8aa 	bl	800263c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <vPortFree+0xbc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <vPortFree+0xbc>)
 80034f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034f6:	6938      	ldr	r0, [r7, #16]
 80034f8:	f000 f874 	bl	80035e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <vPortFree+0xc0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	4a06      	ldr	r2, [pc, #24]	; (800351c <vPortFree+0xc0>)
 8003504:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003506:	f7ff f8a7 	bl	8002658 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20012dbc 	.word	0x20012dbc
 8003518:	20012dac 	.word	0x20012dac
 800351c:	20012db8 	.word	0x20012db8

08003520 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003526:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800352a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800352c:	4b27      	ldr	r3, [pc, #156]	; (80035cc <prvHeapInit+0xac>)
 800352e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3307      	adds	r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0307 	bic.w	r3, r3, #7
 8003546:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <prvHeapInit+0xac>)
 8003550:	4413      	add	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003558:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <prvHeapInit+0xb0>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800355e:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <prvHeapInit+0xb0>)
 8003560:	2200      	movs	r2, #0
 8003562:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4413      	add	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800356c:	2208      	movs	r2, #8
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0307 	bic.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <prvHeapInit+0xb4>)
 8003580:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <prvHeapInit+0xb4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <prvHeapInit+0xb4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	1ad2      	subs	r2, r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <prvHeapInit+0xb4>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <prvHeapInit+0xb8>)
 80035ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4a09      	ldr	r2, [pc, #36]	; (80035dc <prvHeapInit+0xbc>)
 80035b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <prvHeapInit+0xc0>)
 80035ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035be:	601a      	str	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	200001a0 	.word	0x200001a0
 80035d0:	20012da0 	.word	0x20012da0
 80035d4:	20012da8 	.word	0x20012da8
 80035d8:	20012db0 	.word	0x20012db0
 80035dc:	20012dac 	.word	0x20012dac
 80035e0:	20012dbc 	.word	0x20012dbc

080035e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <prvInsertBlockIntoFreeList+0xac>)
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e002      	b.n	80035f8 <prvInsertBlockIntoFreeList+0x14>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d8f7      	bhi.n	80035f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	4413      	add	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d108      	bne.n	8003626 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	441a      	add	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d118      	bne.n	800366c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <prvInsertBlockIntoFreeList+0xb0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d00d      	beq.n	8003662 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	441a      	add	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e008      	b.n	8003674 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <prvInsertBlockIntoFreeList+0xb0>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e003      	b.n	8003674 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	d002      	beq.n	8003682 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20012da0 	.word	0x20012da0
 8003694:	20012da8 	.word	0x20012da8

08003698 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800369c:	4803      	ldr	r0, [pc, #12]	; (80036ac <_cbSendSystemDesc+0x14>)
 800369e:	f001 f9db 	bl	8004a58 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80036a2:	4803      	ldr	r0, [pc, #12]	; (80036b0 <_cbSendSystemDesc+0x18>)
 80036a4:	f001 f9d8 	bl	8004a58 <SEGGER_SYSVIEW_SendSysDesc>
}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	08005fe8 	.word	0x08005fe8
 80036b0:	08006024 	.word	0x08006024

080036b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <SEGGER_SYSVIEW_Conf+0x24>)
 80036c2:	4a06      	ldr	r2, [pc, #24]	; (80036dc <SEGGER_SYSVIEW_Conf+0x28>)
 80036c4:	f000 fe4e 	bl	8004364 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80036c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80036cc:	f000 fe8e 	bl	80043ec <SEGGER_SYSVIEW_SetRAMBase>
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000000 	.word	0x20000000
 80036d8:	08003699 	.word	0x08003699
 80036dc:	080060c4 	.word	0x080060c4

080036e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	e033      	b.n	8003754 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80036ec:	491e      	ldr	r1, [pc, #120]	; (8003768 <_cbSendTaskList+0x88>)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	491a      	ldr	r1, [pc, #104]	; (8003768 <_cbSendTaskList+0x88>)
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3304      	adds	r3, #4
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	4c16      	ldr	r4, [pc, #88]	; (8003768 <_cbSendTaskList+0x88>)
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4423      	add	r3, r4
 800371c:	3308      	adds	r3, #8
 800371e:	681c      	ldr	r4, [r3, #0]
 8003720:	4d11      	ldr	r5, [pc, #68]	; (8003768 <_cbSendTaskList+0x88>)
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	442b      	add	r3, r5
 800372e:	330c      	adds	r3, #12
 8003730:	681d      	ldr	r5, [r3, #0]
 8003732:	4e0d      	ldr	r6, [pc, #52]	; (8003768 <_cbSendTaskList+0x88>)
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4433      	add	r3, r6
 8003740:	3310      	adds	r3, #16
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	462b      	mov	r3, r5
 8003748:	4622      	mov	r2, r4
 800374a:	f000 f8b5 	bl	80038b8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3301      	adds	r3, #1
 8003752:	607b      	str	r3, [r7, #4]
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <_cbSendTaskList+0x8c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3c6      	bcc.n	80036ec <_cbSendTaskList+0xc>
  }
}
 800375e:	bf00      	nop
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003768:	20012dc0 	.word	0x20012dc0
 800376c:	20012e60 	.word	0x20012e60

08003770 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003770:	b5b0      	push	{r4, r5, r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003776:	f7ff f86f 	bl	8002858 <xTaskGetTickCountFromISR>
 800377a:	4603      	mov	r3, r0
 800377c:	461a      	mov	r2, r3
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	f04f 0400 	mov.w	r4, #0
 8003792:	f04f 0500 	mov.w	r5, #0
 8003796:	015d      	lsls	r5, r3, #5
 8003798:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800379c:	0154      	lsls	r4, r2, #5
 800379e:	4622      	mov	r2, r4
 80037a0:	462b      	mov	r3, r5
 80037a2:	1a12      	subs	r2, r2, r0
 80037a4:	eb63 0301 	sbc.w	r3, r3, r1
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	f04f 0500 	mov.w	r5, #0
 80037b0:	009d      	lsls	r5, r3, #2
 80037b2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80037b6:	0094      	lsls	r4, r2, #2
 80037b8:	4622      	mov	r2, r4
 80037ba:	462b      	mov	r3, r5
 80037bc:	1812      	adds	r2, r2, r0
 80037be:	eb41 0303 	adc.w	r3, r1, r3
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	00d9      	lsls	r1, r3, #3
 80037cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037d0:	00d0      	lsls	r0, r2, #3
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80037da:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bdb0      	pop	{r4, r5, r7, pc}

080037e8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80037f6:	2205      	movs	r2, #5
 80037f8:	492b      	ldr	r1, [pc, #172]	; (80038a8 <SYSVIEW_AddTask+0xc0>)
 80037fa:	68b8      	ldr	r0, [r7, #8]
 80037fc:	f001 fc4c 	bl	8005098 <memcmp>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04b      	beq.n	800389e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b07      	cmp	r3, #7
 800380c:	d903      	bls.n	8003816 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800380e:	4828      	ldr	r0, [pc, #160]	; (80038b0 <SYSVIEW_AddTask+0xc8>)
 8003810:	f001 fbb0 	bl	8004f74 <SEGGER_SYSVIEW_Warn>
    return;
 8003814:	e044      	b.n	80038a0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003816:	4b25      	ldr	r3, [pc, #148]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4926      	ldr	r1, [pc, #152]	; (80038b4 <SYSVIEW_AddTask+0xcc>)
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4921      	ldr	r1, [pc, #132]	; (80038b4 <SYSVIEW_AddTask+0xcc>)
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3304      	adds	r3, #4
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003840:	4b1a      	ldr	r3, [pc, #104]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	491b      	ldr	r1, [pc, #108]	; (80038b4 <SYSVIEW_AddTask+0xcc>)
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3308      	adds	r3, #8
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4916      	ldr	r1, [pc, #88]	; (80038b4 <SYSVIEW_AddTask+0xcc>)
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	330c      	adds	r3, #12
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4910      	ldr	r1, [pc, #64]	; (80038b4 <SYSVIEW_AddTask+0xcc>)
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	3310      	adds	r3, #16
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a08      	ldr	r2, [pc, #32]	; (80038ac <SYSVIEW_AddTask+0xc4>)
 800388a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f80e 	bl	80038b8 <SYSVIEW_SendTaskInfo>
 800389c:	e000      	b.n	80038a0 <SYSVIEW_AddTask+0xb8>
    return;
 800389e:	bf00      	nop

}
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	08006034 	.word	0x08006034
 80038ac:	20012e60 	.word	0x20012e60
 80038b0:	0800603c 	.word	0x0800603c
 80038b4:	20012dc0 	.word	0x20012dc0

080038b8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80038c6:	f107 0314 	add.w	r3, r7, #20
 80038ca:	2214      	movs	r2, #20
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 fbfe 	bl	80050d0 <memset>
  TaskInfo.TaskID     = TaskID;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 ffbb 	bl	8004868 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80038f2:	bf00      	nop
 80038f4:	3728      	adds	r7, #40	; 0x28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <_DoInit+0x98>)
 8003904:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2203      	movs	r2, #3
 800390a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2203      	movs	r2, #3
 8003910:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a20      	ldr	r2, [pc, #128]	; (8003998 <_DoInit+0x9c>)
 8003916:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a20      	ldr	r2, [pc, #128]	; (800399c <_DoInit+0xa0>)
 800391c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003924:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a17      	ldr	r2, [pc, #92]	; (8003998 <_DoInit+0x9c>)
 800393c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a17      	ldr	r2, [pc, #92]	; (80039a0 <_DoInit+0xa4>)
 8003942:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2210      	movs	r2, #16
 8003948:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3307      	adds	r3, #7
 8003960:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <_DoInit+0xa8>)
 8003962:	6810      	ldr	r0, [r2, #0]
 8003964:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003966:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <_DoInit+0xac>)
 800396e:	6810      	ldr	r0, [r2, #0]
 8003970:	6018      	str	r0, [r3, #0]
 8003972:	8891      	ldrh	r1, [r2, #4]
 8003974:	7992      	ldrb	r2, [r2, #6]
 8003976:	8099      	strh	r1, [r3, #4]
 8003978:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800397a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003984:	f3bf 8f5f 	dmb	sy
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	200143e8 	.word	0x200143e8
 8003998:	0800608c 	.word	0x0800608c
 800399c:	20012e64 	.word	0x20012e64
 80039a0:	20013264 	.word	0x20013264
 80039a4:	08006098 	.word	0x08006098
 80039a8:	0800609c 	.word	0x0800609c

080039ac <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80039b8:	2300      	movs	r3, #0
 80039ba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d905      	bls.n	80039dc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
 80039da:	e007      	b.n	80039ec <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	69b9      	ldr	r1, [r7, #24]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	1acb      	subs	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3b01      	subs	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	4293      	cmp	r3, r2
 80039f8:	bf28      	it	cs
 80039fa:	4613      	movcs	r3, r2
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4293      	cmp	r3, r2
 8003a04:	bf28      	it	cs
 8003a06:	4613      	movcs	r3, r2
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	6978      	ldr	r0, [r7, #20]
 8003a1a:	f001 fb4b 	bl	80050b4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	4413      	add	r3, r2
 8003a24:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	4413      	add	r3, r2
 8003a3c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d101      	bne.n	8003a4c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a4c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1b2      	bne.n	80039c2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b088      	sub	sp, #32
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d911      	bls.n	8003aae <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	6938      	ldr	r0, [r7, #16]
 8003a9a:	f001 fb0b 	bl	80050b4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a9e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	441a      	add	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003aac:	e01f      	b.n	8003aee <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	4413      	add	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	6938      	ldr	r0, [r7, #16]
 8003ac2:	f001 faf7 	bl	80050b4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	4413      	add	r3, r2
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4619      	mov	r1, r3
 8003ade:	6938      	ldr	r0, [r7, #16]
 8003ae0:	f001 fae8 	bl	80050b4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ae4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	60da      	str	r2, [r3, #12]
}
 8003aee:	bf00      	nop
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003af6:	b480      	push	{r7}
 8003af8:	b087      	sub	sp, #28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d808      	bhi.n	8003b24 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad2      	subs	r2, r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e004      	b.n	8003b2e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003b2e:	697b      	ldr	r3, [r7, #20]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	; 0x30
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003b48:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <SEGGER_RTT_ReadNoLock+0x1e>
 8003b56:	f7ff fed1 	bl	80038fc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	3360      	adds	r3, #96	; 0x60
 8003b66:	4a37      	ldr	r2, [pc, #220]	; (8003c44 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b68:	4413      	add	r3, r2
 8003b6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d92b      	bls.n	8003be0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bf28      	it	cs
 8003b9a:	4613      	movcs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	4413      	add	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	6939      	ldr	r1, [r7, #16]
 8003bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bae:	f001 fa81 	bl	80050b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4413      	add	r3, r2
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d101      	bne.n	8003be0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	bf28      	it	cs
 8003bf0:	4613      	movcs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d019      	beq.n	8003c2e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	4413      	add	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	6939      	ldr	r1, [r7, #16]
 8003c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c0a:	f001 fa53 	bl	80050b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4413      	add	r3, r2
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3730      	adds	r7, #48	; 0x30
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	200143e8 	.word	0x200143e8

08003c48 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003c66:	4413      	add	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d029      	beq.n	8003cc6 <SEGGER_RTT_WriteNoLock+0x7e>
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d82e      	bhi.n	8003cd4 <SEGGER_RTT_WriteNoLock+0x8c>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <SEGGER_RTT_WriteNoLock+0x38>
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d013      	beq.n	8003ca6 <SEGGER_RTT_WriteNoLock+0x5e>
 8003c7e:	e029      	b.n	8003cd4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003c80:	6978      	ldr	r0, [r7, #20]
 8003c82:	f7ff ff38 	bl	8003af6 <_GetAvailWriteSpace>
 8003c86:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d202      	bcs.n	8003c96 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003c94:	e021      	b.n	8003cda <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	69b9      	ldr	r1, [r7, #24]
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f7ff fee1 	bl	8003a66 <_WriteNoCheck>
    break;
 8003ca4:	e019      	b.n	8003cda <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff ff25 	bl	8003af6 <_GetAvailWriteSpace>
 8003cac:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	bf28      	it	cs
 8003cb6:	4613      	movcs	r3, r2
 8003cb8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	6978      	ldr	r0, [r7, #20]
 8003cc0:	f7ff fed1 	bl	8003a66 <_WriteNoCheck>
    break;
 8003cc4:	e009      	b.n	8003cda <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	6978      	ldr	r0, [r7, #20]
 8003ccc:	f7ff fe6e 	bl	80039ac <_WriteBlocking>
 8003cd0:	61f8      	str	r0, [r7, #28]
    break;
 8003cd2:	e002      	b.n	8003cda <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
    break;
 8003cd8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003cda:	69fb      	ldr	r3, [r7, #28]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	200143e8 	.word	0x200143e8

08003ce8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <SEGGER_RTT_Write+0x48>)
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <SEGGER_RTT_Write+0x1e>
 8003d02:	f7ff fdfb 	bl	80038fc <_DoInit>
  SEGGER_RTT_LOCK();
 8003d06:	f3ef 8311 	mrs	r3, BASEPRI
 8003d0a:	f04f 0120 	mov.w	r1, #32
 8003d0e:	f381 8811 	msr	BASEPRI, r1
 8003d12:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	68b9      	ldr	r1, [r7, #8]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff ff95 	bl	8003c48 <SEGGER_RTT_WriteNoLock>
 8003d1e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003d26:	697b      	ldr	r3, [r7, #20]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	200143e8 	.word	0x200143e8

08003d34 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003d42:	4b3d      	ldr	r3, [pc, #244]	; (8003e38 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003d50:	f7ff fdd4 	bl	80038fc <_DoInit>
  SEGGER_RTT_LOCK();
 8003d54:	f3ef 8311 	mrs	r3, BASEPRI
 8003d58:	f04f 0120 	mov.w	r1, #32
 8003d5c:	f381 8811 	msr	BASEPRI, r1
 8003d60:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d62:	4b35      	ldr	r3, [pc, #212]	; (8003e38 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d64:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003d6a:	6939      	ldr	r1, [r7, #16]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	440b      	add	r3, r1
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3301      	adds	r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	dbeb      	blt.n	8003d6a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003d92:	e000      	b.n	8003d96 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003d94:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	da3f      	bge.n	8003e20 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003da0:	6939      	ldr	r1, [r7, #16]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	440b      	add	r3, r1
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003db4:	6939      	ldr	r1, [r7, #16]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	4613      	mov	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003dca:	6939      	ldr	r1, [r7, #16]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3320      	adds	r3, #32
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003dde:	6939      	ldr	r1, [r7, #16]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	4613      	mov	r3, r2
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	4413      	add	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	440b      	add	r3, r1
 8003dec:	3328      	adds	r3, #40	; 0x28
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003df2:	6939      	ldr	r1, [r7, #16]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	4613      	mov	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	440b      	add	r3, r1
 8003e00:	3324      	adds	r3, #36	; 0x24
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003e06:	6939      	ldr	r1, [r7, #16]
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	440b      	add	r3, r1
 8003e14:	332c      	adds	r3, #44	; 0x2c
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e1a:	f3bf 8f5f 	dmb	sy
 8003e1e:	e002      	b.n	8003e26 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	200143e8 	.word	0x200143e8

08003e3c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e4a:	4b33      	ldr	r3, [pc, #204]	; (8003f18 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003e58:	f7ff fd50 	bl	80038fc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003e5e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	461a      	mov	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d24d      	bcs.n	8003f08 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8003e70:	f04f 0120 	mov.w	r1, #32
 8003e74:	f381 8811 	msr	BASEPRI, r1
 8003e78:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d031      	beq.n	8003ee4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3360      	adds	r3, #96	; 0x60
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e94:	6979      	ldr	r1, [r7, #20]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3364      	adds	r3, #100	; 0x64
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003ea8:	6979      	ldr	r1, [r7, #20]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3368      	adds	r3, #104	; 0x68
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003ebc:	6979      	ldr	r1, [r7, #20]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	440b      	add	r3, r1
 8003eca:	3370      	adds	r3, #112	; 0x70
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003ed0:	6979      	ldr	r1, [r7, #20]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4413      	add	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	440b      	add	r3, r1
 8003ede:	336c      	adds	r3, #108	; 0x6c
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003ee4:	6979      	ldr	r1, [r7, #20]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3374      	adds	r3, #116	; 0x74
 8003ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ef8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	e002      	b.n	8003f0e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003f0e:	69fb      	ldr	r3, [r7, #28]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3720      	adds	r7, #32
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200143e8 	.word	0x200143e8

08003f1c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003f2c:	e002      	b.n	8003f34 <_EncodeStr+0x18>
    Len++;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	3301      	adds	r3, #1
 8003f32:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4413      	add	r3, r2
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f6      	bne.n	8003f2e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d901      	bls.n	8003f4c <_EncodeStr+0x30>
    Len = Limit;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2bfe      	cmp	r3, #254	; 0xfe
 8003f50:	d806      	bhi.n	8003f60 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	60fa      	str	r2, [r7, #12]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	e011      	b.n	8003f84 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	60fa      	str	r2, [r7, #12]
 8003f66:	22ff      	movs	r2, #255	; 0xff
 8003f68:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	60fa      	str	r2, [r7, #12]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	0a19      	lsrs	r1, r3, #8
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	60fa      	str	r2, [r7, #12]
 8003f80:	b2ca      	uxtb	r2, r1
 8003f82:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003f88:	e00a      	b.n	8003fa0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	1c53      	adds	r3, r2, #1
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1c59      	adds	r1, r3, #1
 8003f94:	60f9      	str	r1, [r7, #12]
 8003f96:	7812      	ldrb	r2, [r2, #0]
 8003f98:	701a      	strb	r2, [r3, #0]
    n++;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d3f0      	bcc.n	8003f8a <_EncodeStr+0x6e>
  }
  return pPayload;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3304      	adds	r3, #4
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fd6:	4b36      	ldr	r3, [pc, #216]	; (80040b0 <_HandleIncomingPacket+0xe0>)
 8003fd8:	7e1b      	ldrb	r3, [r3, #24]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	1cfb      	adds	r3, r7, #3
 8003fde:	2201      	movs	r2, #1
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f7ff fdab 	bl	8003b3c <SEGGER_RTT_ReadNoLock>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	dd54      	ble.n	800409a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	d032      	beq.n	800405c <_HandleIncomingPacket+0x8c>
 8003ff6:	2b80      	cmp	r3, #128	; 0x80
 8003ff8:	dc42      	bgt.n	8004080 <_HandleIncomingPacket+0xb0>
 8003ffa:	2b07      	cmp	r3, #7
 8003ffc:	dc16      	bgt.n	800402c <_HandleIncomingPacket+0x5c>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	dd3e      	ble.n	8004080 <_HandleIncomingPacket+0xb0>
 8004002:	3b01      	subs	r3, #1
 8004004:	2b06      	cmp	r3, #6
 8004006:	d83b      	bhi.n	8004080 <_HandleIncomingPacket+0xb0>
 8004008:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <_HandleIncomingPacket+0x40>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004033 	.word	0x08004033
 8004014:	08004039 	.word	0x08004039
 8004018:	0800403f 	.word	0x0800403f
 800401c:	08004045 	.word	0x08004045
 8004020:	0800404b 	.word	0x0800404b
 8004024:	08004051 	.word	0x08004051
 8004028:	08004057 	.word	0x08004057
 800402c:	2b7f      	cmp	r3, #127	; 0x7f
 800402e:	d036      	beq.n	800409e <_HandleIncomingPacket+0xce>
 8004030:	e026      	b.n	8004080 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004032:	f000 fa9f 	bl	8004574 <SEGGER_SYSVIEW_Start>
      break;
 8004036:	e037      	b.n	80040a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004038:	f000 fb56 	bl	80046e8 <SEGGER_SYSVIEW_Stop>
      break;
 800403c:	e034      	b.n	80040a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800403e:	f000 fd2f 	bl	8004aa0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004042:	e031      	b.n	80040a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004044:	f000 fcf4 	bl	8004a30 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004048:	e02e      	b.n	80040a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800404a:	f000 fb73 	bl	8004734 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800404e:	e02b      	b.n	80040a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004050:	f000 ff52 	bl	8004ef8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004054:	e028      	b.n	80040a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004056:	f000 ff31 	bl	8004ebc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800405a:	e025      	b.n	80040a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <_HandleIncomingPacket+0xe0>)
 800405e:	7e1b      	ldrb	r3, [r3, #24]
 8004060:	4618      	mov	r0, r3
 8004062:	1cfb      	adds	r3, r7, #3
 8004064:	2201      	movs	r2, #1
 8004066:	4619      	mov	r1, r3
 8004068:	f7ff fd68 	bl	8003b3c <SEGGER_RTT_ReadNoLock>
 800406c:	4603      	mov	r3, r0
 800406e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	dd15      	ble.n	80040a2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fe9f 	bl	8004dbc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800407e:	e010      	b.n	80040a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	b25b      	sxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	da0e      	bge.n	80040a6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <_HandleIncomingPacket+0xe0>)
 800408a:	7e1b      	ldrb	r3, [r3, #24]
 800408c:	4618      	mov	r0, r3
 800408e:	1cfb      	adds	r3, r7, #3
 8004090:	2201      	movs	r2, #1
 8004092:	4619      	mov	r1, r3
 8004094:	f7ff fd52 	bl	8003b3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004098:	e005      	b.n	80040a6 <_HandleIncomingPacket+0xd6>
    }
  }
 800409a:	bf00      	nop
 800409c:	e004      	b.n	80040a8 <_HandleIncomingPacket+0xd8>
      break;
 800409e:	bf00      	nop
 80040a0:	e002      	b.n	80040a8 <_HandleIncomingPacket+0xd8>
      break;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <_HandleIncomingPacket+0xd8>
      break;
 80040a6:	bf00      	nop
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	2001427c 	.word	0x2001427c

080040b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08c      	sub	sp, #48	; 0x30
 80040b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80040ba:	2301      	movs	r3, #1
 80040bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	3301      	adds	r3, #1
 80040c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c8:	4b31      	ldr	r3, [pc, #196]	; (8004190 <_TrySendOverflowPacket+0xdc>)
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ce:	e00b      	b.n	80040e8 <_TrySendOverflowPacket+0x34>
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	1c59      	adds	r1, r3, #1
 80040d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	09db      	lsrs	r3, r3, #7
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	2b7f      	cmp	r3, #127	; 0x7f
 80040ec:	d8f0      	bhi.n	80040d0 <_TrySendOverflowPacket+0x1c>
 80040ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80040fe:	4b25      	ldr	r3, [pc, #148]	; (8004194 <_TrySendOverflowPacket+0xe0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004104:	4b22      	ldr	r3, [pc, #136]	; (8004190 <_TrySendOverflowPacket+0xdc>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	623b      	str	r3, [r7, #32]
 8004116:	e00b      	b.n	8004130 <_TrySendOverflowPacket+0x7c>
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	6279      	str	r1, [r7, #36]	; 0x24
 8004122:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	09db      	lsrs	r3, r3, #7
 800412e:	623b      	str	r3, [r7, #32]
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	2b7f      	cmp	r3, #127	; 0x7f
 8004134:	d8f0      	bhi.n	8004118 <_TrySendOverflowPacket+0x64>
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	627a      	str	r2, [r7, #36]	; 0x24
 800413c:	6a3a      	ldr	r2, [r7, #32]
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <_TrySendOverflowPacket+0xdc>)
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	4618      	mov	r0, r3
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	461a      	mov	r2, r3
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	4619      	mov	r1, r3
 8004158:	f7fc f85a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800415c:	4603      	mov	r3, r0
 800415e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <_TrySendOverflowPacket+0xdc>)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <_TrySendOverflowPacket+0xdc>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	3b01      	subs	r3, #1
 8004172:	b2da      	uxtb	r2, r3
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <_TrySendOverflowPacket+0xdc>)
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e004      	b.n	8004184 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <_TrySendOverflowPacket+0xdc>)
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	3301      	adds	r3, #1
 8004180:	4a03      	ldr	r2, [pc, #12]	; (8004190 <_TrySendOverflowPacket+0xdc>)
 8004182:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004184:	693b      	ldr	r3, [r7, #16]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3730      	adds	r7, #48	; 0x30
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	2001427c 	.word	0x2001427c
 8004194:	e0001004 	.word	0xe0001004

08004198 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80041a4:	4b6c      	ldr	r3, [pc, #432]	; (8004358 <_SendPacket+0x1c0>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d010      	beq.n	80041ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80041ac:	4b6a      	ldr	r3, [pc, #424]	; (8004358 <_SendPacket+0x1c0>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a3 	beq.w	80042fc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80041b6:	4b68      	ldr	r3, [pc, #416]	; (8004358 <_SendPacket+0x1c0>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d109      	bne.n	80041d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80041be:	f7ff ff79 	bl	80040b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80041c2:	4b65      	ldr	r3, [pc, #404]	; (8004358 <_SendPacket+0x1c0>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	f040 809a 	bne.w	8004300 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80041cc:	e001      	b.n	80041d2 <_SendPacket+0x3a>
    goto Send;
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <_SendPacket+0x3c>
Send:
 80041d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b1f      	cmp	r3, #31
 80041d8:	d809      	bhi.n	80041ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80041da:	4b5f      	ldr	r3, [pc, #380]	; (8004358 <_SendPacket+0x1c0>)
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 808b 	bne.w	8004304 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b17      	cmp	r3, #23
 80041f2:	d807      	bhi.n	8004204 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e03d      	b.n	8004280 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b7f      	cmp	r3, #127	; 0x7f
 8004210:	d912      	bls.n	8004238 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	09da      	lsrs	r2, r3, #7
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3b01      	subs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	3a01      	subs	r2, #1
 800422a:	60fa      	str	r2, [r7, #12]
 800422c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e006      	b.n	8004246 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3b01      	subs	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b7f      	cmp	r3, #127	; 0x7f
 800424a:	d912      	bls.n	8004272 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	09da      	lsrs	r2, r3, #7
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3b01      	subs	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	3a01      	subs	r2, #1
 8004264:	60fa      	str	r2, [r7, #12]
 8004266:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e006      	b.n	8004280 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3b01      	subs	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	b2da      	uxtb	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004280:	4b36      	ldr	r3, [pc, #216]	; (800435c <_SendPacket+0x1c4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004286:	4b34      	ldr	r3, [pc, #208]	; (8004358 <_SendPacket+0x1c0>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	e00b      	b.n	80042b2 <_SendPacket+0x11a>
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	1c59      	adds	r1, r3, #1
 80042a2:	6279      	str	r1, [r7, #36]	; 0x24
 80042a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	09db      	lsrs	r3, r3, #7
 80042b0:	623b      	str	r3, [r7, #32]
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	2b7f      	cmp	r3, #127	; 0x7f
 80042b6:	d8f0      	bhi.n	800429a <_SendPacket+0x102>
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	627a      	str	r2, [r7, #36]	; 0x24
 80042be:	6a3a      	ldr	r2, [r7, #32]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80042c8:	4b23      	ldr	r3, [pc, #140]	; (8004358 <_SendPacket+0x1c0>)
 80042ca:	785b      	ldrb	r3, [r3, #1]
 80042cc:	4618      	mov	r0, r3
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	f7fb ff9a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80042dc:	4603      	mov	r3, r0
 80042de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80042e6:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <_SendPacket+0x1c0>)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	60d3      	str	r3, [r2, #12]
 80042ec:	e00b      	b.n	8004306 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80042ee:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <_SendPacket+0x1c0>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <_SendPacket+0x1c0>)
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e004      	b.n	8004306 <_SendPacket+0x16e>
    goto SendDone;
 80042fc:	bf00      	nop
 80042fe:	e002      	b.n	8004306 <_SendPacket+0x16e>
      goto SendDone;
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <_SendPacket+0x16e>
      goto SendDone;
 8004304:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004306:	4b14      	ldr	r3, [pc, #80]	; (8004358 <_SendPacket+0x1c0>)
 8004308:	7e1b      	ldrb	r3, [r3, #24]
 800430a:	4619      	mov	r1, r3
 800430c:	4a14      	ldr	r2, [pc, #80]	; (8004360 <_SendPacket+0x1c8>)
 800430e:	460b      	mov	r3, r1
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	440b      	add	r3, r1
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	336c      	adds	r3, #108	; 0x6c
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <_SendPacket+0x1c0>)
 800431e:	7e1b      	ldrb	r3, [r3, #24]
 8004320:	4618      	mov	r0, r3
 8004322:	490f      	ldr	r1, [pc, #60]	; (8004360 <_SendPacket+0x1c8>)
 8004324:	4603      	mov	r3, r0
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4403      	add	r3, r0
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	3370      	adds	r3, #112	; 0x70
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d00b      	beq.n	800434e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <_SendPacket+0x1c0>)
 8004338:	789b      	ldrb	r3, [r3, #2]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d107      	bne.n	800434e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <_SendPacket+0x1c0>)
 8004340:	2201      	movs	r2, #1
 8004342:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004344:	f7ff fe44 	bl	8003fd0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <_SendPacket+0x1c0>)
 800434a:	2200      	movs	r2, #0
 800434c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800434e:	bf00      	nop
 8004350:	3728      	adds	r7, #40	; 0x28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	2001427c 	.word	0x2001427c
 800435c:	e0001004 	.word	0xe0001004
 8004360:	200143e8 	.word	0x200143e8

08004364 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004372:	2300      	movs	r3, #0
 8004374:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004378:	4917      	ldr	r1, [pc, #92]	; (80043d8 <SEGGER_SYSVIEW_Init+0x74>)
 800437a:	4818      	ldr	r0, [pc, #96]	; (80043dc <SEGGER_SYSVIEW_Init+0x78>)
 800437c:	f7ff fcda 	bl	8003d34 <SEGGER_RTT_AllocUpBuffer>
 8004380:	4603      	mov	r3, r0
 8004382:	b2da      	uxtb	r2, r3
 8004384:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004386:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 800438a:	785a      	ldrb	r2, [r3, #1]
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 800438e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004392:	7e1b      	ldrb	r3, [r3, #24]
 8004394:	4618      	mov	r0, r3
 8004396:	2300      	movs	r3, #0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	2308      	movs	r3, #8
 800439c:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <SEGGER_SYSVIEW_Init+0x80>)
 800439e:	490f      	ldr	r1, [pc, #60]	; (80043dc <SEGGER_SYSVIEW_Init+0x78>)
 80043a0:	f7ff fd4c 	bl	8003e3c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <SEGGER_SYSVIEW_Init+0x84>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a0c      	ldr	r2, [pc, #48]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80043b0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80043b2:	4a0b      	ldr	r2, [pc, #44]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80043be:	4a08      	ldr	r2, [pc, #32]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80043c4:	4a06      	ldr	r2, [pc, #24]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20013274 	.word	0x20013274
 80043dc:	080060a4 	.word	0x080060a4
 80043e0:	2001427c 	.word	0x2001427c
 80043e4:	20014274 	.word	0x20014274
 80043e8:	e0001004 	.word	0xe0001004

080043ec <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6113      	str	r3, [r2, #16]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	2001427c 	.word	0x2001427c

0800440c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004414:	f3ef 8311 	mrs	r3, BASEPRI
 8004418:	f04f 0120 	mov.w	r1, #32
 800441c:	f381 8811 	msr	BASEPRI, r1
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	4808      	ldr	r0, [pc, #32]	; (8004444 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004424:	f7ff fdc7 	bl	8003fb6 <_PreparePacket>
 8004428:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f7ff feb2 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f383 8811 	msr	BASEPRI, r3
}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200142ac 	.word	0x200142ac

08004448 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004452:	f3ef 8311 	mrs	r3, BASEPRI
 8004456:	f04f 0120 	mov.w	r1, #32
 800445a:	f381 8811 	msr	BASEPRI, r1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	4816      	ldr	r0, [pc, #88]	; (80044bc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004462:	f7ff fda8 	bl	8003fb6 <_PreparePacket>
 8004466:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	e00b      	b.n	800448e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	1c59      	adds	r1, r3, #1
 800447e:	61f9      	str	r1, [r7, #28]
 8004480:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	09db      	lsrs	r3, r3, #7
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b7f      	cmp	r3, #127	; 0x7f
 8004492:	d8f0      	bhi.n	8004476 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	61fa      	str	r2, [r7, #28]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68f9      	ldr	r1, [r7, #12]
 80044a8:	6938      	ldr	r0, [r7, #16]
 80044aa:	f7ff fe75 	bl	8004198 <_SendPacket>
  RECORD_END();
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f383 8811 	msr	BASEPRI, r3
}
 80044b4:	bf00      	nop
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	200142ac 	.word	0x200142ac

080044c0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80044cc:	f3ef 8311 	mrs	r3, BASEPRI
 80044d0:	f04f 0120 	mov.w	r1, #32
 80044d4:	f381 8811 	msr	BASEPRI, r1
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	4825      	ldr	r0, [pc, #148]	; (8004570 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80044dc:	f7ff fd6b 	bl	8003fb6 <_PreparePacket>
 80044e0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ee:	e00b      	b.n	8004508 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	1c59      	adds	r1, r3, #1
 80044f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	09db      	lsrs	r3, r3, #7
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	2b7f      	cmp	r3, #127	; 0x7f
 800450c:	d8f0      	bhi.n	80044f0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	e00b      	b.n	8004540 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	1c59      	adds	r1, r3, #1
 8004530:	6279      	str	r1, [r7, #36]	; 0x24
 8004532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	09db      	lsrs	r3, r3, #7
 800453e:	623b      	str	r3, [r7, #32]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	2b7f      	cmp	r3, #127	; 0x7f
 8004544:	d8f0      	bhi.n	8004528 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	627a      	str	r2, [r7, #36]	; 0x24
 800454c:	6a3a      	ldr	r2, [r7, #32]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	6979      	ldr	r1, [r7, #20]
 800455a:	69b8      	ldr	r0, [r7, #24]
 800455c:	f7ff fe1c 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f383 8811 	msr	BASEPRI, r3
}
 8004566:	bf00      	nop
 8004568:	3730      	adds	r7, #48	; 0x30
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	200142ac 	.word	0x200142ac

08004574 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b08c      	sub	sp, #48	; 0x30
 8004578:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800457a:	4b58      	ldr	r3, [pc, #352]	; (80046dc <SEGGER_SYSVIEW_Start+0x168>)
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004580:	f3ef 8311 	mrs	r3, BASEPRI
 8004584:	f04f 0120 	mov.w	r1, #32
 8004588:	f381 8811 	msr	BASEPRI, r1
 800458c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800458e:	4b53      	ldr	r3, [pc, #332]	; (80046dc <SEGGER_SYSVIEW_Start+0x168>)
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	220a      	movs	r2, #10
 8004594:	4952      	ldr	r1, [pc, #328]	; (80046e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004596:	4618      	mov	r0, r3
 8004598:	f7fb fe3a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80045a2:	200a      	movs	r0, #10
 80045a4:	f7ff ff32 	bl	800440c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80045a8:	f3ef 8311 	mrs	r3, BASEPRI
 80045ac:	f04f 0120 	mov.w	r1, #32
 80045b0:	f381 8811 	msr	BASEPRI, r1
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	484b      	ldr	r0, [pc, #300]	; (80046e4 <SEGGER_SYSVIEW_Start+0x170>)
 80045b8:	f7ff fcfd 	bl	8003fb6 <_PreparePacket>
 80045bc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c6:	4b45      	ldr	r3, [pc, #276]	; (80046dc <SEGGER_SYSVIEW_Start+0x168>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80045cc:	e00b      	b.n	80045e6 <SEGGER_SYSVIEW_Start+0x72>
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	1c59      	adds	r1, r3, #1
 80045d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	09db      	lsrs	r3, r3, #7
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	2b7f      	cmp	r3, #127	; 0x7f
 80045ea:	d8f0      	bhi.n	80045ce <SEGGER_SYSVIEW_Start+0x5a>
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004600:	4b36      	ldr	r3, [pc, #216]	; (80046dc <SEGGER_SYSVIEW_Start+0x168>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	e00b      	b.n	8004620 <SEGGER_SYSVIEW_Start+0xac>
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	6279      	str	r1, [r7, #36]	; 0x24
 8004612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	09db      	lsrs	r3, r3, #7
 800461e:	623b      	str	r3, [r7, #32]
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	2b7f      	cmp	r3, #127	; 0x7f
 8004624:	d8f0      	bhi.n	8004608 <SEGGER_SYSVIEW_Start+0x94>
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	627a      	str	r2, [r7, #36]	; 0x24
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	4b28      	ldr	r3, [pc, #160]	; (80046dc <SEGGER_SYSVIEW_Start+0x168>)
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e00b      	b.n	800465a <SEGGER_SYSVIEW_Start+0xe6>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	1c59      	adds	r1, r3, #1
 800464a:	61f9      	str	r1, [r7, #28]
 800464c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	09db      	lsrs	r3, r3, #7
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b7f      	cmp	r3, #127	; 0x7f
 800465e:	d8f0      	bhi.n	8004642 <SEGGER_SYSVIEW_Start+0xce>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	61fa      	str	r2, [r7, #28]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	2300      	movs	r3, #0
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	e00b      	b.n	8004692 <SEGGER_SYSVIEW_Start+0x11e>
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1c59      	adds	r1, r3, #1
 8004682:	6179      	str	r1, [r7, #20]
 8004684:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	09db      	lsrs	r3, r3, #7
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b7f      	cmp	r3, #127	; 0x7f
 8004696:	d8f0      	bhi.n	800467a <SEGGER_SYSVIEW_Start+0x106>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	617a      	str	r2, [r7, #20]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80046a8:	2218      	movs	r2, #24
 80046aa:	6839      	ldr	r1, [r7, #0]
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fd73 	bl	8004198 <_SendPacket>
      RECORD_END();
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80046b8:	4b08      	ldr	r3, [pc, #32]	; (80046dc <SEGGER_SYSVIEW_Start+0x168>)
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <SEGGER_SYSVIEW_Start+0x168>)
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80046c6:	f000 f9eb 	bl	8004aa0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80046ca:	f000 f9b1 	bl	8004a30 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80046ce:	f000 fc13 	bl	8004ef8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80046d2:	bf00      	nop
 80046d4:	3730      	adds	r7, #48	; 0x30
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	2001427c 	.word	0x2001427c
 80046e0:	080060cc 	.word	0x080060cc
 80046e4:	200142ac 	.word	0x200142ac

080046e8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80046ee:	f3ef 8311 	mrs	r3, BASEPRI
 80046f2:	f04f 0120 	mov.w	r1, #32
 80046f6:	f381 8811 	msr	BASEPRI, r1
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	480b      	ldr	r0, [pc, #44]	; (800472c <SEGGER_SYSVIEW_Stop+0x44>)
 80046fe:	f7ff fc5a 	bl	8003fb6 <_PreparePacket>
 8004702:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <SEGGER_SYSVIEW_Stop+0x48>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800470c:	220b      	movs	r2, #11
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	6838      	ldr	r0, [r7, #0]
 8004712:	f7ff fd41 	bl	8004198 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <SEGGER_SYSVIEW_Stop+0x48>)
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f383 8811 	msr	BASEPRI, r3
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200142ac 	.word	0x200142ac
 8004730:	2001427c 	.word	0x2001427c

08004734 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b08c      	sub	sp, #48	; 0x30
 8004738:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800473a:	f3ef 8311 	mrs	r3, BASEPRI
 800473e:	f04f 0120 	mov.w	r1, #32
 8004742:	f381 8811 	msr	BASEPRI, r1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	4845      	ldr	r0, [pc, #276]	; (8004860 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800474a:	f7ff fc34 	bl	8003fb6 <_PreparePacket>
 800474e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004758:	4b42      	ldr	r3, [pc, #264]	; (8004864 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
 800475e:	e00b      	b.n	8004778 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	b2da      	uxtb	r2, r3
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	1c59      	adds	r1, r3, #1
 8004768:	62f9      	str	r1, [r7, #44]	; 0x2c
 800476a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	09db      	lsrs	r3, r3, #7
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	2b7f      	cmp	r3, #127	; 0x7f
 800477c:	d8f0      	bhi.n	8004760 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
 8004792:	4b34      	ldr	r3, [pc, #208]	; (8004864 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	e00b      	b.n	80047b2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	1c59      	adds	r1, r3, #1
 80047a2:	6279      	str	r1, [r7, #36]	; 0x24
 80047a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	09db      	lsrs	r3, r3, #7
 80047b0:	623b      	str	r3, [r7, #32]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	2b7f      	cmp	r3, #127	; 0x7f
 80047b6:	d8f0      	bhi.n	800479a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	627a      	str	r2, [r7, #36]	; 0x24
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	61fb      	str	r3, [r7, #28]
 80047cc:	4b25      	ldr	r3, [pc, #148]	; (8004864 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	e00b      	b.n	80047ec <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	1c59      	adds	r1, r3, #1
 80047dc:	61f9      	str	r1, [r7, #28]
 80047de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	09db      	lsrs	r3, r3, #7
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b7f      	cmp	r3, #127	; 0x7f
 80047f0:	d8f0      	bhi.n	80047d4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	61fa      	str	r2, [r7, #28]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	e00b      	b.n	8004824 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	1c59      	adds	r1, r3, #1
 8004814:	6179      	str	r1, [r7, #20]
 8004816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	09db      	lsrs	r3, r3, #7
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b7f      	cmp	r3, #127	; 0x7f
 8004828:	d8f0      	bhi.n	800480c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	617a      	str	r2, [r7, #20]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800483a:	2218      	movs	r2, #24
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	68b8      	ldr	r0, [r7, #8]
 8004840:	f7ff fcaa 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800484a:	4b06      	ldr	r3, [pc, #24]	; (8004864 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004852:	4b04      	ldr	r3, [pc, #16]	; (8004864 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	4798      	blx	r3
  }
}
 8004858:	bf00      	nop
 800485a:	3730      	adds	r7, #48	; 0x30
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	200142ac 	.word	0x200142ac
 8004864:	2001427c 	.word	0x2001427c

08004868 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b092      	sub	sp, #72	; 0x48
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004870:	f3ef 8311 	mrs	r3, BASEPRI
 8004874:	f04f 0120 	mov.w	r1, #32
 8004878:	f381 8811 	msr	BASEPRI, r1
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	486a      	ldr	r0, [pc, #424]	; (8004a28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004880:	f7ff fb99 	bl	8003fb6 <_PreparePacket>
 8004884:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	647b      	str	r3, [r7, #68]	; 0x44
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b66      	ldr	r3, [pc, #408]	; (8004a2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	643b      	str	r3, [r7, #64]	; 0x40
 800489a:	e00b      	b.n	80048b4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800489c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a2:	1c59      	adds	r1, r3, #1
 80048a4:	6479      	str	r1, [r7, #68]	; 0x44
 80048a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b0:	09db      	lsrs	r3, r3, #7
 80048b2:	643b      	str	r3, [r7, #64]	; 0x40
 80048b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b6:	2b7f      	cmp	r3, #127	; 0x7f
 80048b8:	d8f0      	bhi.n	800489c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80048ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	647a      	str	r2, [r7, #68]	; 0x44
 80048c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048d4:	e00b      	b.n	80048ee <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048dc:	1c59      	adds	r1, r3, #1
 80048de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80048e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ea:	09db      	lsrs	r3, r3, #7
 80048ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	2b7f      	cmp	r3, #127	; 0x7f
 80048f2:	d8f0      	bhi.n	80048d6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80048f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004902:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	4619      	mov	r1, r3
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff fb05 	bl	8003f1c <_EncodeStr>
 8004912:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004914:	2209      	movs	r2, #9
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	6938      	ldr	r0, [r7, #16]
 800491a:	f7ff fc3d 	bl	8004198 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b40      	ldr	r3, [pc, #256]	; (8004a2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	633b      	str	r3, [r7, #48]	; 0x30
 8004932:	e00b      	b.n	800494c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	b2da      	uxtb	r2, r3
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	1c59      	adds	r1, r3, #1
 800493c:	6379      	str	r1, [r7, #52]	; 0x34
 800493e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	09db      	lsrs	r3, r3, #7
 800494a:	633b      	str	r3, [r7, #48]	; 0x30
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	2b7f      	cmp	r3, #127	; 0x7f
 8004950:	d8f0      	bhi.n	8004934 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	637a      	str	r2, [r7, #52]	; 0x34
 8004958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004960:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28
 800496c:	e00b      	b.n	8004986 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	b2da      	uxtb	r2, r3
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	1c59      	adds	r1, r3, #1
 8004976:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004978:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	09db      	lsrs	r3, r3, #7
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	2b7f      	cmp	r3, #127	; 0x7f
 800498a:	d8f0      	bhi.n	800496e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	e00b      	b.n	80049c0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	1c59      	adds	r1, r3, #1
 80049b0:	6279      	str	r1, [r7, #36]	; 0x24
 80049b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	09db      	lsrs	r3, r3, #7
 80049be:	623b      	str	r3, [r7, #32]
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	2b7f      	cmp	r3, #127	; 0x7f
 80049c4:	d8f0      	bhi.n	80049a8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	627a      	str	r2, [r7, #36]	; 0x24
 80049cc:	6a3a      	ldr	r2, [r7, #32]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	2300      	movs	r3, #0
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e00b      	b.n	80049f8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	1c59      	adds	r1, r3, #1
 80049e8:	61f9      	str	r1, [r7, #28]
 80049ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	09db      	lsrs	r3, r3, #7
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b7f      	cmp	r3, #127	; 0x7f
 80049fc:	d8f0      	bhi.n	80049e0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	61fa      	str	r2, [r7, #28]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004a0e:	2215      	movs	r2, #21
 8004a10:	68f9      	ldr	r1, [r7, #12]
 8004a12:	6938      	ldr	r0, [r7, #16]
 8004a14:	f7ff fbc0 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f383 8811 	msr	BASEPRI, r3
}
 8004a1e:	bf00      	nop
 8004a20:	3748      	adds	r7, #72	; 0x48
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	200142ac 	.word	0x200142ac
 8004a2c:	2001427c 	.word	0x2001427c

08004a30 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004a46:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4798      	blx	r3
  }
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2001427c 	.word	0x2001427c

08004a58 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a60:	f3ef 8311 	mrs	r3, BASEPRI
 8004a64:	f04f 0120 	mov.w	r1, #32
 8004a68:	f381 8811 	msr	BASEPRI, r1
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	480b      	ldr	r0, [pc, #44]	; (8004a9c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004a70:	f7ff faa1 	bl	8003fb6 <_PreparePacket>
 8004a74:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	6938      	ldr	r0, [r7, #16]
 8004a7c:	f7ff fa4e 	bl	8003f1c <_EncodeStr>
 8004a80:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004a82:	220e      	movs	r2, #14
 8004a84:	68f9      	ldr	r1, [r7, #12]
 8004a86:	6938      	ldr	r0, [r7, #16]
 8004a88:	f7ff fb86 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f383 8811 	msr	BASEPRI, r3
}
 8004a92:	bf00      	nop
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200142ac 	.word	0x200142ac

08004aa0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004aa6:	4b15      	ldr	r3, [pc, #84]	; (8004afc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01a      	beq.n	8004ae4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004aae:	4b13      	ldr	r3, [pc, #76]	; (8004afc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d015      	beq.n	8004ae4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004ab8:	4b10      	ldr	r3, [pc, #64]	; (8004afc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4798      	blx	r3
 8004ac0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004ac4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004ac6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	000a      	movs	r2, r1
 8004ad4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4621      	mov	r1, r4
 8004adc:	200d      	movs	r0, #13
 8004ade:	f7ff fcef 	bl	80044c0 <SEGGER_SYSVIEW_RecordU32x2>
 8004ae2:	e006      	b.n	8004af2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	200c      	movs	r0, #12
 8004aec:	f7ff fcac 	bl	8004448 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd90      	pop	{r4, r7, pc}
 8004afa:	bf00      	nop
 8004afc:	2001427c 	.word	0x2001427c
 8004b00:	e0001004 	.word	0xe0001004

08004b04 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b0e:	f04f 0120 	mov.w	r1, #32
 8004b12:	f381 8811 	msr	BASEPRI, r1
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	4819      	ldr	r0, [pc, #100]	; (8004b80 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004b1a:	f7ff fa4c 	bl	8003fb6 <_PreparePacket>
 8004b1e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	e00b      	b.n	8004b50 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	6179      	str	r1, [r7, #20]
 8004b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	09db      	lsrs	r3, r3, #7
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b7f      	cmp	r3, #127	; 0x7f
 8004b54:	d8f0      	bhi.n	8004b38 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	617a      	str	r2, [r7, #20]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004b66:	2202      	movs	r2, #2
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	68b8      	ldr	r0, [r7, #8]
 8004b6c:	f7ff fb14 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f383 8811 	msr	BASEPRI, r3
}
 8004b76:	bf00      	nop
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	200142ac 	.word	0x200142ac
 8004b84:	e000ed04 	.word	0xe000ed04

08004b88 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b92:	f04f 0120 	mov.w	r1, #32
 8004b96:	f381 8811 	msr	BASEPRI, r1
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	4807      	ldr	r0, [pc, #28]	; (8004bbc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004b9e:	f7ff fa0a 	bl	8003fb6 <_PreparePacket>
 8004ba2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	6838      	ldr	r0, [r7, #0]
 8004baa:	f7ff faf5 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f383 8811 	msr	BASEPRI, r3
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	200142ac 	.word	0x200142ac

08004bc0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bca:	f04f 0120 	mov.w	r1, #32
 8004bce:	f381 8811 	msr	BASEPRI, r1
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	4807      	ldr	r0, [pc, #28]	; (8004bf4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004bd6:	f7ff f9ee 	bl	8003fb6 <_PreparePacket>
 8004bda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004bdc:	2212      	movs	r2, #18
 8004bde:	6839      	ldr	r1, [r7, #0]
 8004be0:	6838      	ldr	r0, [r7, #0]
 8004be2:	f7ff fad9 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f383 8811 	msr	BASEPRI, r3
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200142ac 	.word	0x200142ac

08004bf8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bfe:	f3ef 8311 	mrs	r3, BASEPRI
 8004c02:	f04f 0120 	mov.w	r1, #32
 8004c06:	f381 8811 	msr	BASEPRI, r1
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	4807      	ldr	r0, [pc, #28]	; (8004c2c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004c0e:	f7ff f9d2 	bl	8003fb6 <_PreparePacket>
 8004c12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004c14:	2211      	movs	r2, #17
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	6838      	ldr	r0, [r7, #0]
 8004c1a:	f7ff fabd 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f383 8811 	msr	BASEPRI, r3
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	200142ac 	.word	0x200142ac

08004c30 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c38:	f3ef 8311 	mrs	r3, BASEPRI
 8004c3c:	f04f 0120 	mov.w	r1, #32
 8004c40:	f381 8811 	msr	BASEPRI, r1
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	4819      	ldr	r0, [pc, #100]	; (8004cac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004c48:	f7ff f9b5 	bl	8003fb6 <_PreparePacket>
 8004c4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c52:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	e00b      	b.n	8004c7e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	1c59      	adds	r1, r3, #1
 8004c6e:	61f9      	str	r1, [r7, #28]
 8004c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	09db      	lsrs	r3, r3, #7
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b7f      	cmp	r3, #127	; 0x7f
 8004c82:	d8f0      	bhi.n	8004c66 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	61fa      	str	r2, [r7, #28]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004c94:	2208      	movs	r2, #8
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	6938      	ldr	r0, [r7, #16]
 8004c9a:	f7ff fa7d 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f383 8811 	msr	BASEPRI, r3
}
 8004ca4:	bf00      	nop
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	200142ac 	.word	0x200142ac
 8004cb0:	2001427c 	.word	0x2001427c

08004cb4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc0:	f04f 0120 	mov.w	r1, #32
 8004cc4:	f381 8811 	msr	BASEPRI, r1
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	4819      	ldr	r0, [pc, #100]	; (8004d30 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004ccc:	f7ff f973 	bl	8003fb6 <_PreparePacket>
 8004cd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	e00b      	b.n	8004d02 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	1c59      	adds	r1, r3, #1
 8004cf2:	61f9      	str	r1, [r7, #28]
 8004cf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	09db      	lsrs	r3, r3, #7
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2b7f      	cmp	r3, #127	; 0x7f
 8004d06:	d8f0      	bhi.n	8004cea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	61fa      	str	r2, [r7, #28]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004d18:	2204      	movs	r2, #4
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	6938      	ldr	r0, [r7, #16]
 8004d1e:	f7ff fa3b 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f383 8811 	msr	BASEPRI, r3
}
 8004d28:	bf00      	nop
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	200142ac 	.word	0x200142ac
 8004d34:	2001427c 	.word	0x2001427c

08004d38 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d40:	f3ef 8311 	mrs	r3, BASEPRI
 8004d44:	f04f 0120 	mov.w	r1, #32
 8004d48:	f381 8811 	msr	BASEPRI, r1
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	4819      	ldr	r0, [pc, #100]	; (8004db4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004d50:	f7ff f931 	bl	8003fb6 <_PreparePacket>
 8004d54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	e00b      	b.n	8004d86 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	1c59      	adds	r1, r3, #1
 8004d76:	61f9      	str	r1, [r7, #28]
 8004d78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	09db      	lsrs	r3, r3, #7
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b7f      	cmp	r3, #127	; 0x7f
 8004d8a:	d8f0      	bhi.n	8004d6e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	61fa      	str	r2, [r7, #28]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004d9c:	2206      	movs	r2, #6
 8004d9e:	68f9      	ldr	r1, [r7, #12]
 8004da0:	6938      	ldr	r0, [r7, #16]
 8004da2:	f7ff f9f9 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f383 8811 	msr	BASEPRI, r3
}
 8004dac:	bf00      	nop
 8004dae:	3720      	adds	r7, #32
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	200142ac 	.word	0x200142ac
 8004db8:	2001427c 	.word	0x2001427c

08004dbc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08c      	sub	sp, #48	; 0x30
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d06d      	beq.n	8004eaa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004dce:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd8:	e008      	b.n	8004dec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	3301      	adds	r3, #1
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d3f2      	bcc.n	8004dda <SEGGER_SYSVIEW_SendModule+0x1e>
 8004df4:	e000      	b.n	8004df8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004df6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d055      	beq.n	8004eaa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8004e02:	f04f 0120 	mov.w	r1, #32
 8004e06:	f381 8811 	msr	BASEPRI, r1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	482a      	ldr	r0, [pc, #168]	; (8004eb8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004e0e:	f7ff f8d2 	bl	8003fb6 <_PreparePacket>
 8004e12:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	623b      	str	r3, [r7, #32]
 8004e20:	e00b      	b.n	8004e3a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	1c59      	adds	r1, r3, #1
 8004e2a:	6279      	str	r1, [r7, #36]	; 0x24
 8004e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	09db      	lsrs	r3, r3, #7
 8004e38:	623b      	str	r3, [r7, #32]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e3e:	d8f0      	bhi.n	8004e22 <SEGGER_SYSVIEW_SendModule+0x66>
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	627a      	str	r2, [r7, #36]	; 0x24
 8004e46:	6a3a      	ldr	r2, [r7, #32]
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e00b      	b.n	8004e74 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	1c59      	adds	r1, r3, #1
 8004e64:	61f9      	str	r1, [r7, #28]
 8004e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	09db      	lsrs	r3, r3, #7
 8004e72:	61bb      	str	r3, [r7, #24]
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2b7f      	cmp	r3, #127	; 0x7f
 8004e78:	d8f0      	bhi.n	8004e5c <SEGGER_SYSVIEW_SendModule+0xa0>
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	61fa      	str	r2, [r7, #28]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2280      	movs	r2, #128	; 0x80
 8004e90:	4619      	mov	r1, r3
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff f842 	bl	8003f1c <_EncodeStr>
 8004e98:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004e9a:	2216      	movs	r2, #22
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	6938      	ldr	r0, [r7, #16]
 8004ea0:	f7ff f97a 	bl	8004198 <_SendPacket>
      RECORD_END();
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004eaa:	bf00      	nop
 8004eac:	3730      	adds	r7, #48	; 0x30
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	200142a4 	.word	0x200142a4
 8004eb8:	200142ac 	.word	0x200142ac

08004ebc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00f      	beq.n	8004eea <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f2      	bne.n	8004ed0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	200142a4 	.word	0x200142a4

08004ef8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004efe:	f3ef 8311 	mrs	r3, BASEPRI
 8004f02:	f04f 0120 	mov.w	r1, #32
 8004f06:	f381 8811 	msr	BASEPRI, r1
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	4817      	ldr	r0, [pc, #92]	; (8004f6c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004f0e:	f7ff f852 	bl	8003fb6 <_PreparePacket>
 8004f12:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e00b      	b.n	8004f3c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	1c59      	adds	r1, r3, #1
 8004f2c:	6179      	str	r1, [r7, #20]
 8004f2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	09db      	lsrs	r3, r3, #7
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f40:	d8f0      	bhi.n	8004f24 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	617a      	str	r2, [r7, #20]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004f52:	221b      	movs	r2, #27
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	68b8      	ldr	r0, [r7, #8]
 8004f58:	f7ff f91e 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f383 8811 	msr	BASEPRI, r3
}
 8004f62:	bf00      	nop
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200142ac 	.word	0x200142ac
 8004f70:	200142a8 	.word	0x200142a8

08004f74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f80:	f04f 0120 	mov.w	r1, #32
 8004f84:	f381 8811 	msr	BASEPRI, r1
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	4827      	ldr	r0, [pc, #156]	; (8005028 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004f8c:	f7ff f813 	bl	8003fb6 <_PreparePacket>
 8004f90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	6938      	ldr	r0, [r7, #16]
 8004f98:	f7fe ffc0 	bl	8003f1c <_EncodeStr>
 8004f9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	e00b      	b.n	8004fc0 <SEGGER_SYSVIEW_Warn+0x4c>
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	1c59      	adds	r1, r3, #1
 8004fb0:	6279      	str	r1, [r7, #36]	; 0x24
 8004fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	09db      	lsrs	r3, r3, #7
 8004fbe:	623b      	str	r3, [r7, #32]
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc4:	d8f0      	bhi.n	8004fa8 <SEGGER_SYSVIEW_Warn+0x34>
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	627a      	str	r2, [r7, #36]	; 0x24
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	e00b      	b.n	8004ff8 <SEGGER_SYSVIEW_Warn+0x84>
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	61f9      	str	r1, [r7, #28]
 8004fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	09db      	lsrs	r3, r3, #7
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8004ffc:	d8f0      	bhi.n	8004fe0 <SEGGER_SYSVIEW_Warn+0x6c>
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	61fa      	str	r2, [r7, #28]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800500e:	221a      	movs	r2, #26
 8005010:	68f9      	ldr	r1, [r7, #12]
 8005012:	6938      	ldr	r0, [r7, #16]
 8005014:	f7ff f8c0 	bl	8004198 <_SendPacket>
  RECORD_END();
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f383 8811 	msr	BASEPRI, r3
}
 800501e:	bf00      	nop
 8005020:	3728      	adds	r7, #40	; 0x28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200142ac 	.word	0x200142ac

0800502c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	2000      	movs	r0, #0
 8005040:	f7fe fe52 	bl	8003ce8 <SEGGER_RTT_Write>
  return len;
 8005044:	683b      	ldr	r3, [r7, #0]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <__libc_init_array>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	4d0d      	ldr	r5, [pc, #52]	; (8005088 <__libc_init_array+0x38>)
 8005054:	4c0d      	ldr	r4, [pc, #52]	; (800508c <__libc_init_array+0x3c>)
 8005056:	1b64      	subs	r4, r4, r5
 8005058:	10a4      	asrs	r4, r4, #2
 800505a:	2600      	movs	r6, #0
 800505c:	42a6      	cmp	r6, r4
 800505e:	d109      	bne.n	8005074 <__libc_init_array+0x24>
 8005060:	4d0b      	ldr	r5, [pc, #44]	; (8005090 <__libc_init_array+0x40>)
 8005062:	4c0c      	ldr	r4, [pc, #48]	; (8005094 <__libc_init_array+0x44>)
 8005064:	f000 ff8e 	bl	8005f84 <_init>
 8005068:	1b64      	subs	r4, r4, r5
 800506a:	10a4      	asrs	r4, r4, #2
 800506c:	2600      	movs	r6, #0
 800506e:	42a6      	cmp	r6, r4
 8005070:	d105      	bne.n	800507e <__libc_init_array+0x2e>
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	f855 3b04 	ldr.w	r3, [r5], #4
 8005078:	4798      	blx	r3
 800507a:	3601      	adds	r6, #1
 800507c:	e7ee      	b.n	800505c <__libc_init_array+0xc>
 800507e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005082:	4798      	blx	r3
 8005084:	3601      	adds	r6, #1
 8005086:	e7f2      	b.n	800506e <__libc_init_array+0x1e>
 8005088:	08006178 	.word	0x08006178
 800508c:	08006178 	.word	0x08006178
 8005090:	08006178 	.word	0x08006178
 8005094:	0800617c 	.word	0x0800617c

08005098 <memcmp>:
 8005098:	b530      	push	{r4, r5, lr}
 800509a:	3901      	subs	r1, #1
 800509c:	2400      	movs	r4, #0
 800509e:	42a2      	cmp	r2, r4
 80050a0:	d101      	bne.n	80050a6 <memcmp+0xe>
 80050a2:	2000      	movs	r0, #0
 80050a4:	e005      	b.n	80050b2 <memcmp+0x1a>
 80050a6:	5d03      	ldrb	r3, [r0, r4]
 80050a8:	3401      	adds	r4, #1
 80050aa:	5d0d      	ldrb	r5, [r1, r4]
 80050ac:	42ab      	cmp	r3, r5
 80050ae:	d0f6      	beq.n	800509e <memcmp+0x6>
 80050b0:	1b58      	subs	r0, r3, r5
 80050b2:	bd30      	pop	{r4, r5, pc}

080050b4 <memcpy>:
 80050b4:	440a      	add	r2, r1
 80050b6:	4291      	cmp	r1, r2
 80050b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050bc:	d100      	bne.n	80050c0 <memcpy+0xc>
 80050be:	4770      	bx	lr
 80050c0:	b510      	push	{r4, lr}
 80050c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ca:	4291      	cmp	r1, r2
 80050cc:	d1f9      	bne.n	80050c2 <memcpy+0xe>
 80050ce:	bd10      	pop	{r4, pc}

080050d0 <memset>:
 80050d0:	4402      	add	r2, r0
 80050d2:	4603      	mov	r3, r0
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d100      	bne.n	80050da <memset+0xa>
 80050d8:	4770      	bx	lr
 80050da:	f803 1b01 	strb.w	r1, [r3], #1
 80050de:	e7f9      	b.n	80050d4 <memset+0x4>

080050e0 <iprintf>:
 80050e0:	b40f      	push	{r0, r1, r2, r3}
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <iprintf+0x2c>)
 80050e4:	b513      	push	{r0, r1, r4, lr}
 80050e6:	681c      	ldr	r4, [r3, #0]
 80050e8:	b124      	cbz	r4, 80050f4 <iprintf+0x14>
 80050ea:	69a3      	ldr	r3, [r4, #24]
 80050ec:	b913      	cbnz	r3, 80050f4 <iprintf+0x14>
 80050ee:	4620      	mov	r0, r4
 80050f0:	f000 f866 	bl	80051c0 <__sinit>
 80050f4:	ab05      	add	r3, sp, #20
 80050f6:	9a04      	ldr	r2, [sp, #16]
 80050f8:	68a1      	ldr	r1, [r4, #8]
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 f983 	bl	8005408 <_vfiprintf_r>
 8005102:	b002      	add	sp, #8
 8005104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005108:	b004      	add	sp, #16
 800510a:	4770      	bx	lr
 800510c:	20000014 	.word	0x20000014

08005110 <std>:
 8005110:	2300      	movs	r3, #0
 8005112:	b510      	push	{r4, lr}
 8005114:	4604      	mov	r4, r0
 8005116:	e9c0 3300 	strd	r3, r3, [r0]
 800511a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800511e:	6083      	str	r3, [r0, #8]
 8005120:	8181      	strh	r1, [r0, #12]
 8005122:	6643      	str	r3, [r0, #100]	; 0x64
 8005124:	81c2      	strh	r2, [r0, #14]
 8005126:	6183      	str	r3, [r0, #24]
 8005128:	4619      	mov	r1, r3
 800512a:	2208      	movs	r2, #8
 800512c:	305c      	adds	r0, #92	; 0x5c
 800512e:	f7ff ffcf 	bl	80050d0 <memset>
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <std+0x38>)
 8005134:	6263      	str	r3, [r4, #36]	; 0x24
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <std+0x3c>)
 8005138:	62a3      	str	r3, [r4, #40]	; 0x28
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <std+0x40>)
 800513c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <std+0x44>)
 8005140:	6224      	str	r4, [r4, #32]
 8005142:	6323      	str	r3, [r4, #48]	; 0x30
 8005144:	bd10      	pop	{r4, pc}
 8005146:	bf00      	nop
 8005148:	080059b1 	.word	0x080059b1
 800514c:	080059d3 	.word	0x080059d3
 8005150:	08005a0b 	.word	0x08005a0b
 8005154:	08005a2f 	.word	0x08005a2f

08005158 <_cleanup_r>:
 8005158:	4901      	ldr	r1, [pc, #4]	; (8005160 <_cleanup_r+0x8>)
 800515a:	f000 b8af 	b.w	80052bc <_fwalk_reent>
 800515e:	bf00      	nop
 8005160:	08005ce5 	.word	0x08005ce5

08005164 <__sfmoreglue>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	1e4a      	subs	r2, r1, #1
 8005168:	2568      	movs	r5, #104	; 0x68
 800516a:	4355      	muls	r5, r2
 800516c:	460e      	mov	r6, r1
 800516e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005172:	f000 f8c5 	bl	8005300 <_malloc_r>
 8005176:	4604      	mov	r4, r0
 8005178:	b140      	cbz	r0, 800518c <__sfmoreglue+0x28>
 800517a:	2100      	movs	r1, #0
 800517c:	e9c0 1600 	strd	r1, r6, [r0]
 8005180:	300c      	adds	r0, #12
 8005182:	60a0      	str	r0, [r4, #8]
 8005184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005188:	f7ff ffa2 	bl	80050d0 <memset>
 800518c:	4620      	mov	r0, r4
 800518e:	bd70      	pop	{r4, r5, r6, pc}

08005190 <__sfp_lock_acquire>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__sfp_lock_acquire+0x8>)
 8005192:	f000 b8b3 	b.w	80052fc <__retarget_lock_acquire_recursive>
 8005196:	bf00      	nop
 8005198:	20014498 	.word	0x20014498

0800519c <__sfp_lock_release>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__sfp_lock_release+0x8>)
 800519e:	f000 b8ae 	b.w	80052fe <__retarget_lock_release_recursive>
 80051a2:	bf00      	nop
 80051a4:	20014498 	.word	0x20014498

080051a8 <__sinit_lock_acquire>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__sinit_lock_acquire+0x8>)
 80051aa:	f000 b8a7 	b.w	80052fc <__retarget_lock_acquire_recursive>
 80051ae:	bf00      	nop
 80051b0:	20014493 	.word	0x20014493

080051b4 <__sinit_lock_release>:
 80051b4:	4801      	ldr	r0, [pc, #4]	; (80051bc <__sinit_lock_release+0x8>)
 80051b6:	f000 b8a2 	b.w	80052fe <__retarget_lock_release_recursive>
 80051ba:	bf00      	nop
 80051bc:	20014493 	.word	0x20014493

080051c0 <__sinit>:
 80051c0:	b510      	push	{r4, lr}
 80051c2:	4604      	mov	r4, r0
 80051c4:	f7ff fff0 	bl	80051a8 <__sinit_lock_acquire>
 80051c8:	69a3      	ldr	r3, [r4, #24]
 80051ca:	b11b      	cbz	r3, 80051d4 <__sinit+0x14>
 80051cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d0:	f7ff bff0 	b.w	80051b4 <__sinit_lock_release>
 80051d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051d8:	6523      	str	r3, [r4, #80]	; 0x50
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <__sinit+0x68>)
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <__sinit+0x6c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80051e2:	42a3      	cmp	r3, r4
 80051e4:	bf04      	itt	eq
 80051e6:	2301      	moveq	r3, #1
 80051e8:	61a3      	streq	r3, [r4, #24]
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 f820 	bl	8005230 <__sfp>
 80051f0:	6060      	str	r0, [r4, #4]
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 f81c 	bl	8005230 <__sfp>
 80051f8:	60a0      	str	r0, [r4, #8]
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f818 	bl	8005230 <__sfp>
 8005200:	2200      	movs	r2, #0
 8005202:	60e0      	str	r0, [r4, #12]
 8005204:	2104      	movs	r1, #4
 8005206:	6860      	ldr	r0, [r4, #4]
 8005208:	f7ff ff82 	bl	8005110 <std>
 800520c:	68a0      	ldr	r0, [r4, #8]
 800520e:	2201      	movs	r2, #1
 8005210:	2109      	movs	r1, #9
 8005212:	f7ff ff7d 	bl	8005110 <std>
 8005216:	68e0      	ldr	r0, [r4, #12]
 8005218:	2202      	movs	r2, #2
 800521a:	2112      	movs	r1, #18
 800521c:	f7ff ff78 	bl	8005110 <std>
 8005220:	2301      	movs	r3, #1
 8005222:	61a3      	str	r3, [r4, #24]
 8005224:	e7d2      	b.n	80051cc <__sinit+0xc>
 8005226:	bf00      	nop
 8005228:	080060d8 	.word	0x080060d8
 800522c:	08005159 	.word	0x08005159

08005230 <__sfp>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	4607      	mov	r7, r0
 8005234:	f7ff ffac 	bl	8005190 <__sfp_lock_acquire>
 8005238:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <__sfp+0x84>)
 800523a:	681e      	ldr	r6, [r3, #0]
 800523c:	69b3      	ldr	r3, [r6, #24]
 800523e:	b913      	cbnz	r3, 8005246 <__sfp+0x16>
 8005240:	4630      	mov	r0, r6
 8005242:	f7ff ffbd 	bl	80051c0 <__sinit>
 8005246:	3648      	adds	r6, #72	; 0x48
 8005248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800524c:	3b01      	subs	r3, #1
 800524e:	d503      	bpl.n	8005258 <__sfp+0x28>
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	b30b      	cbz	r3, 8005298 <__sfp+0x68>
 8005254:	6836      	ldr	r6, [r6, #0]
 8005256:	e7f7      	b.n	8005248 <__sfp+0x18>
 8005258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800525c:	b9d5      	cbnz	r5, 8005294 <__sfp+0x64>
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <__sfp+0x88>)
 8005260:	60e3      	str	r3, [r4, #12]
 8005262:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005266:	6665      	str	r5, [r4, #100]	; 0x64
 8005268:	f000 f847 	bl	80052fa <__retarget_lock_init_recursive>
 800526c:	f7ff ff96 	bl	800519c <__sfp_lock_release>
 8005270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005278:	6025      	str	r5, [r4, #0]
 800527a:	61a5      	str	r5, [r4, #24]
 800527c:	2208      	movs	r2, #8
 800527e:	4629      	mov	r1, r5
 8005280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005284:	f7ff ff24 	bl	80050d0 <memset>
 8005288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800528c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005290:	4620      	mov	r0, r4
 8005292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005294:	3468      	adds	r4, #104	; 0x68
 8005296:	e7d9      	b.n	800524c <__sfp+0x1c>
 8005298:	2104      	movs	r1, #4
 800529a:	4638      	mov	r0, r7
 800529c:	f7ff ff62 	bl	8005164 <__sfmoreglue>
 80052a0:	4604      	mov	r4, r0
 80052a2:	6030      	str	r0, [r6, #0]
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d1d5      	bne.n	8005254 <__sfp+0x24>
 80052a8:	f7ff ff78 	bl	800519c <__sfp_lock_release>
 80052ac:	230c      	movs	r3, #12
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	e7ee      	b.n	8005290 <__sfp+0x60>
 80052b2:	bf00      	nop
 80052b4:	080060d8 	.word	0x080060d8
 80052b8:	ffff0001 	.word	0xffff0001

080052bc <_fwalk_reent>:
 80052bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c0:	4606      	mov	r6, r0
 80052c2:	4688      	mov	r8, r1
 80052c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052c8:	2700      	movs	r7, #0
 80052ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052ce:	f1b9 0901 	subs.w	r9, r9, #1
 80052d2:	d505      	bpl.n	80052e0 <_fwalk_reent+0x24>
 80052d4:	6824      	ldr	r4, [r4, #0]
 80052d6:	2c00      	cmp	r4, #0
 80052d8:	d1f7      	bne.n	80052ca <_fwalk_reent+0xe>
 80052da:	4638      	mov	r0, r7
 80052dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e0:	89ab      	ldrh	r3, [r5, #12]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d907      	bls.n	80052f6 <_fwalk_reent+0x3a>
 80052e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ea:	3301      	adds	r3, #1
 80052ec:	d003      	beq.n	80052f6 <_fwalk_reent+0x3a>
 80052ee:	4629      	mov	r1, r5
 80052f0:	4630      	mov	r0, r6
 80052f2:	47c0      	blx	r8
 80052f4:	4307      	orrs	r7, r0
 80052f6:	3568      	adds	r5, #104	; 0x68
 80052f8:	e7e9      	b.n	80052ce <_fwalk_reent+0x12>

080052fa <__retarget_lock_init_recursive>:
 80052fa:	4770      	bx	lr

080052fc <__retarget_lock_acquire_recursive>:
 80052fc:	4770      	bx	lr

080052fe <__retarget_lock_release_recursive>:
 80052fe:	4770      	bx	lr

08005300 <_malloc_r>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	1ccd      	adds	r5, r1, #3
 8005304:	f025 0503 	bic.w	r5, r5, #3
 8005308:	3508      	adds	r5, #8
 800530a:	2d0c      	cmp	r5, #12
 800530c:	bf38      	it	cc
 800530e:	250c      	movcc	r5, #12
 8005310:	2d00      	cmp	r5, #0
 8005312:	4606      	mov	r6, r0
 8005314:	db01      	blt.n	800531a <_malloc_r+0x1a>
 8005316:	42a9      	cmp	r1, r5
 8005318:	d903      	bls.n	8005322 <_malloc_r+0x22>
 800531a:	230c      	movs	r3, #12
 800531c:	6033      	str	r3, [r6, #0]
 800531e:	2000      	movs	r0, #0
 8005320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005322:	f000 fd91 	bl	8005e48 <__malloc_lock>
 8005326:	4921      	ldr	r1, [pc, #132]	; (80053ac <_malloc_r+0xac>)
 8005328:	680a      	ldr	r2, [r1, #0]
 800532a:	4614      	mov	r4, r2
 800532c:	b99c      	cbnz	r4, 8005356 <_malloc_r+0x56>
 800532e:	4f20      	ldr	r7, [pc, #128]	; (80053b0 <_malloc_r+0xb0>)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	b923      	cbnz	r3, 800533e <_malloc_r+0x3e>
 8005334:	4621      	mov	r1, r4
 8005336:	4630      	mov	r0, r6
 8005338:	f000 fb2a 	bl	8005990 <_sbrk_r>
 800533c:	6038      	str	r0, [r7, #0]
 800533e:	4629      	mov	r1, r5
 8005340:	4630      	mov	r0, r6
 8005342:	f000 fb25 	bl	8005990 <_sbrk_r>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	d123      	bne.n	8005392 <_malloc_r+0x92>
 800534a:	230c      	movs	r3, #12
 800534c:	6033      	str	r3, [r6, #0]
 800534e:	4630      	mov	r0, r6
 8005350:	f000 fd80 	bl	8005e54 <__malloc_unlock>
 8005354:	e7e3      	b.n	800531e <_malloc_r+0x1e>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	1b5b      	subs	r3, r3, r5
 800535a:	d417      	bmi.n	800538c <_malloc_r+0x8c>
 800535c:	2b0b      	cmp	r3, #11
 800535e:	d903      	bls.n	8005368 <_malloc_r+0x68>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	441c      	add	r4, r3
 8005364:	6025      	str	r5, [r4, #0]
 8005366:	e004      	b.n	8005372 <_malloc_r+0x72>
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	42a2      	cmp	r2, r4
 800536c:	bf0c      	ite	eq
 800536e:	600b      	streq	r3, [r1, #0]
 8005370:	6053      	strne	r3, [r2, #4]
 8005372:	4630      	mov	r0, r6
 8005374:	f000 fd6e 	bl	8005e54 <__malloc_unlock>
 8005378:	f104 000b 	add.w	r0, r4, #11
 800537c:	1d23      	adds	r3, r4, #4
 800537e:	f020 0007 	bic.w	r0, r0, #7
 8005382:	1ac2      	subs	r2, r0, r3
 8005384:	d0cc      	beq.n	8005320 <_malloc_r+0x20>
 8005386:	1a1b      	subs	r3, r3, r0
 8005388:	50a3      	str	r3, [r4, r2]
 800538a:	e7c9      	b.n	8005320 <_malloc_r+0x20>
 800538c:	4622      	mov	r2, r4
 800538e:	6864      	ldr	r4, [r4, #4]
 8005390:	e7cc      	b.n	800532c <_malloc_r+0x2c>
 8005392:	1cc4      	adds	r4, r0, #3
 8005394:	f024 0403 	bic.w	r4, r4, #3
 8005398:	42a0      	cmp	r0, r4
 800539a:	d0e3      	beq.n	8005364 <_malloc_r+0x64>
 800539c:	1a21      	subs	r1, r4, r0
 800539e:	4630      	mov	r0, r6
 80053a0:	f000 faf6 	bl	8005990 <_sbrk_r>
 80053a4:	3001      	adds	r0, #1
 80053a6:	d1dd      	bne.n	8005364 <_malloc_r+0x64>
 80053a8:	e7cf      	b.n	800534a <_malloc_r+0x4a>
 80053aa:	bf00      	nop
 80053ac:	20014390 	.word	0x20014390
 80053b0:	20014394 	.word	0x20014394

080053b4 <__sfputc_r>:
 80053b4:	6893      	ldr	r3, [r2, #8]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	b410      	push	{r4}
 80053bc:	6093      	str	r3, [r2, #8]
 80053be:	da08      	bge.n	80053d2 <__sfputc_r+0x1e>
 80053c0:	6994      	ldr	r4, [r2, #24]
 80053c2:	42a3      	cmp	r3, r4
 80053c4:	db01      	blt.n	80053ca <__sfputc_r+0x16>
 80053c6:	290a      	cmp	r1, #10
 80053c8:	d103      	bne.n	80053d2 <__sfputc_r+0x1e>
 80053ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ce:	f000 bb33 	b.w	8005a38 <__swbuf_r>
 80053d2:	6813      	ldr	r3, [r2, #0]
 80053d4:	1c58      	adds	r0, r3, #1
 80053d6:	6010      	str	r0, [r2, #0]
 80053d8:	7019      	strb	r1, [r3, #0]
 80053da:	4608      	mov	r0, r1
 80053dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <__sfputs_r>:
 80053e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e4:	4606      	mov	r6, r0
 80053e6:	460f      	mov	r7, r1
 80053e8:	4614      	mov	r4, r2
 80053ea:	18d5      	adds	r5, r2, r3
 80053ec:	42ac      	cmp	r4, r5
 80053ee:	d101      	bne.n	80053f4 <__sfputs_r+0x12>
 80053f0:	2000      	movs	r0, #0
 80053f2:	e007      	b.n	8005404 <__sfputs_r+0x22>
 80053f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f8:	463a      	mov	r2, r7
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff ffda 	bl	80053b4 <__sfputc_r>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d1f3      	bne.n	80053ec <__sfputs_r+0xa>
 8005404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005408 <_vfiprintf_r>:
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	460d      	mov	r5, r1
 800540e:	b09d      	sub	sp, #116	; 0x74
 8005410:	4614      	mov	r4, r2
 8005412:	4698      	mov	r8, r3
 8005414:	4606      	mov	r6, r0
 8005416:	b118      	cbz	r0, 8005420 <_vfiprintf_r+0x18>
 8005418:	6983      	ldr	r3, [r0, #24]
 800541a:	b90b      	cbnz	r3, 8005420 <_vfiprintf_r+0x18>
 800541c:	f7ff fed0 	bl	80051c0 <__sinit>
 8005420:	4b89      	ldr	r3, [pc, #548]	; (8005648 <_vfiprintf_r+0x240>)
 8005422:	429d      	cmp	r5, r3
 8005424:	d11b      	bne.n	800545e <_vfiprintf_r+0x56>
 8005426:	6875      	ldr	r5, [r6, #4]
 8005428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800542a:	07d9      	lsls	r1, r3, #31
 800542c:	d405      	bmi.n	800543a <_vfiprintf_r+0x32>
 800542e:	89ab      	ldrh	r3, [r5, #12]
 8005430:	059a      	lsls	r2, r3, #22
 8005432:	d402      	bmi.n	800543a <_vfiprintf_r+0x32>
 8005434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005436:	f7ff ff61 	bl	80052fc <__retarget_lock_acquire_recursive>
 800543a:	89ab      	ldrh	r3, [r5, #12]
 800543c:	071b      	lsls	r3, r3, #28
 800543e:	d501      	bpl.n	8005444 <_vfiprintf_r+0x3c>
 8005440:	692b      	ldr	r3, [r5, #16]
 8005442:	b9eb      	cbnz	r3, 8005480 <_vfiprintf_r+0x78>
 8005444:	4629      	mov	r1, r5
 8005446:	4630      	mov	r0, r6
 8005448:	f000 fb48 	bl	8005adc <__swsetup_r>
 800544c:	b1c0      	cbz	r0, 8005480 <_vfiprintf_r+0x78>
 800544e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005450:	07dc      	lsls	r4, r3, #31
 8005452:	d50e      	bpl.n	8005472 <_vfiprintf_r+0x6a>
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	b01d      	add	sp, #116	; 0x74
 800545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545e:	4b7b      	ldr	r3, [pc, #492]	; (800564c <_vfiprintf_r+0x244>)
 8005460:	429d      	cmp	r5, r3
 8005462:	d101      	bne.n	8005468 <_vfiprintf_r+0x60>
 8005464:	68b5      	ldr	r5, [r6, #8]
 8005466:	e7df      	b.n	8005428 <_vfiprintf_r+0x20>
 8005468:	4b79      	ldr	r3, [pc, #484]	; (8005650 <_vfiprintf_r+0x248>)
 800546a:	429d      	cmp	r5, r3
 800546c:	bf08      	it	eq
 800546e:	68f5      	ldreq	r5, [r6, #12]
 8005470:	e7da      	b.n	8005428 <_vfiprintf_r+0x20>
 8005472:	89ab      	ldrh	r3, [r5, #12]
 8005474:	0598      	lsls	r0, r3, #22
 8005476:	d4ed      	bmi.n	8005454 <_vfiprintf_r+0x4c>
 8005478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800547a:	f7ff ff40 	bl	80052fe <__retarget_lock_release_recursive>
 800547e:	e7e9      	b.n	8005454 <_vfiprintf_r+0x4c>
 8005480:	2300      	movs	r3, #0
 8005482:	9309      	str	r3, [sp, #36]	; 0x24
 8005484:	2320      	movs	r3, #32
 8005486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800548a:	f8cd 800c 	str.w	r8, [sp, #12]
 800548e:	2330      	movs	r3, #48	; 0x30
 8005490:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005654 <_vfiprintf_r+0x24c>
 8005494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005498:	f04f 0901 	mov.w	r9, #1
 800549c:	4623      	mov	r3, r4
 800549e:	469a      	mov	sl, r3
 80054a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054a4:	b10a      	cbz	r2, 80054aa <_vfiprintf_r+0xa2>
 80054a6:	2a25      	cmp	r2, #37	; 0x25
 80054a8:	d1f9      	bne.n	800549e <_vfiprintf_r+0x96>
 80054aa:	ebba 0b04 	subs.w	fp, sl, r4
 80054ae:	d00b      	beq.n	80054c8 <_vfiprintf_r+0xc0>
 80054b0:	465b      	mov	r3, fp
 80054b2:	4622      	mov	r2, r4
 80054b4:	4629      	mov	r1, r5
 80054b6:	4630      	mov	r0, r6
 80054b8:	f7ff ff93 	bl	80053e2 <__sfputs_r>
 80054bc:	3001      	adds	r0, #1
 80054be:	f000 80aa 	beq.w	8005616 <_vfiprintf_r+0x20e>
 80054c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054c4:	445a      	add	r2, fp
 80054c6:	9209      	str	r2, [sp, #36]	; 0x24
 80054c8:	f89a 3000 	ldrb.w	r3, [sl]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a2 	beq.w	8005616 <_vfiprintf_r+0x20e>
 80054d2:	2300      	movs	r3, #0
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295
 80054d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054dc:	f10a 0a01 	add.w	sl, sl, #1
 80054e0:	9304      	str	r3, [sp, #16]
 80054e2:	9307      	str	r3, [sp, #28]
 80054e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054e8:	931a      	str	r3, [sp, #104]	; 0x68
 80054ea:	4654      	mov	r4, sl
 80054ec:	2205      	movs	r2, #5
 80054ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f2:	4858      	ldr	r0, [pc, #352]	; (8005654 <_vfiprintf_r+0x24c>)
 80054f4:	f7fa fedc 	bl	80002b0 <memchr>
 80054f8:	9a04      	ldr	r2, [sp, #16]
 80054fa:	b9d8      	cbnz	r0, 8005534 <_vfiprintf_r+0x12c>
 80054fc:	06d1      	lsls	r1, r2, #27
 80054fe:	bf44      	itt	mi
 8005500:	2320      	movmi	r3, #32
 8005502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005506:	0713      	lsls	r3, r2, #28
 8005508:	bf44      	itt	mi
 800550a:	232b      	movmi	r3, #43	; 0x2b
 800550c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005510:	f89a 3000 	ldrb.w	r3, [sl]
 8005514:	2b2a      	cmp	r3, #42	; 0x2a
 8005516:	d015      	beq.n	8005544 <_vfiprintf_r+0x13c>
 8005518:	9a07      	ldr	r2, [sp, #28]
 800551a:	4654      	mov	r4, sl
 800551c:	2000      	movs	r0, #0
 800551e:	f04f 0c0a 	mov.w	ip, #10
 8005522:	4621      	mov	r1, r4
 8005524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005528:	3b30      	subs	r3, #48	; 0x30
 800552a:	2b09      	cmp	r3, #9
 800552c:	d94e      	bls.n	80055cc <_vfiprintf_r+0x1c4>
 800552e:	b1b0      	cbz	r0, 800555e <_vfiprintf_r+0x156>
 8005530:	9207      	str	r2, [sp, #28]
 8005532:	e014      	b.n	800555e <_vfiprintf_r+0x156>
 8005534:	eba0 0308 	sub.w	r3, r0, r8
 8005538:	fa09 f303 	lsl.w	r3, r9, r3
 800553c:	4313      	orrs	r3, r2
 800553e:	9304      	str	r3, [sp, #16]
 8005540:	46a2      	mov	sl, r4
 8005542:	e7d2      	b.n	80054ea <_vfiprintf_r+0xe2>
 8005544:	9b03      	ldr	r3, [sp, #12]
 8005546:	1d19      	adds	r1, r3, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	9103      	str	r1, [sp, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	bfbb      	ittet	lt
 8005550:	425b      	neglt	r3, r3
 8005552:	f042 0202 	orrlt.w	r2, r2, #2
 8005556:	9307      	strge	r3, [sp, #28]
 8005558:	9307      	strlt	r3, [sp, #28]
 800555a:	bfb8      	it	lt
 800555c:	9204      	strlt	r2, [sp, #16]
 800555e:	7823      	ldrb	r3, [r4, #0]
 8005560:	2b2e      	cmp	r3, #46	; 0x2e
 8005562:	d10c      	bne.n	800557e <_vfiprintf_r+0x176>
 8005564:	7863      	ldrb	r3, [r4, #1]
 8005566:	2b2a      	cmp	r3, #42	; 0x2a
 8005568:	d135      	bne.n	80055d6 <_vfiprintf_r+0x1ce>
 800556a:	9b03      	ldr	r3, [sp, #12]
 800556c:	1d1a      	adds	r2, r3, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	9203      	str	r2, [sp, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	bfb8      	it	lt
 8005576:	f04f 33ff 	movlt.w	r3, #4294967295
 800557a:	3402      	adds	r4, #2
 800557c:	9305      	str	r3, [sp, #20]
 800557e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005664 <_vfiprintf_r+0x25c>
 8005582:	7821      	ldrb	r1, [r4, #0]
 8005584:	2203      	movs	r2, #3
 8005586:	4650      	mov	r0, sl
 8005588:	f7fa fe92 	bl	80002b0 <memchr>
 800558c:	b140      	cbz	r0, 80055a0 <_vfiprintf_r+0x198>
 800558e:	2340      	movs	r3, #64	; 0x40
 8005590:	eba0 000a 	sub.w	r0, r0, sl
 8005594:	fa03 f000 	lsl.w	r0, r3, r0
 8005598:	9b04      	ldr	r3, [sp, #16]
 800559a:	4303      	orrs	r3, r0
 800559c:	3401      	adds	r4, #1
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a4:	482c      	ldr	r0, [pc, #176]	; (8005658 <_vfiprintf_r+0x250>)
 80055a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055aa:	2206      	movs	r2, #6
 80055ac:	f7fa fe80 	bl	80002b0 <memchr>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d03f      	beq.n	8005634 <_vfiprintf_r+0x22c>
 80055b4:	4b29      	ldr	r3, [pc, #164]	; (800565c <_vfiprintf_r+0x254>)
 80055b6:	bb1b      	cbnz	r3, 8005600 <_vfiprintf_r+0x1f8>
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	3307      	adds	r3, #7
 80055bc:	f023 0307 	bic.w	r3, r3, #7
 80055c0:	3308      	adds	r3, #8
 80055c2:	9303      	str	r3, [sp, #12]
 80055c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c6:	443b      	add	r3, r7
 80055c8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ca:	e767      	b.n	800549c <_vfiprintf_r+0x94>
 80055cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d0:	460c      	mov	r4, r1
 80055d2:	2001      	movs	r0, #1
 80055d4:	e7a5      	b.n	8005522 <_vfiprintf_r+0x11a>
 80055d6:	2300      	movs	r3, #0
 80055d8:	3401      	adds	r4, #1
 80055da:	9305      	str	r3, [sp, #20]
 80055dc:	4619      	mov	r1, r3
 80055de:	f04f 0c0a 	mov.w	ip, #10
 80055e2:	4620      	mov	r0, r4
 80055e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055e8:	3a30      	subs	r2, #48	; 0x30
 80055ea:	2a09      	cmp	r2, #9
 80055ec:	d903      	bls.n	80055f6 <_vfiprintf_r+0x1ee>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0c5      	beq.n	800557e <_vfiprintf_r+0x176>
 80055f2:	9105      	str	r1, [sp, #20]
 80055f4:	e7c3      	b.n	800557e <_vfiprintf_r+0x176>
 80055f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80055fa:	4604      	mov	r4, r0
 80055fc:	2301      	movs	r3, #1
 80055fe:	e7f0      	b.n	80055e2 <_vfiprintf_r+0x1da>
 8005600:	ab03      	add	r3, sp, #12
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	462a      	mov	r2, r5
 8005606:	4b16      	ldr	r3, [pc, #88]	; (8005660 <_vfiprintf_r+0x258>)
 8005608:	a904      	add	r1, sp, #16
 800560a:	4630      	mov	r0, r6
 800560c:	f3af 8000 	nop.w
 8005610:	4607      	mov	r7, r0
 8005612:	1c78      	adds	r0, r7, #1
 8005614:	d1d6      	bne.n	80055c4 <_vfiprintf_r+0x1bc>
 8005616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005618:	07d9      	lsls	r1, r3, #31
 800561a:	d405      	bmi.n	8005628 <_vfiprintf_r+0x220>
 800561c:	89ab      	ldrh	r3, [r5, #12]
 800561e:	059a      	lsls	r2, r3, #22
 8005620:	d402      	bmi.n	8005628 <_vfiprintf_r+0x220>
 8005622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005624:	f7ff fe6b 	bl	80052fe <__retarget_lock_release_recursive>
 8005628:	89ab      	ldrh	r3, [r5, #12]
 800562a:	065b      	lsls	r3, r3, #25
 800562c:	f53f af12 	bmi.w	8005454 <_vfiprintf_r+0x4c>
 8005630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005632:	e711      	b.n	8005458 <_vfiprintf_r+0x50>
 8005634:	ab03      	add	r3, sp, #12
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	462a      	mov	r2, r5
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <_vfiprintf_r+0x258>)
 800563c:	a904      	add	r1, sp, #16
 800563e:	4630      	mov	r0, r6
 8005640:	f000 f880 	bl	8005744 <_printf_i>
 8005644:	e7e4      	b.n	8005610 <_vfiprintf_r+0x208>
 8005646:	bf00      	nop
 8005648:	080060fc 	.word	0x080060fc
 800564c:	0800611c 	.word	0x0800611c
 8005650:	080060dc 	.word	0x080060dc
 8005654:	0800613c 	.word	0x0800613c
 8005658:	08006146 	.word	0x08006146
 800565c:	00000000 	.word	0x00000000
 8005660:	080053e3 	.word	0x080053e3
 8005664:	08006142 	.word	0x08006142

08005668 <_printf_common>:
 8005668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800566c:	4616      	mov	r6, r2
 800566e:	4699      	mov	r9, r3
 8005670:	688a      	ldr	r2, [r1, #8]
 8005672:	690b      	ldr	r3, [r1, #16]
 8005674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005678:	4293      	cmp	r3, r2
 800567a:	bfb8      	it	lt
 800567c:	4613      	movlt	r3, r2
 800567e:	6033      	str	r3, [r6, #0]
 8005680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005684:	4607      	mov	r7, r0
 8005686:	460c      	mov	r4, r1
 8005688:	b10a      	cbz	r2, 800568e <_printf_common+0x26>
 800568a:	3301      	adds	r3, #1
 800568c:	6033      	str	r3, [r6, #0]
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	0699      	lsls	r1, r3, #26
 8005692:	bf42      	ittt	mi
 8005694:	6833      	ldrmi	r3, [r6, #0]
 8005696:	3302      	addmi	r3, #2
 8005698:	6033      	strmi	r3, [r6, #0]
 800569a:	6825      	ldr	r5, [r4, #0]
 800569c:	f015 0506 	ands.w	r5, r5, #6
 80056a0:	d106      	bne.n	80056b0 <_printf_common+0x48>
 80056a2:	f104 0a19 	add.w	sl, r4, #25
 80056a6:	68e3      	ldr	r3, [r4, #12]
 80056a8:	6832      	ldr	r2, [r6, #0]
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	42ab      	cmp	r3, r5
 80056ae:	dc26      	bgt.n	80056fe <_printf_common+0x96>
 80056b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056b4:	1e13      	subs	r3, r2, #0
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	bf18      	it	ne
 80056ba:	2301      	movne	r3, #1
 80056bc:	0692      	lsls	r2, r2, #26
 80056be:	d42b      	bmi.n	8005718 <_printf_common+0xb0>
 80056c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056c4:	4649      	mov	r1, r9
 80056c6:	4638      	mov	r0, r7
 80056c8:	47c0      	blx	r8
 80056ca:	3001      	adds	r0, #1
 80056cc:	d01e      	beq.n	800570c <_printf_common+0xa4>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	68e5      	ldr	r5, [r4, #12]
 80056d2:	6832      	ldr	r2, [r6, #0]
 80056d4:	f003 0306 	and.w	r3, r3, #6
 80056d8:	2b04      	cmp	r3, #4
 80056da:	bf08      	it	eq
 80056dc:	1aad      	subeq	r5, r5, r2
 80056de:	68a3      	ldr	r3, [r4, #8]
 80056e0:	6922      	ldr	r2, [r4, #16]
 80056e2:	bf0c      	ite	eq
 80056e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e8:	2500      	movne	r5, #0
 80056ea:	4293      	cmp	r3, r2
 80056ec:	bfc4      	itt	gt
 80056ee:	1a9b      	subgt	r3, r3, r2
 80056f0:	18ed      	addgt	r5, r5, r3
 80056f2:	2600      	movs	r6, #0
 80056f4:	341a      	adds	r4, #26
 80056f6:	42b5      	cmp	r5, r6
 80056f8:	d11a      	bne.n	8005730 <_printf_common+0xc8>
 80056fa:	2000      	movs	r0, #0
 80056fc:	e008      	b.n	8005710 <_printf_common+0xa8>
 80056fe:	2301      	movs	r3, #1
 8005700:	4652      	mov	r2, sl
 8005702:	4649      	mov	r1, r9
 8005704:	4638      	mov	r0, r7
 8005706:	47c0      	blx	r8
 8005708:	3001      	adds	r0, #1
 800570a:	d103      	bne.n	8005714 <_printf_common+0xac>
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005714:	3501      	adds	r5, #1
 8005716:	e7c6      	b.n	80056a6 <_printf_common+0x3e>
 8005718:	18e1      	adds	r1, r4, r3
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	2030      	movs	r0, #48	; 0x30
 800571e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005722:	4422      	add	r2, r4
 8005724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800572c:	3302      	adds	r3, #2
 800572e:	e7c7      	b.n	80056c0 <_printf_common+0x58>
 8005730:	2301      	movs	r3, #1
 8005732:	4622      	mov	r2, r4
 8005734:	4649      	mov	r1, r9
 8005736:	4638      	mov	r0, r7
 8005738:	47c0      	blx	r8
 800573a:	3001      	adds	r0, #1
 800573c:	d0e6      	beq.n	800570c <_printf_common+0xa4>
 800573e:	3601      	adds	r6, #1
 8005740:	e7d9      	b.n	80056f6 <_printf_common+0x8e>
	...

08005744 <_printf_i>:
 8005744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	460c      	mov	r4, r1
 800574a:	4691      	mov	r9, r2
 800574c:	7e27      	ldrb	r7, [r4, #24]
 800574e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005750:	2f78      	cmp	r7, #120	; 0x78
 8005752:	4680      	mov	r8, r0
 8005754:	469a      	mov	sl, r3
 8005756:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800575a:	d807      	bhi.n	800576c <_printf_i+0x28>
 800575c:	2f62      	cmp	r7, #98	; 0x62
 800575e:	d80a      	bhi.n	8005776 <_printf_i+0x32>
 8005760:	2f00      	cmp	r7, #0
 8005762:	f000 80d8 	beq.w	8005916 <_printf_i+0x1d2>
 8005766:	2f58      	cmp	r7, #88	; 0x58
 8005768:	f000 80a3 	beq.w	80058b2 <_printf_i+0x16e>
 800576c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005774:	e03a      	b.n	80057ec <_printf_i+0xa8>
 8005776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800577a:	2b15      	cmp	r3, #21
 800577c:	d8f6      	bhi.n	800576c <_printf_i+0x28>
 800577e:	a001      	add	r0, pc, #4	; (adr r0, 8005784 <_printf_i+0x40>)
 8005780:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005784:	080057dd 	.word	0x080057dd
 8005788:	080057f1 	.word	0x080057f1
 800578c:	0800576d 	.word	0x0800576d
 8005790:	0800576d 	.word	0x0800576d
 8005794:	0800576d 	.word	0x0800576d
 8005798:	0800576d 	.word	0x0800576d
 800579c:	080057f1 	.word	0x080057f1
 80057a0:	0800576d 	.word	0x0800576d
 80057a4:	0800576d 	.word	0x0800576d
 80057a8:	0800576d 	.word	0x0800576d
 80057ac:	0800576d 	.word	0x0800576d
 80057b0:	080058fd 	.word	0x080058fd
 80057b4:	08005821 	.word	0x08005821
 80057b8:	080058df 	.word	0x080058df
 80057bc:	0800576d 	.word	0x0800576d
 80057c0:	0800576d 	.word	0x0800576d
 80057c4:	0800591f 	.word	0x0800591f
 80057c8:	0800576d 	.word	0x0800576d
 80057cc:	08005821 	.word	0x08005821
 80057d0:	0800576d 	.word	0x0800576d
 80057d4:	0800576d 	.word	0x0800576d
 80057d8:	080058e7 	.word	0x080058e7
 80057dc:	680b      	ldr	r3, [r1, #0]
 80057de:	1d1a      	adds	r2, r3, #4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	600a      	str	r2, [r1, #0]
 80057e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0a3      	b.n	8005938 <_printf_i+0x1f4>
 80057f0:	6825      	ldr	r5, [r4, #0]
 80057f2:	6808      	ldr	r0, [r1, #0]
 80057f4:	062e      	lsls	r6, r5, #24
 80057f6:	f100 0304 	add.w	r3, r0, #4
 80057fa:	d50a      	bpl.n	8005812 <_printf_i+0xce>
 80057fc:	6805      	ldr	r5, [r0, #0]
 80057fe:	600b      	str	r3, [r1, #0]
 8005800:	2d00      	cmp	r5, #0
 8005802:	da03      	bge.n	800580c <_printf_i+0xc8>
 8005804:	232d      	movs	r3, #45	; 0x2d
 8005806:	426d      	negs	r5, r5
 8005808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800580c:	485e      	ldr	r0, [pc, #376]	; (8005988 <_printf_i+0x244>)
 800580e:	230a      	movs	r3, #10
 8005810:	e019      	b.n	8005846 <_printf_i+0x102>
 8005812:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005816:	6805      	ldr	r5, [r0, #0]
 8005818:	600b      	str	r3, [r1, #0]
 800581a:	bf18      	it	ne
 800581c:	b22d      	sxthne	r5, r5
 800581e:	e7ef      	b.n	8005800 <_printf_i+0xbc>
 8005820:	680b      	ldr	r3, [r1, #0]
 8005822:	6825      	ldr	r5, [r4, #0]
 8005824:	1d18      	adds	r0, r3, #4
 8005826:	6008      	str	r0, [r1, #0]
 8005828:	0628      	lsls	r0, r5, #24
 800582a:	d501      	bpl.n	8005830 <_printf_i+0xec>
 800582c:	681d      	ldr	r5, [r3, #0]
 800582e:	e002      	b.n	8005836 <_printf_i+0xf2>
 8005830:	0669      	lsls	r1, r5, #25
 8005832:	d5fb      	bpl.n	800582c <_printf_i+0xe8>
 8005834:	881d      	ldrh	r5, [r3, #0]
 8005836:	4854      	ldr	r0, [pc, #336]	; (8005988 <_printf_i+0x244>)
 8005838:	2f6f      	cmp	r7, #111	; 0x6f
 800583a:	bf0c      	ite	eq
 800583c:	2308      	moveq	r3, #8
 800583e:	230a      	movne	r3, #10
 8005840:	2100      	movs	r1, #0
 8005842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005846:	6866      	ldr	r6, [r4, #4]
 8005848:	60a6      	str	r6, [r4, #8]
 800584a:	2e00      	cmp	r6, #0
 800584c:	bfa2      	ittt	ge
 800584e:	6821      	ldrge	r1, [r4, #0]
 8005850:	f021 0104 	bicge.w	r1, r1, #4
 8005854:	6021      	strge	r1, [r4, #0]
 8005856:	b90d      	cbnz	r5, 800585c <_printf_i+0x118>
 8005858:	2e00      	cmp	r6, #0
 800585a:	d04d      	beq.n	80058f8 <_printf_i+0x1b4>
 800585c:	4616      	mov	r6, r2
 800585e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005862:	fb03 5711 	mls	r7, r3, r1, r5
 8005866:	5dc7      	ldrb	r7, [r0, r7]
 8005868:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800586c:	462f      	mov	r7, r5
 800586e:	42bb      	cmp	r3, r7
 8005870:	460d      	mov	r5, r1
 8005872:	d9f4      	bls.n	800585e <_printf_i+0x11a>
 8005874:	2b08      	cmp	r3, #8
 8005876:	d10b      	bne.n	8005890 <_printf_i+0x14c>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	07df      	lsls	r7, r3, #31
 800587c:	d508      	bpl.n	8005890 <_printf_i+0x14c>
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	6861      	ldr	r1, [r4, #4]
 8005882:	4299      	cmp	r1, r3
 8005884:	bfde      	ittt	le
 8005886:	2330      	movle	r3, #48	; 0x30
 8005888:	f806 3c01 	strble.w	r3, [r6, #-1]
 800588c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005890:	1b92      	subs	r2, r2, r6
 8005892:	6122      	str	r2, [r4, #16]
 8005894:	f8cd a000 	str.w	sl, [sp]
 8005898:	464b      	mov	r3, r9
 800589a:	aa03      	add	r2, sp, #12
 800589c:	4621      	mov	r1, r4
 800589e:	4640      	mov	r0, r8
 80058a0:	f7ff fee2 	bl	8005668 <_printf_common>
 80058a4:	3001      	adds	r0, #1
 80058a6:	d14c      	bne.n	8005942 <_printf_i+0x1fe>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	b004      	add	sp, #16
 80058ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b2:	4835      	ldr	r0, [pc, #212]	; (8005988 <_printf_i+0x244>)
 80058b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	680e      	ldr	r6, [r1, #0]
 80058bc:	061f      	lsls	r7, r3, #24
 80058be:	f856 5b04 	ldr.w	r5, [r6], #4
 80058c2:	600e      	str	r6, [r1, #0]
 80058c4:	d514      	bpl.n	80058f0 <_printf_i+0x1ac>
 80058c6:	07d9      	lsls	r1, r3, #31
 80058c8:	bf44      	itt	mi
 80058ca:	f043 0320 	orrmi.w	r3, r3, #32
 80058ce:	6023      	strmi	r3, [r4, #0]
 80058d0:	b91d      	cbnz	r5, 80058da <_printf_i+0x196>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	f023 0320 	bic.w	r3, r3, #32
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	2310      	movs	r3, #16
 80058dc:	e7b0      	b.n	8005840 <_printf_i+0xfc>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	f043 0320 	orr.w	r3, r3, #32
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	2378      	movs	r3, #120	; 0x78
 80058e8:	4828      	ldr	r0, [pc, #160]	; (800598c <_printf_i+0x248>)
 80058ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058ee:	e7e3      	b.n	80058b8 <_printf_i+0x174>
 80058f0:	065e      	lsls	r6, r3, #25
 80058f2:	bf48      	it	mi
 80058f4:	b2ad      	uxthmi	r5, r5
 80058f6:	e7e6      	b.n	80058c6 <_printf_i+0x182>
 80058f8:	4616      	mov	r6, r2
 80058fa:	e7bb      	b.n	8005874 <_printf_i+0x130>
 80058fc:	680b      	ldr	r3, [r1, #0]
 80058fe:	6826      	ldr	r6, [r4, #0]
 8005900:	6960      	ldr	r0, [r4, #20]
 8005902:	1d1d      	adds	r5, r3, #4
 8005904:	600d      	str	r5, [r1, #0]
 8005906:	0635      	lsls	r5, r6, #24
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	d501      	bpl.n	8005910 <_printf_i+0x1cc>
 800590c:	6018      	str	r0, [r3, #0]
 800590e:	e002      	b.n	8005916 <_printf_i+0x1d2>
 8005910:	0671      	lsls	r1, r6, #25
 8005912:	d5fb      	bpl.n	800590c <_printf_i+0x1c8>
 8005914:	8018      	strh	r0, [r3, #0]
 8005916:	2300      	movs	r3, #0
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	4616      	mov	r6, r2
 800591c:	e7ba      	b.n	8005894 <_printf_i+0x150>
 800591e:	680b      	ldr	r3, [r1, #0]
 8005920:	1d1a      	adds	r2, r3, #4
 8005922:	600a      	str	r2, [r1, #0]
 8005924:	681e      	ldr	r6, [r3, #0]
 8005926:	6862      	ldr	r2, [r4, #4]
 8005928:	2100      	movs	r1, #0
 800592a:	4630      	mov	r0, r6
 800592c:	f7fa fcc0 	bl	80002b0 <memchr>
 8005930:	b108      	cbz	r0, 8005936 <_printf_i+0x1f2>
 8005932:	1b80      	subs	r0, r0, r6
 8005934:	6060      	str	r0, [r4, #4]
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	2300      	movs	r3, #0
 800593c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005940:	e7a8      	b.n	8005894 <_printf_i+0x150>
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	4632      	mov	r2, r6
 8005946:	4649      	mov	r1, r9
 8005948:	4640      	mov	r0, r8
 800594a:	47d0      	blx	sl
 800594c:	3001      	adds	r0, #1
 800594e:	d0ab      	beq.n	80058a8 <_printf_i+0x164>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	079b      	lsls	r3, r3, #30
 8005954:	d413      	bmi.n	800597e <_printf_i+0x23a>
 8005956:	68e0      	ldr	r0, [r4, #12]
 8005958:	9b03      	ldr	r3, [sp, #12]
 800595a:	4298      	cmp	r0, r3
 800595c:	bfb8      	it	lt
 800595e:	4618      	movlt	r0, r3
 8005960:	e7a4      	b.n	80058ac <_printf_i+0x168>
 8005962:	2301      	movs	r3, #1
 8005964:	4632      	mov	r2, r6
 8005966:	4649      	mov	r1, r9
 8005968:	4640      	mov	r0, r8
 800596a:	47d0      	blx	sl
 800596c:	3001      	adds	r0, #1
 800596e:	d09b      	beq.n	80058a8 <_printf_i+0x164>
 8005970:	3501      	adds	r5, #1
 8005972:	68e3      	ldr	r3, [r4, #12]
 8005974:	9903      	ldr	r1, [sp, #12]
 8005976:	1a5b      	subs	r3, r3, r1
 8005978:	42ab      	cmp	r3, r5
 800597a:	dcf2      	bgt.n	8005962 <_printf_i+0x21e>
 800597c:	e7eb      	b.n	8005956 <_printf_i+0x212>
 800597e:	2500      	movs	r5, #0
 8005980:	f104 0619 	add.w	r6, r4, #25
 8005984:	e7f5      	b.n	8005972 <_printf_i+0x22e>
 8005986:	bf00      	nop
 8005988:	0800614d 	.word	0x0800614d
 800598c:	0800615e 	.word	0x0800615e

08005990 <_sbrk_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d06      	ldr	r5, [pc, #24]	; (80059ac <_sbrk_r+0x1c>)
 8005994:	2300      	movs	r3, #0
 8005996:	4604      	mov	r4, r0
 8005998:	4608      	mov	r0, r1
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	f000 fae4 	bl	8005f68 <_sbrk>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_sbrk_r+0x1a>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_sbrk_r+0x1a>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	2001449c 	.word	0x2001449c

080059b0 <__sread>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	460c      	mov	r4, r1
 80059b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b8:	f000 faa2 	bl	8005f00 <_read_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	bfab      	itete	ge
 80059c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059c2:	89a3      	ldrhlt	r3, [r4, #12]
 80059c4:	181b      	addge	r3, r3, r0
 80059c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ca:	bfac      	ite	ge
 80059cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80059ce:	81a3      	strhlt	r3, [r4, #12]
 80059d0:	bd10      	pop	{r4, pc}

080059d2 <__swrite>:
 80059d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d6:	461f      	mov	r7, r3
 80059d8:	898b      	ldrh	r3, [r1, #12]
 80059da:	05db      	lsls	r3, r3, #23
 80059dc:	4605      	mov	r5, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	4616      	mov	r6, r2
 80059e2:	d505      	bpl.n	80059f0 <__swrite+0x1e>
 80059e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e8:	2302      	movs	r3, #2
 80059ea:	2200      	movs	r2, #0
 80059ec:	f000 f9b6 	bl	8005d5c <_lseek_r>
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fa:	81a3      	strh	r3, [r4, #12]
 80059fc:	4632      	mov	r2, r6
 80059fe:	463b      	mov	r3, r7
 8005a00:	4628      	mov	r0, r5
 8005a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a06:	f7ff bb11 	b.w	800502c <_write_r>

08005a0a <__sseek>:
 8005a0a:	b510      	push	{r4, lr}
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a12:	f000 f9a3 	bl	8005d5c <_lseek_r>
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	bf15      	itete	ne
 8005a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a26:	81a3      	strheq	r3, [r4, #12]
 8005a28:	bf18      	it	ne
 8005a2a:	81a3      	strhne	r3, [r4, #12]
 8005a2c:	bd10      	pop	{r4, pc}

08005a2e <__sclose>:
 8005a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a32:	f000 b8c1 	b.w	8005bb8 <_close_r>
	...

08005a38 <__swbuf_r>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	460e      	mov	r6, r1
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	4605      	mov	r5, r0
 8005a40:	b118      	cbz	r0, 8005a4a <__swbuf_r+0x12>
 8005a42:	6983      	ldr	r3, [r0, #24]
 8005a44:	b90b      	cbnz	r3, 8005a4a <__swbuf_r+0x12>
 8005a46:	f7ff fbbb 	bl	80051c0 <__sinit>
 8005a4a:	4b21      	ldr	r3, [pc, #132]	; (8005ad0 <__swbuf_r+0x98>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	d12b      	bne.n	8005aa8 <__swbuf_r+0x70>
 8005a50:	686c      	ldr	r4, [r5, #4]
 8005a52:	69a3      	ldr	r3, [r4, #24]
 8005a54:	60a3      	str	r3, [r4, #8]
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	071a      	lsls	r2, r3, #28
 8005a5a:	d52f      	bpl.n	8005abc <__swbuf_r+0x84>
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	b36b      	cbz	r3, 8005abc <__swbuf_r+0x84>
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	1ac0      	subs	r0, r0, r3
 8005a66:	6963      	ldr	r3, [r4, #20]
 8005a68:	b2f6      	uxtb	r6, r6
 8005a6a:	4283      	cmp	r3, r0
 8005a6c:	4637      	mov	r7, r6
 8005a6e:	dc04      	bgt.n	8005a7a <__swbuf_r+0x42>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 f936 	bl	8005ce4 <_fflush_r>
 8005a78:	bb30      	cbnz	r0, 8005ac8 <__swbuf_r+0x90>
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	60a3      	str	r3, [r4, #8]
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	6022      	str	r2, [r4, #0]
 8005a86:	701e      	strb	r6, [r3, #0]
 8005a88:	6963      	ldr	r3, [r4, #20]
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	4283      	cmp	r3, r0
 8005a8e:	d004      	beq.n	8005a9a <__swbuf_r+0x62>
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	07db      	lsls	r3, r3, #31
 8005a94:	d506      	bpl.n	8005aa4 <__swbuf_r+0x6c>
 8005a96:	2e0a      	cmp	r6, #10
 8005a98:	d104      	bne.n	8005aa4 <__swbuf_r+0x6c>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f000 f921 	bl	8005ce4 <_fflush_r>
 8005aa2:	b988      	cbnz	r0, 8005ac8 <__swbuf_r+0x90>
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <__swbuf_r+0x9c>)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d101      	bne.n	8005ab2 <__swbuf_r+0x7a>
 8005aae:	68ac      	ldr	r4, [r5, #8]
 8005ab0:	e7cf      	b.n	8005a52 <__swbuf_r+0x1a>
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <__swbuf_r+0xa0>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	68ec      	ldreq	r4, [r5, #12]
 8005aba:	e7ca      	b.n	8005a52 <__swbuf_r+0x1a>
 8005abc:	4621      	mov	r1, r4
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 f80c 	bl	8005adc <__swsetup_r>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d0cb      	beq.n	8005a60 <__swbuf_r+0x28>
 8005ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8005acc:	e7ea      	b.n	8005aa4 <__swbuf_r+0x6c>
 8005ace:	bf00      	nop
 8005ad0:	080060fc 	.word	0x080060fc
 8005ad4:	0800611c 	.word	0x0800611c
 8005ad8:	080060dc 	.word	0x080060dc

08005adc <__swsetup_r>:
 8005adc:	4b32      	ldr	r3, [pc, #200]	; (8005ba8 <__swsetup_r+0xcc>)
 8005ade:	b570      	push	{r4, r5, r6, lr}
 8005ae0:	681d      	ldr	r5, [r3, #0]
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	b125      	cbz	r5, 8005af2 <__swsetup_r+0x16>
 8005ae8:	69ab      	ldr	r3, [r5, #24]
 8005aea:	b913      	cbnz	r3, 8005af2 <__swsetup_r+0x16>
 8005aec:	4628      	mov	r0, r5
 8005aee:	f7ff fb67 	bl	80051c0 <__sinit>
 8005af2:	4b2e      	ldr	r3, [pc, #184]	; (8005bac <__swsetup_r+0xd0>)
 8005af4:	429c      	cmp	r4, r3
 8005af6:	d10f      	bne.n	8005b18 <__swsetup_r+0x3c>
 8005af8:	686c      	ldr	r4, [r5, #4]
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b00:	0719      	lsls	r1, r3, #28
 8005b02:	d42c      	bmi.n	8005b5e <__swsetup_r+0x82>
 8005b04:	06dd      	lsls	r5, r3, #27
 8005b06:	d411      	bmi.n	8005b2c <__swsetup_r+0x50>
 8005b08:	2309      	movs	r3, #9
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	f04f 30ff 	mov.w	r0, #4294967295
 8005b16:	e03e      	b.n	8005b96 <__swsetup_r+0xba>
 8005b18:	4b25      	ldr	r3, [pc, #148]	; (8005bb0 <__swsetup_r+0xd4>)
 8005b1a:	429c      	cmp	r4, r3
 8005b1c:	d101      	bne.n	8005b22 <__swsetup_r+0x46>
 8005b1e:	68ac      	ldr	r4, [r5, #8]
 8005b20:	e7eb      	b.n	8005afa <__swsetup_r+0x1e>
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <__swsetup_r+0xd8>)
 8005b24:	429c      	cmp	r4, r3
 8005b26:	bf08      	it	eq
 8005b28:	68ec      	ldreq	r4, [r5, #12]
 8005b2a:	e7e6      	b.n	8005afa <__swsetup_r+0x1e>
 8005b2c:	0758      	lsls	r0, r3, #29
 8005b2e:	d512      	bpl.n	8005b56 <__swsetup_r+0x7a>
 8005b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b32:	b141      	cbz	r1, 8005b46 <__swsetup_r+0x6a>
 8005b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	d002      	beq.n	8005b42 <__swsetup_r+0x66>
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f000 f98f 	bl	8005e60 <_free_r>
 8005b42:	2300      	movs	r3, #0
 8005b44:	6363      	str	r3, [r4, #52]	; 0x34
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b4c:	81a3      	strh	r3, [r4, #12]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6063      	str	r3, [r4, #4]
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	f043 0308 	orr.w	r3, r3, #8
 8005b5c:	81a3      	strh	r3, [r4, #12]
 8005b5e:	6923      	ldr	r3, [r4, #16]
 8005b60:	b94b      	cbnz	r3, 8005b76 <__swsetup_r+0x9a>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b6c:	d003      	beq.n	8005b76 <__swsetup_r+0x9a>
 8005b6e:	4621      	mov	r1, r4
 8005b70:	4630      	mov	r0, r6
 8005b72:	f000 f929 	bl	8005dc8 <__smakebuf_r>
 8005b76:	89a0      	ldrh	r0, [r4, #12]
 8005b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b7c:	f010 0301 	ands.w	r3, r0, #1
 8005b80:	d00a      	beq.n	8005b98 <__swsetup_r+0xbc>
 8005b82:	2300      	movs	r3, #0
 8005b84:	60a3      	str	r3, [r4, #8]
 8005b86:	6963      	ldr	r3, [r4, #20]
 8005b88:	425b      	negs	r3, r3
 8005b8a:	61a3      	str	r3, [r4, #24]
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	b943      	cbnz	r3, 8005ba2 <__swsetup_r+0xc6>
 8005b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b94:	d1ba      	bne.n	8005b0c <__swsetup_r+0x30>
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	0781      	lsls	r1, r0, #30
 8005b9a:	bf58      	it	pl
 8005b9c:	6963      	ldrpl	r3, [r4, #20]
 8005b9e:	60a3      	str	r3, [r4, #8]
 8005ba0:	e7f4      	b.n	8005b8c <__swsetup_r+0xb0>
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	e7f7      	b.n	8005b96 <__swsetup_r+0xba>
 8005ba6:	bf00      	nop
 8005ba8:	20000014 	.word	0x20000014
 8005bac:	080060fc 	.word	0x080060fc
 8005bb0:	0800611c 	.word	0x0800611c
 8005bb4:	080060dc 	.word	0x080060dc

08005bb8 <_close_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d06      	ldr	r5, [pc, #24]	; (8005bd4 <_close_r+0x1c>)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	f7fa ff75 	bl	8000ab2 <_close>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_close_r+0x1a>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_close_r+0x1a>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	2001449c 	.word	0x2001449c

08005bd8 <__sflush_r>:
 8005bd8:	898a      	ldrh	r2, [r1, #12]
 8005bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bde:	4605      	mov	r5, r0
 8005be0:	0710      	lsls	r0, r2, #28
 8005be2:	460c      	mov	r4, r1
 8005be4:	d458      	bmi.n	8005c98 <__sflush_r+0xc0>
 8005be6:	684b      	ldr	r3, [r1, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dc05      	bgt.n	8005bf8 <__sflush_r+0x20>
 8005bec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	dc02      	bgt.n	8005bf8 <__sflush_r+0x20>
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bfa:	2e00      	cmp	r6, #0
 8005bfc:	d0f9      	beq.n	8005bf2 <__sflush_r+0x1a>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c04:	682f      	ldr	r7, [r5, #0]
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	d032      	beq.n	8005c70 <__sflush_r+0x98>
 8005c0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	075a      	lsls	r2, r3, #29
 8005c10:	d505      	bpl.n	8005c1e <__sflush_r+0x46>
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	1ac0      	subs	r0, r0, r3
 8005c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c18:	b10b      	cbz	r3, 8005c1e <__sflush_r+0x46>
 8005c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c1c:	1ac0      	subs	r0, r0, r3
 8005c1e:	2300      	movs	r3, #0
 8005c20:	4602      	mov	r2, r0
 8005c22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c24:	6a21      	ldr	r1, [r4, #32]
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b0      	blx	r6
 8005c2a:	1c43      	adds	r3, r0, #1
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	d106      	bne.n	8005c3e <__sflush_r+0x66>
 8005c30:	6829      	ldr	r1, [r5, #0]
 8005c32:	291d      	cmp	r1, #29
 8005c34:	d82c      	bhi.n	8005c90 <__sflush_r+0xb8>
 8005c36:	4a2a      	ldr	r2, [pc, #168]	; (8005ce0 <__sflush_r+0x108>)
 8005c38:	40ca      	lsrs	r2, r1
 8005c3a:	07d6      	lsls	r6, r2, #31
 8005c3c:	d528      	bpl.n	8005c90 <__sflush_r+0xb8>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	6062      	str	r2, [r4, #4]
 8005c42:	04d9      	lsls	r1, r3, #19
 8005c44:	6922      	ldr	r2, [r4, #16]
 8005c46:	6022      	str	r2, [r4, #0]
 8005c48:	d504      	bpl.n	8005c54 <__sflush_r+0x7c>
 8005c4a:	1c42      	adds	r2, r0, #1
 8005c4c:	d101      	bne.n	8005c52 <__sflush_r+0x7a>
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	b903      	cbnz	r3, 8005c54 <__sflush_r+0x7c>
 8005c52:	6560      	str	r0, [r4, #84]	; 0x54
 8005c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c56:	602f      	str	r7, [r5, #0]
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	d0ca      	beq.n	8005bf2 <__sflush_r+0x1a>
 8005c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c60:	4299      	cmp	r1, r3
 8005c62:	d002      	beq.n	8005c6a <__sflush_r+0x92>
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 f8fb 	bl	8005e60 <_free_r>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	6360      	str	r0, [r4, #52]	; 0x34
 8005c6e:	e7c1      	b.n	8005bf4 <__sflush_r+0x1c>
 8005c70:	6a21      	ldr	r1, [r4, #32]
 8005c72:	2301      	movs	r3, #1
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b0      	blx	r6
 8005c78:	1c41      	adds	r1, r0, #1
 8005c7a:	d1c7      	bne.n	8005c0c <__sflush_r+0x34>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0c4      	beq.n	8005c0c <__sflush_r+0x34>
 8005c82:	2b1d      	cmp	r3, #29
 8005c84:	d001      	beq.n	8005c8a <__sflush_r+0xb2>
 8005c86:	2b16      	cmp	r3, #22
 8005c88:	d101      	bne.n	8005c8e <__sflush_r+0xb6>
 8005c8a:	602f      	str	r7, [r5, #0]
 8005c8c:	e7b1      	b.n	8005bf2 <__sflush_r+0x1a>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	e7ad      	b.n	8005bf4 <__sflush_r+0x1c>
 8005c98:	690f      	ldr	r7, [r1, #16]
 8005c9a:	2f00      	cmp	r7, #0
 8005c9c:	d0a9      	beq.n	8005bf2 <__sflush_r+0x1a>
 8005c9e:	0793      	lsls	r3, r2, #30
 8005ca0:	680e      	ldr	r6, [r1, #0]
 8005ca2:	bf08      	it	eq
 8005ca4:	694b      	ldreq	r3, [r1, #20]
 8005ca6:	600f      	str	r7, [r1, #0]
 8005ca8:	bf18      	it	ne
 8005caa:	2300      	movne	r3, #0
 8005cac:	eba6 0807 	sub.w	r8, r6, r7
 8005cb0:	608b      	str	r3, [r1, #8]
 8005cb2:	f1b8 0f00 	cmp.w	r8, #0
 8005cb6:	dd9c      	ble.n	8005bf2 <__sflush_r+0x1a>
 8005cb8:	6a21      	ldr	r1, [r4, #32]
 8005cba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cbc:	4643      	mov	r3, r8
 8005cbe:	463a      	mov	r2, r7
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b0      	blx	r6
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	dc06      	bgt.n	8005cd6 <__sflush_r+0xfe>
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd4:	e78e      	b.n	8005bf4 <__sflush_r+0x1c>
 8005cd6:	4407      	add	r7, r0
 8005cd8:	eba8 0800 	sub.w	r8, r8, r0
 8005cdc:	e7e9      	b.n	8005cb2 <__sflush_r+0xda>
 8005cde:	bf00      	nop
 8005ce0:	20400001 	.word	0x20400001

08005ce4 <_fflush_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	690b      	ldr	r3, [r1, #16]
 8005ce8:	4605      	mov	r5, r0
 8005cea:	460c      	mov	r4, r1
 8005cec:	b913      	cbnz	r3, 8005cf4 <_fflush_r+0x10>
 8005cee:	2500      	movs	r5, #0
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	b118      	cbz	r0, 8005cfe <_fflush_r+0x1a>
 8005cf6:	6983      	ldr	r3, [r0, #24]
 8005cf8:	b90b      	cbnz	r3, 8005cfe <_fflush_r+0x1a>
 8005cfa:	f7ff fa61 	bl	80051c0 <__sinit>
 8005cfe:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <_fflush_r+0x6c>)
 8005d00:	429c      	cmp	r4, r3
 8005d02:	d11b      	bne.n	8005d3c <_fflush_r+0x58>
 8005d04:	686c      	ldr	r4, [r5, #4]
 8005d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0ef      	beq.n	8005cee <_fflush_r+0xa>
 8005d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d10:	07d0      	lsls	r0, r2, #31
 8005d12:	d404      	bmi.n	8005d1e <_fflush_r+0x3a>
 8005d14:	0599      	lsls	r1, r3, #22
 8005d16:	d402      	bmi.n	8005d1e <_fflush_r+0x3a>
 8005d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d1a:	f7ff faef 	bl	80052fc <__retarget_lock_acquire_recursive>
 8005d1e:	4628      	mov	r0, r5
 8005d20:	4621      	mov	r1, r4
 8005d22:	f7ff ff59 	bl	8005bd8 <__sflush_r>
 8005d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d28:	07da      	lsls	r2, r3, #31
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	d4e0      	bmi.n	8005cf0 <_fflush_r+0xc>
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	059b      	lsls	r3, r3, #22
 8005d32:	d4dd      	bmi.n	8005cf0 <_fflush_r+0xc>
 8005d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d36:	f7ff fae2 	bl	80052fe <__retarget_lock_release_recursive>
 8005d3a:	e7d9      	b.n	8005cf0 <_fflush_r+0xc>
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <_fflush_r+0x70>)
 8005d3e:	429c      	cmp	r4, r3
 8005d40:	d101      	bne.n	8005d46 <_fflush_r+0x62>
 8005d42:	68ac      	ldr	r4, [r5, #8]
 8005d44:	e7df      	b.n	8005d06 <_fflush_r+0x22>
 8005d46:	4b04      	ldr	r3, [pc, #16]	; (8005d58 <_fflush_r+0x74>)
 8005d48:	429c      	cmp	r4, r3
 8005d4a:	bf08      	it	eq
 8005d4c:	68ec      	ldreq	r4, [r5, #12]
 8005d4e:	e7da      	b.n	8005d06 <_fflush_r+0x22>
 8005d50:	080060fc 	.word	0x080060fc
 8005d54:	0800611c 	.word	0x0800611c
 8005d58:	080060dc 	.word	0x080060dc

08005d5c <_lseek_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4d07      	ldr	r5, [pc, #28]	; (8005d7c <_lseek_r+0x20>)
 8005d60:	4604      	mov	r4, r0
 8005d62:	4608      	mov	r0, r1
 8005d64:	4611      	mov	r1, r2
 8005d66:	2200      	movs	r2, #0
 8005d68:	602a      	str	r2, [r5, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f7fa fec8 	bl	8000b00 <_lseek>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	d102      	bne.n	8005d7a <_lseek_r+0x1e>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	b103      	cbz	r3, 8005d7a <_lseek_r+0x1e>
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
 8005d7c:	2001449c 	.word	0x2001449c

08005d80 <__swhatbuf_r>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	460e      	mov	r6, r1
 8005d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	b096      	sub	sp, #88	; 0x58
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	461d      	mov	r5, r3
 8005d90:	da07      	bge.n	8005da2 <__swhatbuf_r+0x22>
 8005d92:	2300      	movs	r3, #0
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	89b3      	ldrh	r3, [r6, #12]
 8005d98:	061a      	lsls	r2, r3, #24
 8005d9a:	d410      	bmi.n	8005dbe <__swhatbuf_r+0x3e>
 8005d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005da0:	e00e      	b.n	8005dc0 <__swhatbuf_r+0x40>
 8005da2:	466a      	mov	r2, sp
 8005da4:	f000 f8be 	bl	8005f24 <_fstat_r>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	dbf2      	blt.n	8005d92 <__swhatbuf_r+0x12>
 8005dac:	9a01      	ldr	r2, [sp, #4]
 8005dae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005db2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005db6:	425a      	negs	r2, r3
 8005db8:	415a      	adcs	r2, r3
 8005dba:	602a      	str	r2, [r5, #0]
 8005dbc:	e7ee      	b.n	8005d9c <__swhatbuf_r+0x1c>
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	b016      	add	sp, #88	; 0x58
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}

08005dc8 <__smakebuf_r>:
 8005dc8:	898b      	ldrh	r3, [r1, #12]
 8005dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dcc:	079d      	lsls	r5, r3, #30
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	d507      	bpl.n	8005de4 <__smakebuf_r+0x1c>
 8005dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	6123      	str	r3, [r4, #16]
 8005ddc:	2301      	movs	r3, #1
 8005dde:	6163      	str	r3, [r4, #20]
 8005de0:	b002      	add	sp, #8
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	ab01      	add	r3, sp, #4
 8005de6:	466a      	mov	r2, sp
 8005de8:	f7ff ffca 	bl	8005d80 <__swhatbuf_r>
 8005dec:	9900      	ldr	r1, [sp, #0]
 8005dee:	4605      	mov	r5, r0
 8005df0:	4630      	mov	r0, r6
 8005df2:	f7ff fa85 	bl	8005300 <_malloc_r>
 8005df6:	b948      	cbnz	r0, 8005e0c <__smakebuf_r+0x44>
 8005df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfc:	059a      	lsls	r2, r3, #22
 8005dfe:	d4ef      	bmi.n	8005de0 <__smakebuf_r+0x18>
 8005e00:	f023 0303 	bic.w	r3, r3, #3
 8005e04:	f043 0302 	orr.w	r3, r3, #2
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	e7e3      	b.n	8005dd4 <__smakebuf_r+0xc>
 8005e0c:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <__smakebuf_r+0x7c>)
 8005e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	6020      	str	r0, [r4, #0]
 8005e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e18:	81a3      	strh	r3, [r4, #12]
 8005e1a:	9b00      	ldr	r3, [sp, #0]
 8005e1c:	6163      	str	r3, [r4, #20]
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	6120      	str	r0, [r4, #16]
 8005e22:	b15b      	cbz	r3, 8005e3c <__smakebuf_r+0x74>
 8005e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f000 f88d 	bl	8005f48 <_isatty_r>
 8005e2e:	b128      	cbz	r0, 8005e3c <__smakebuf_r+0x74>
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	81a3      	strh	r3, [r4, #12]
 8005e3c:	89a0      	ldrh	r0, [r4, #12]
 8005e3e:	4305      	orrs	r5, r0
 8005e40:	81a5      	strh	r5, [r4, #12]
 8005e42:	e7cd      	b.n	8005de0 <__smakebuf_r+0x18>
 8005e44:	08005159 	.word	0x08005159

08005e48 <__malloc_lock>:
 8005e48:	4801      	ldr	r0, [pc, #4]	; (8005e50 <__malloc_lock+0x8>)
 8005e4a:	f7ff ba57 	b.w	80052fc <__retarget_lock_acquire_recursive>
 8005e4e:	bf00      	nop
 8005e50:	20014494 	.word	0x20014494

08005e54 <__malloc_unlock>:
 8005e54:	4801      	ldr	r0, [pc, #4]	; (8005e5c <__malloc_unlock+0x8>)
 8005e56:	f7ff ba52 	b.w	80052fe <__retarget_lock_release_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	20014494 	.word	0x20014494

08005e60 <_free_r>:
 8005e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e62:	2900      	cmp	r1, #0
 8005e64:	d048      	beq.n	8005ef8 <_free_r+0x98>
 8005e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6a:	9001      	str	r0, [sp, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e72:	bfb8      	it	lt
 8005e74:	18e4      	addlt	r4, r4, r3
 8005e76:	f7ff ffe7 	bl	8005e48 <__malloc_lock>
 8005e7a:	4a20      	ldr	r2, [pc, #128]	; (8005efc <_free_r+0x9c>)
 8005e7c:	9801      	ldr	r0, [sp, #4]
 8005e7e:	6813      	ldr	r3, [r2, #0]
 8005e80:	4615      	mov	r5, r2
 8005e82:	b933      	cbnz	r3, 8005e92 <_free_r+0x32>
 8005e84:	6063      	str	r3, [r4, #4]
 8005e86:	6014      	str	r4, [r2, #0]
 8005e88:	b003      	add	sp, #12
 8005e8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e8e:	f7ff bfe1 	b.w	8005e54 <__malloc_unlock>
 8005e92:	42a3      	cmp	r3, r4
 8005e94:	d90b      	bls.n	8005eae <_free_r+0x4e>
 8005e96:	6821      	ldr	r1, [r4, #0]
 8005e98:	1862      	adds	r2, r4, r1
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	bf04      	itt	eq
 8005e9e:	681a      	ldreq	r2, [r3, #0]
 8005ea0:	685b      	ldreq	r3, [r3, #4]
 8005ea2:	6063      	str	r3, [r4, #4]
 8005ea4:	bf04      	itt	eq
 8005ea6:	1852      	addeq	r2, r2, r1
 8005ea8:	6022      	streq	r2, [r4, #0]
 8005eaa:	602c      	str	r4, [r5, #0]
 8005eac:	e7ec      	b.n	8005e88 <_free_r+0x28>
 8005eae:	461a      	mov	r2, r3
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	b10b      	cbz	r3, 8005eb8 <_free_r+0x58>
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	d9fa      	bls.n	8005eae <_free_r+0x4e>
 8005eb8:	6811      	ldr	r1, [r2, #0]
 8005eba:	1855      	adds	r5, r2, r1
 8005ebc:	42a5      	cmp	r5, r4
 8005ebe:	d10b      	bne.n	8005ed8 <_free_r+0x78>
 8005ec0:	6824      	ldr	r4, [r4, #0]
 8005ec2:	4421      	add	r1, r4
 8005ec4:	1854      	adds	r4, r2, r1
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	6011      	str	r1, [r2, #0]
 8005eca:	d1dd      	bne.n	8005e88 <_free_r+0x28>
 8005ecc:	681c      	ldr	r4, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	6053      	str	r3, [r2, #4]
 8005ed2:	4421      	add	r1, r4
 8005ed4:	6011      	str	r1, [r2, #0]
 8005ed6:	e7d7      	b.n	8005e88 <_free_r+0x28>
 8005ed8:	d902      	bls.n	8005ee0 <_free_r+0x80>
 8005eda:	230c      	movs	r3, #12
 8005edc:	6003      	str	r3, [r0, #0]
 8005ede:	e7d3      	b.n	8005e88 <_free_r+0x28>
 8005ee0:	6825      	ldr	r5, [r4, #0]
 8005ee2:	1961      	adds	r1, r4, r5
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	bf04      	itt	eq
 8005ee8:	6819      	ldreq	r1, [r3, #0]
 8005eea:	685b      	ldreq	r3, [r3, #4]
 8005eec:	6063      	str	r3, [r4, #4]
 8005eee:	bf04      	itt	eq
 8005ef0:	1949      	addeq	r1, r1, r5
 8005ef2:	6021      	streq	r1, [r4, #0]
 8005ef4:	6054      	str	r4, [r2, #4]
 8005ef6:	e7c7      	b.n	8005e88 <_free_r+0x28>
 8005ef8:	b003      	add	sp, #12
 8005efa:	bd30      	pop	{r4, r5, pc}
 8005efc:	20014390 	.word	0x20014390

08005f00 <_read_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d07      	ldr	r5, [pc, #28]	; (8005f20 <_read_r+0x20>)
 8005f04:	4604      	mov	r4, r0
 8005f06:	4608      	mov	r0, r1
 8005f08:	4611      	mov	r1, r2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	602a      	str	r2, [r5, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f7fa fdb2 	bl	8000a78 <_read>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_read_r+0x1e>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_read_r+0x1e>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	2001449c 	.word	0x2001449c

08005f24 <_fstat_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d07      	ldr	r5, [pc, #28]	; (8005f44 <_fstat_r+0x20>)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	4611      	mov	r1, r2
 8005f30:	602b      	str	r3, [r5, #0]
 8005f32:	f7fa fdca 	bl	8000aca <_fstat>
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	d102      	bne.n	8005f40 <_fstat_r+0x1c>
 8005f3a:	682b      	ldr	r3, [r5, #0]
 8005f3c:	b103      	cbz	r3, 8005f40 <_fstat_r+0x1c>
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	bf00      	nop
 8005f44:	2001449c 	.word	0x2001449c

08005f48 <_isatty_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d06      	ldr	r5, [pc, #24]	; (8005f64 <_isatty_r+0x1c>)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	602b      	str	r3, [r5, #0]
 8005f54:	f7fa fdc9 	bl	8000aea <_isatty>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_isatty_r+0x1a>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_isatty_r+0x1a>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	2001449c 	.word	0x2001449c

08005f68 <_sbrk>:
 8005f68:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <_sbrk+0x14>)
 8005f6a:	6819      	ldr	r1, [r3, #0]
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	b909      	cbnz	r1, 8005f74 <_sbrk+0xc>
 8005f70:	4903      	ldr	r1, [pc, #12]	; (8005f80 <_sbrk+0x18>)
 8005f72:	6019      	str	r1, [r3, #0]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	4402      	add	r2, r0
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	4770      	bx	lr
 8005f7c:	20014398 	.word	0x20014398
 8005f80:	200144a0 	.word	0x200144a0

08005f84 <_init>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr

08005f90 <_fini>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr
