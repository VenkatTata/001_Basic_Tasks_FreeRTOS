
001_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003250  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003420  08003420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800345c  0800345c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003464  08003464  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800346c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  2000000c  08003478  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08003478  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001348c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002469  00000000  00000000  000334c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00035938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00036968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a04  00000000  00000000  00037870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001147d  00000000  00000000  0005a274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daa4f  00000000  00000000  0006b6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004438  00000000  00000000  00146194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003408 	.word	0x08003408

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08003408 	.word	0x08003408

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200005f4 	.word	0x200005f4

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 f9e8 	bl	8000974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f804 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f870 	bl	800068c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x10>
	...

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2234      	movs	r2, #52	; 0x34
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 ff1a 	bl	80033f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <SystemClock_Config+0xd4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a29      	ldr	r2, [pc, #164]	; (8000684 <SystemClock_Config+0xd4>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <SystemClock_Config+0xd4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <SystemClock_Config+0xd8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <SystemClock_Config+0xd8>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <SystemClock_Config+0xd8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000624:	2310      	movs	r3, #16
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000628:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800062c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800062e:	2304      	movs	r3, #4
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000632:	2302      	movs	r3, #2
 8000634:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	4618      	mov	r0, r3
 8000640:	f000 ff54 	bl	80014ec <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800064a:	f000 f8af 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2102      	movs	r1, #2
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fc54 	bl	8000f18 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000676:	f000 f899 	bl	80007ac <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b35      	ldr	r3, [pc, #212]	; (800077c <MX_GPIO_Init+0xf0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a34      	ldr	r2, [pc, #208]	; (800077c <MX_GPIO_Init+0xf0>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b32      	ldr	r3, [pc, #200]	; (800077c <MX_GPIO_Init+0xf0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b2e      	ldr	r3, [pc, #184]	; (800077c <MX_GPIO_Init+0xf0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a2d      	ldr	r2, [pc, #180]	; (800077c <MX_GPIO_Init+0xf0>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MX_GPIO_Init+0xf0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_GPIO_Init+0xf0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a26      	ldr	r2, [pc, #152]	; (800077c <MX_GPIO_Init+0xf0>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_GPIO_Init+0xf0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_GPIO_Init+0xf0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a1f      	ldr	r2, [pc, #124]	; (800077c <MX_GPIO_Init+0xf0>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0xf0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	481a      	ldr	r0, [pc, #104]	; (8000780 <MX_GPIO_Init+0xf4>)
 8000718:	f000 fbe4 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800071c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000722:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4814      	ldr	r0, [pc, #80]	; (8000784 <MX_GPIO_Init+0xf8>)
 8000734:	f000 fa42 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000738:	230c      	movs	r3, #12
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000748:	2307      	movs	r3, #7
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <MX_GPIO_Init+0xf4>)
 8000754:	f000 fa32 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000758:	2320      	movs	r3, #32
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0xf4>)
 8000770:	f000 fa24 	bl	8000bbc <HAL_GPIO_Init>

}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000
 8000784:	40020800 	.word	0x40020800

08000788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079a:	f000 f90d 	bl	80009b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40001000 	.word	0x40001000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80007f6:	f001 fd7f 	bl	80022f8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	2036      	movs	r0, #54	; 0x36
 800081e:	f000 f9a3 	bl	8000b68 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000822:	2036      	movs	r0, #54	; 0x36
 8000824:	f000 f9bc 	bl	8000ba0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <HAL_InitTick+0xa4>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <HAL_InitTick+0xa4>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_InitTick+0xa4>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 0310 	and.w	r3, r3, #16
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000844:	f107 0210 	add.w	r2, r7, #16
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fc68 	bl	8001124 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000854:	f000 fc52 	bl	80010fc <HAL_RCC_GetPCLK1Freq>
 8000858:	4603      	mov	r3, r0
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800085e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <HAL_InitTick+0xa8>)
 8000862:	fba2 2303 	umull	r2, r3, r2, r3
 8000866:	0c9b      	lsrs	r3, r3, #18
 8000868:	3b01      	subs	r3, #1
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_InitTick+0xac>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <HAL_InitTick+0xb0>)
 8000870:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_InitTick+0xac>)
 8000874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000878:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_InitTick+0xac>)
 800087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_InitTick+0xac>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_InitTick+0xac>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <HAL_InitTick+0xac>)
 800088e:	f001 f8cb 	bl	8001a28 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d104      	bne.n	80008a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <HAL_InitTick+0xac>)
 800089a:	f001 f91f 	bl	8001adc <HAL_TIM_Base_Start_IT>
 800089e:	4603      	mov	r3, r0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3730      	adds	r7, #48	; 0x30
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	431bde83 	.word	0x431bde83
 80008b4:	200005a8 	.word	0x200005a8
 80008b8:	40001000 	.word	0x40001000

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <TIM6_DAC_IRQHandler+0x10>)
 80008ee:	f001 f965 	bl	8001bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200005a8 	.word	0x200005a8

080008fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000958 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000926:	490e      	ldr	r1, [pc, #56]	; (8000960 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000928:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800093c:	4c0b      	ldr	r4, [pc, #44]	; (800096c <LoopFillZerobss+0x26>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800094a:	f7ff ffd7 	bl	80008fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094e:	f002 fd21 	bl	8003394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000952:	f7ff fe23 	bl	800059c <main>
  bx  lr    
 8000956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000964:	0800346c 	.word	0x0800346c
  ldr r2, =_sbss
 8000968:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800096c:	2000069c 	.word	0x2000069c

08000970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC_IRQHandler>
	...

08000974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <HAL_Init+0x40>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_Init+0x40>)
 800098a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_Init+0x40>)
 8000996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800099a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f8d8 	bl	8000b52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff ff30 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f7ff ff06 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023c00 	.word	0x40023c00

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	200005f0 	.word	0x200005f0

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	200005f0 	.word	0x200005f0

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	db0b      	blt.n	8000a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 021f 	and.w	r2, r3, #31
 8000a74:	4907      	ldr	r1, [pc, #28]	; (8000a94 <__NVIC_EnableIRQ+0x38>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db0a      	blt.n	8000ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <__NVIC_SetPriority+0x4c>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac0:	e00a      	b.n	8000ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <__NVIC_SetPriority+0x50>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	3b04      	subs	r3, #4
 8000ad0:	0112      	lsls	r2, r2, #4
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	761a      	strb	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	f1c3 0307 	rsb	r3, r3, #7
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	bf28      	it	cs
 8000b0a:	2304      	movcs	r3, #4
 8000b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d902      	bls.n	8000b1c <NVIC_EncodePriority+0x30>
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	e000      	b.n	8000b1e <NVIC_EncodePriority+0x32>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43d9      	mvns	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	4313      	orrs	r3, r2
         );
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3724      	adds	r7, #36	; 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff4c 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7a:	f7ff ff61 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000b7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	6978      	ldr	r0, [r7, #20]
 8000b86:	f7ff ffb1 	bl	8000aec <NVIC_EncodePriority>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff80 	bl	8000a98 <__NVIC_SetPriority>
}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff54 	bl	8000a5c <__NVIC_EnableIRQ>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	e165      	b.n	8000ea4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	f040 8154 	bne.w	8000e9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d005      	beq.n	8000c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d130      	bne.n	8000c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	f003 0201 	and.w	r2, r3, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d017      	beq.n	8000cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d123      	bne.n	8000d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	69b9      	ldr	r1, [r7, #24]
 8000cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0203 	and.w	r2, r3, #3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80ae 	beq.w	8000e9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <HAL_GPIO_Init+0x300>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a5c      	ldr	r2, [pc, #368]	; (8000ebc <HAL_GPIO_Init+0x300>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b5a      	ldr	r3, [pc, #360]	; (8000ebc <HAL_GPIO_Init+0x300>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d5e:	4a58      	ldr	r2, [pc, #352]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4f      	ldr	r2, [pc, #316]	; (8000ec4 <HAL_GPIO_Init+0x308>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d025      	beq.n	8000dd6 <HAL_GPIO_Init+0x21a>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4e      	ldr	r2, [pc, #312]	; (8000ec8 <HAL_GPIO_Init+0x30c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d01f      	beq.n	8000dd2 <HAL_GPIO_Init+0x216>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4d      	ldr	r2, [pc, #308]	; (8000ecc <HAL_GPIO_Init+0x310>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d019      	beq.n	8000dce <HAL_GPIO_Init+0x212>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4c      	ldr	r2, [pc, #304]	; (8000ed0 <HAL_GPIO_Init+0x314>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d013      	beq.n	8000dca <HAL_GPIO_Init+0x20e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4b      	ldr	r2, [pc, #300]	; (8000ed4 <HAL_GPIO_Init+0x318>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d00d      	beq.n	8000dc6 <HAL_GPIO_Init+0x20a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4a      	ldr	r2, [pc, #296]	; (8000ed8 <HAL_GPIO_Init+0x31c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d007      	beq.n	8000dc2 <HAL_GPIO_Init+0x206>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a49      	ldr	r2, [pc, #292]	; (8000edc <HAL_GPIO_Init+0x320>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_GPIO_Init+0x202>
 8000dba:	2306      	movs	r3, #6
 8000dbc:	e00c      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	e00a      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	f002 0203 	and.w	r2, r2, #3
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df6:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e1a:	4a31      	ldr	r2, [pc, #196]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e20:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e98:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	f67f ae96 	bls.w	8000bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40021400 	.word	0x40021400
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40013c00 	.word	0x40013c00

08000ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef4:	787b      	ldrb	r3, [r7, #1]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f00:	e003      	b.n	8000f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	041a      	lsls	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	619a      	str	r2, [r3, #24]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e0cc      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f2c:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d90c      	bls.n	8000f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3a:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d001      	beq.n	8000f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0b8      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d020      	beq.n	8000fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d005      	beq.n	8000f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f6c:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f84:	4b53      	ldr	r3, [pc, #332]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f90:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	494d      	ldr	r1, [pc, #308]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d044      	beq.n	8001038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d107      	bne.n	8000fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d119      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e07f      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d003      	beq.n	8000fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d107      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e06f      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e067      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ff6:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f023 0203 	bic.w	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4934      	ldr	r1, [pc, #208]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001004:	4313      	orrs	r3, r2
 8001006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001008:	f7ff fcea 	bl	80009e0 <HAL_GetTick>
 800100c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100e:	e00a      	b.n	8001026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001010:	f7ff fce6 	bl	80009e0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f241 3288 	movw	r2, #5000	; 0x1388
 800101e:	4293      	cmp	r3, r2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e04f      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 020c 	and.w	r2, r3, #12
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	429a      	cmp	r2, r3
 8001036:	d1eb      	bne.n	8001010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d20c      	bcs.n	8001060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d001      	beq.n	8001060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e032      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4916      	ldr	r1, [pc, #88]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	4313      	orrs	r3, r2
 800107c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d009      	beq.n	800109e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	490e      	ldr	r1, [pc, #56]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	4313      	orrs	r3, r2
 800109c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800109e:	f000 f873 	bl	8001188 <HAL_RCC_GetSysClockFreq>
 80010a2:	4602      	mov	r2, r0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	490a      	ldr	r1, [pc, #40]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	5ccb      	ldrb	r3, [r1, r3]
 80010b2:	fa22 f303 	lsr.w	r3, r2, r3
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 80010b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_RCC_ClockConfig+0x1c8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fba2 	bl	8000808 <HAL_InitTick>

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00
 80010d4:	40023800 	.word	0x40023800
 80010d8:	08003438 	.word	0x08003438
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000000 	.word	0x20000000

080010fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001100:	f7ff fff0 	bl	80010e4 <HAL_RCC_GetHCLKFreq>
 8001104:	4602      	mov	r2, r0
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	0a9b      	lsrs	r3, r3, #10
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	4903      	ldr	r1, [pc, #12]	; (8001120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001112:	5ccb      	ldrb	r3, [r1, r3]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	08003448 	.word	0x08003448

08001124 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	220f      	movs	r2, #15
 8001132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_RCC_GetClockConfig+0x5c>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_RCC_GetClockConfig+0x5c>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_RCC_GetClockConfig+0x5c>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_RCC_GetClockConfig+0x5c>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_RCC_GetClockConfig+0x60>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 020f 	and.w	r2, r3, #15
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	601a      	str	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40023c00 	.word	0x40023c00

08001188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800118c:	b088      	sub	sp, #32
 800118e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a4:	4bce      	ldr	r3, [pc, #824]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	f200 818d 	bhi.w	80014cc <HAL_RCC_GetSysClockFreq+0x344>
 80011b2:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <HAL_RCC_GetSysClockFreq+0x30>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	080011ed 	.word	0x080011ed
 80011bc:	080014cd 	.word	0x080014cd
 80011c0:	080014cd 	.word	0x080014cd
 80011c4:	080014cd 	.word	0x080014cd
 80011c8:	080011f3 	.word	0x080011f3
 80011cc:	080014cd 	.word	0x080014cd
 80011d0:	080014cd 	.word	0x080014cd
 80011d4:	080014cd 	.word	0x080014cd
 80011d8:	080011f9 	.word	0x080011f9
 80011dc:	080014cd 	.word	0x080014cd
 80011e0:	080014cd 	.word	0x080014cd
 80011e4:	080014cd 	.word	0x080014cd
 80011e8:	0800136d 	.word	0x0800136d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011ec:	4bbd      	ldr	r3, [pc, #756]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80011ee:	61bb      	str	r3, [r7, #24]
       break;
 80011f0:	e16f      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011f2:	4bbd      	ldr	r3, [pc, #756]	; (80014e8 <HAL_RCC_GetSysClockFreq+0x360>)
 80011f4:	61bb      	str	r3, [r7, #24]
      break;
 80011f6:	e16c      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f8:	4bb9      	ldr	r3, [pc, #740]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001200:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001202:	4bb7      	ldr	r3, [pc, #732]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d053      	beq.n	80012b6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800120e:	4bb4      	ldr	r3, [pc, #720]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	099b      	lsrs	r3, r3, #6
 8001214:	461a      	mov	r2, r3
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800121e:	f04f 0100 	mov.w	r1, #0
 8001222:	ea02 0400 	and.w	r4, r2, r0
 8001226:	603c      	str	r4, [r7, #0]
 8001228:	400b      	ands	r3, r1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001230:	4620      	mov	r0, r4
 8001232:	4629      	mov	r1, r5
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	014b      	lsls	r3, r1, #5
 800123e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001242:	0142      	lsls	r2, r0, #5
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	4623      	mov	r3, r4
 800124a:	1ac0      	subs	r0, r0, r3
 800124c:	462b      	mov	r3, r5
 800124e:	eb61 0103 	sbc.w	r1, r1, r3
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	018b      	lsls	r3, r1, #6
 800125c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001260:	0182      	lsls	r2, r0, #6
 8001262:	1a12      	subs	r2, r2, r0
 8001264:	eb63 0301 	sbc.w	r3, r3, r1
 8001268:	f04f 0000 	mov.w	r0, #0
 800126c:	f04f 0100 	mov.w	r1, #0
 8001270:	00d9      	lsls	r1, r3, #3
 8001272:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001276:	00d0      	lsls	r0, r2, #3
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4621      	mov	r1, r4
 800127e:	1852      	adds	r2, r2, r1
 8001280:	4629      	mov	r1, r5
 8001282:	eb43 0101 	adc.w	r1, r3, r1
 8001286:	460b      	mov	r3, r1
 8001288:	f04f 0000 	mov.w	r0, #0
 800128c:	f04f 0100 	mov.w	r1, #0
 8001290:	0259      	lsls	r1, r3, #9
 8001292:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001296:	0250      	lsls	r0, r2, #9
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	461a      	mov	r2, r3
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	f7fe fffc 	bl	80002a4 <__aeabi_uldivmod>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4613      	mov	r3, r2
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	e04c      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b6:	4b8a      	ldr	r3, [pc, #552]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	099b      	lsrs	r3, r3, #6
 80012bc:	461a      	mov	r2, r3
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80012c6:	f04f 0100 	mov.w	r1, #0
 80012ca:	ea02 0a00 	and.w	sl, r2, r0
 80012ce:	ea03 0b01 	and.w	fp, r3, r1
 80012d2:	4650      	mov	r0, sl
 80012d4:	4659      	mov	r1, fp
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	014b      	lsls	r3, r1, #5
 80012e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80012e4:	0142      	lsls	r2, r0, #5
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	ebb0 000a 	subs.w	r0, r0, sl
 80012ee:	eb61 010b 	sbc.w	r1, r1, fp
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	018b      	lsls	r3, r1, #6
 80012fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001300:	0182      	lsls	r2, r0, #6
 8001302:	1a12      	subs	r2, r2, r0
 8001304:	eb63 0301 	sbc.w	r3, r3, r1
 8001308:	f04f 0000 	mov.w	r0, #0
 800130c:	f04f 0100 	mov.w	r1, #0
 8001310:	00d9      	lsls	r1, r3, #3
 8001312:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001316:	00d0      	lsls	r0, r2, #3
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	eb12 020a 	adds.w	r2, r2, sl
 8001320:	eb43 030b 	adc.w	r3, r3, fp
 8001324:	f04f 0000 	mov.w	r0, #0
 8001328:	f04f 0100 	mov.w	r1, #0
 800132c:	0299      	lsls	r1, r3, #10
 800132e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001332:	0290      	lsls	r0, r2, #10
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	461a      	mov	r2, r3
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	f7fe ffae 	bl	80002a4 <__aeabi_uldivmod>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4613      	mov	r3, r2
 800134e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001350:	4b63      	ldr	r3, [pc, #396]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	0c1b      	lsrs	r3, r3, #16
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	3301      	adds	r3, #1
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	fbb2 f3f3 	udiv	r3, r2, r3
 8001368:	61bb      	str	r3, [r7, #24]
      break;
 800136a:	e0b2      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800136c:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001374:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001376:	4b5a      	ldr	r3, [pc, #360]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d04d      	beq.n	800141e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001382:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	099b      	lsrs	r3, r3, #6
 8001388:	461a      	mov	r2, r3
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001392:	f04f 0100 	mov.w	r1, #0
 8001396:	ea02 0800 	and.w	r8, r2, r0
 800139a:	ea03 0901 	and.w	r9, r3, r1
 800139e:	4640      	mov	r0, r8
 80013a0:	4649      	mov	r1, r9
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	014b      	lsls	r3, r1, #5
 80013ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013b0:	0142      	lsls	r2, r0, #5
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	ebb0 0008 	subs.w	r0, r0, r8
 80013ba:	eb61 0109 	sbc.w	r1, r1, r9
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	018b      	lsls	r3, r1, #6
 80013c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80013cc:	0182      	lsls	r2, r0, #6
 80013ce:	1a12      	subs	r2, r2, r0
 80013d0:	eb63 0301 	sbc.w	r3, r3, r1
 80013d4:	f04f 0000 	mov.w	r0, #0
 80013d8:	f04f 0100 	mov.w	r1, #0
 80013dc:	00d9      	lsls	r1, r3, #3
 80013de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80013e2:	00d0      	lsls	r0, r2, #3
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	eb12 0208 	adds.w	r2, r2, r8
 80013ec:	eb43 0309 	adc.w	r3, r3, r9
 80013f0:	f04f 0000 	mov.w	r0, #0
 80013f4:	f04f 0100 	mov.w	r1, #0
 80013f8:	0259      	lsls	r1, r3, #9
 80013fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80013fe:	0250      	lsls	r0, r2, #9
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	461a      	mov	r2, r3
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	f7fe ff48 	bl	80002a4 <__aeabi_uldivmod>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4613      	mov	r3, r2
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	e04a      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	099b      	lsrs	r3, r3, #6
 8001424:	461a      	mov	r2, r3
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800142e:	f04f 0100 	mov.w	r1, #0
 8001432:	ea02 0400 	and.w	r4, r2, r0
 8001436:	ea03 0501 	and.w	r5, r3, r1
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	014b      	lsls	r3, r1, #5
 8001448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800144c:	0142      	lsls	r2, r0, #5
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	1b00      	subs	r0, r0, r4
 8001454:	eb61 0105 	sbc.w	r1, r1, r5
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	018b      	lsls	r3, r1, #6
 8001462:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001466:	0182      	lsls	r2, r0, #6
 8001468:	1a12      	subs	r2, r2, r0
 800146a:	eb63 0301 	sbc.w	r3, r3, r1
 800146e:	f04f 0000 	mov.w	r0, #0
 8001472:	f04f 0100 	mov.w	r1, #0
 8001476:	00d9      	lsls	r1, r3, #3
 8001478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800147c:	00d0      	lsls	r0, r2, #3
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	1912      	adds	r2, r2, r4
 8001484:	eb45 0303 	adc.w	r3, r5, r3
 8001488:	f04f 0000 	mov.w	r0, #0
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	0299      	lsls	r1, r3, #10
 8001492:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001496:	0290      	lsls	r0, r2, #10
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	f7fe fefc 	bl	80002a4 <__aeabi_uldivmod>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4613      	mov	r3, r2
 80014b2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	0f1b      	lsrs	r3, r3, #28
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	61bb      	str	r3, [r7, #24]
      break;
 80014ca:	e002      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014ce:	61bb      	str	r3, [r7, #24]
      break;
 80014d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014d2:	69bb      	ldr	r3, [r7, #24]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	00f42400 	.word	0x00f42400
 80014e8:	007a1200 	.word	0x007a1200

080014ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e28d      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8083 	beq.w	8001612 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800150c:	4b94      	ldr	r3, [pc, #592]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b04      	cmp	r3, #4
 8001516:	d019      	beq.n	800154c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001518:	4b91      	ldr	r3, [pc, #580]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001520:	2b08      	cmp	r3, #8
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001524:	4b8e      	ldr	r3, [pc, #568]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001530:	d00c      	beq.n	800154c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001532:	4b8b      	ldr	r3, [pc, #556]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800153a:	2b0c      	cmp	r3, #12
 800153c:	d112      	bne.n	8001564 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153e:	4b88      	ldr	r3, [pc, #544]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800154a:	d10b      	bne.n	8001564 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	4b84      	ldr	r3, [pc, #528]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d05b      	beq.n	8001610 <HAL_RCC_OscConfig+0x124>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d157      	bne.n	8001610 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e25a      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x90>
 800156e:	4b7c      	ldr	r3, [pc, #496]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7b      	ldr	r2, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e01d      	b.n	80015b8 <HAL_RCC_OscConfig+0xcc>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0xb4>
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a75      	ldr	r2, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b73      	ldr	r3, [pc, #460]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a72      	ldr	r2, [pc, #456]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0xcc>
 80015a0:	4b6f      	ldr	r3, [pc, #444]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a6e      	ldr	r2, [pc, #440]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b6c      	ldr	r3, [pc, #432]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6b      	ldr	r2, [pc, #428]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fa0e 	bl	80009e0 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fa0a 	bl	80009e0 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e21f      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b61      	ldr	r3, [pc, #388]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0xdc>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff f9fa 	bl	80009e0 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff f9f6 	bl	80009e0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e20b      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	4b57      	ldr	r3, [pc, #348]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x104>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d06f      	beq.n	80016fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800161e:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b00      	cmp	r3, #0
 8001628:	d017      	beq.n	800165a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800162a:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001632:	2b08      	cmp	r3, #8
 8001634:	d105      	bne.n	8001642 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164e:	4b44      	ldr	r3, [pc, #272]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	4b41      	ldr	r3, [pc, #260]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x186>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e1d3      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4937      	ldr	r1, [pc, #220]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	e03a      	b.n	80016fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001690:	4b34      	ldr	r3, [pc, #208]	; (8001764 <HAL_RCC_OscConfig+0x278>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff f9a3 	bl	80009e0 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff f99f 	bl	80009e0 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1b4      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4925      	ldr	r1, [pc, #148]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_OscConfig+0x278>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff f982 	bl	80009e0 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e0:	f7ff f97e 	bl	80009e0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e193      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d036      	beq.n	8001778 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d016      	beq.n	8001740 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x27c>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff f962 	bl	80009e0 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff f95e 	bl	80009e0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e173      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x234>
 800173e:	e01b      	b.n	8001778 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_OscConfig+0x27c>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff f94b 	bl	80009e0 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	e00e      	b.n	800176c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174e:	f7ff f947 	bl	80009e0 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d907      	bls.n	800176c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e15c      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
 8001760:	40023800 	.word	0x40023800
 8001764:	42470000 	.word	0x42470000
 8001768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	4b8a      	ldr	r3, [pc, #552]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 800176e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ea      	bne.n	800174e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 8097 	beq.w	80018b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178a:	4b83      	ldr	r3, [pc, #524]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b7f      	ldr	r3, [pc, #508]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a7e      	ldr	r2, [pc, #504]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b7c      	ldr	r3, [pc, #496]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b2:	2301      	movs	r3, #1
 80017b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	4b79      	ldr	r3, [pc, #484]	; (800199c <HAL_RCC_OscConfig+0x4b0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d118      	bne.n	80017f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c2:	4b76      	ldr	r3, [pc, #472]	; (800199c <HAL_RCC_OscConfig+0x4b0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a75      	ldr	r2, [pc, #468]	; (800199c <HAL_RCC_OscConfig+0x4b0>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ce:	f7ff f907 	bl	80009e0 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d6:	f7ff f903 	bl	80009e0 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e118      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	4b6c      	ldr	r3, [pc, #432]	; (800199c <HAL_RCC_OscConfig+0x4b0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x31e>
 80017fc:	4b66      	ldr	r3, [pc, #408]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001800:	4a65      	ldr	r2, [pc, #404]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6713      	str	r3, [r2, #112]	; 0x70
 8001808:	e01c      	b.n	8001844 <HAL_RCC_OscConfig+0x358>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b05      	cmp	r3, #5
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x340>
 8001812:	4b61      	ldr	r3, [pc, #388]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	4a60      	ldr	r2, [pc, #384]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6713      	str	r3, [r2, #112]	; 0x70
 800181e:	4b5e      	ldr	r3, [pc, #376]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001822:	4a5d      	ldr	r2, [pc, #372]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6713      	str	r3, [r2, #112]	; 0x70
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0x358>
 800182c:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	4a59      	ldr	r2, [pc, #356]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6713      	str	r3, [r2, #112]	; 0x70
 8001838:	4b57      	ldr	r3, [pc, #348]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a56      	ldr	r2, [pc, #344]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 800183e:	f023 0304 	bic.w	r3, r3, #4
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d015      	beq.n	8001878 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff f8c8 	bl	80009e0 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	e00a      	b.n	800186a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff f8c4 	bl	80009e0 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e0d7      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186a:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0ee      	beq.n	8001854 <HAL_RCC_OscConfig+0x368>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff f8b2 	bl	80009e0 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff f8ae 	bl	80009e0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0c1      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ee      	bne.n	8001880 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a8:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a3a      	ldr	r2, [pc, #232]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 80018ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80ad 	beq.w	8001a18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d060      	beq.n	800198c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d145      	bne.n	800195e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_RCC_OscConfig+0x4b4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f882 	bl	80009e0 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff f87e 	bl	80009e0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e093      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	3b01      	subs	r3, #1
 8001918:	041b      	lsls	r3, r3, #16
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	071b      	lsls	r3, r3, #28
 800192a:	491b      	ldr	r1, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x4b4>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff f853 	bl	80009e0 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff f84f 	bl	80009e0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e064      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x452>
 800195c:	e05c      	b.n	8001a18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_RCC_OscConfig+0x4b4>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f83c 	bl	80009e0 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f838 	bl	80009e0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e04d      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_RCC_OscConfig+0x4ac>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x480>
 800198a:	e045      	b.n	8001a18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e040      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
 8001998:	40023800 	.word	0x40023800
 800199c:	40007000 	.word	0x40007000
 80019a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <HAL_RCC_OscConfig+0x538>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d030      	beq.n	8001a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d129      	bne.n	8001a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d122      	bne.n	8001a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d4:	4013      	ands	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019dc:	4293      	cmp	r3, r2
 80019de:	d119      	bne.n	8001a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	085b      	lsrs	r3, r3, #1
 80019ec:	3b01      	subs	r3, #1
 80019ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d10f      	bne.n	8001a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e041      	b.n	8001abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f839 	bl	8001ac6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3304      	adds	r3, #4
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f000 f9d8 	bl	8001e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d001      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e04e      	b.n	8001b92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d022      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1e:	d01d      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d018      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_TIM_Base_Start_IT+0xd0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d111      	bne.n	8001b80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d010      	beq.n	8001b90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7e:	e007      	b.n	8001b90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	40000c00 	.word	0x40000c00
 8001bb0:	40010400 	.word	0x40010400
 8001bb4:	40014000 	.word	0x40014000
 8001bb8:	40001800 	.word	0x40001800

08001bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d122      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d11b      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0202 	mvn.w	r2, #2
 8001be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8ee 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8e0 	bl	8001dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8f1 	bl	8001df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d122      	bne.n	8001c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d11b      	bne.n	8001c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0204 	mvn.w	r2, #4
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2202      	movs	r2, #2
 8001c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8c4 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8b6 	bl	8001dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8c7 	bl	8001df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d122      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0208 	mvn.w	r2, #8
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f89a 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f88c 	bl	8001dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f89d 	bl	8001df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b10      	cmp	r3, #16
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0210 	mvn.w	r2, #16
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f870 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f862 	bl	8001dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f873 	bl	8001df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0201 	mvn.w	r2, #1
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fd24 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4a:	2b80      	cmp	r3, #128	; 0x80
 8001d4c:	d10e      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d58:	2b80      	cmp	r3, #128	; 0x80
 8001d5a:	d107      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f902 	bl	8001f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d76:	2b40      	cmp	r3, #64	; 0x40
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b40      	cmp	r3, #64	; 0x40
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f838 	bl	8001e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d10e      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d107      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0220 	mvn.w	r2, #32
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8cc 	bl	8001f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a40      	ldr	r2, [pc, #256]	; (8001f30 <TIM_Base_SetConfig+0x114>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <TIM_Base_SetConfig+0x40>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3a:	d00f      	beq.n	8001e5c <TIM_Base_SetConfig+0x40>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3d      	ldr	r2, [pc, #244]	; (8001f34 <TIM_Base_SetConfig+0x118>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00b      	beq.n	8001e5c <TIM_Base_SetConfig+0x40>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3c      	ldr	r2, [pc, #240]	; (8001f38 <TIM_Base_SetConfig+0x11c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d007      	beq.n	8001e5c <TIM_Base_SetConfig+0x40>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3b      	ldr	r2, [pc, #236]	; (8001f3c <TIM_Base_SetConfig+0x120>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d003      	beq.n	8001e5c <TIM_Base_SetConfig+0x40>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3a      	ldr	r2, [pc, #232]	; (8001f40 <TIM_Base_SetConfig+0x124>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d108      	bne.n	8001e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <TIM_Base_SetConfig+0x114>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d02b      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7c:	d027      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2c      	ldr	r2, [pc, #176]	; (8001f34 <TIM_Base_SetConfig+0x118>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d023      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a2b      	ldr	r2, [pc, #172]	; (8001f38 <TIM_Base_SetConfig+0x11c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01f      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <TIM_Base_SetConfig+0x120>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01b      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <TIM_Base_SetConfig+0x124>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d017      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <TIM_Base_SetConfig+0x128>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a27      	ldr	r2, [pc, #156]	; (8001f48 <TIM_Base_SetConfig+0x12c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00f      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <TIM_Base_SetConfig+0x130>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00b      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <TIM_Base_SetConfig+0x134>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a24      	ldr	r2, [pc, #144]	; (8001f54 <TIM_Base_SetConfig+0x138>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d003      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <TIM_Base_SetConfig+0x13c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d108      	bne.n	8001ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <TIM_Base_SetConfig+0x114>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d003      	beq.n	8001f14 <TIM_Base_SetConfig+0xf8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <TIM_Base_SetConfig+0x124>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d103      	bne.n	8001f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	615a      	str	r2, [r3, #20]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40000800 	.word	0x40000800
 8001f3c:	40000c00 	.word	0x40000c00
 8001f40:	40010400 	.word	0x40010400
 8001f44:	40014000 	.word	0x40014000
 8001f48:	40014400 	.word	0x40014400
 8001f4c:	40014800 	.word	0x40014800
 8001f50:	40001800 	.word	0x40001800
 8001f54:	40001c00 	.word	0x40001c00
 8001f58:	40002000 	.word	0x40002000

08001f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f8e:	4b7f      	ldr	r3, [pc, #508]	; (800218c <xTaskIncrementTick+0x208>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 80f0 	bne.w	8002178 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f98:	4b7d      	ldr	r3, [pc, #500]	; (8002190 <xTaskIncrementTick+0x20c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001fa0:	4a7b      	ldr	r2, [pc, #492]	; (8002190 <xTaskIncrementTick+0x20c>)
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d120      	bne.n	8001fee <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001fac:	4b79      	ldr	r3, [pc, #484]	; (8002194 <xTaskIncrementTick+0x210>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fba:	f383 8811 	msr	BASEPRI, r3
 8001fbe:	f3bf 8f6f 	isb	sy
 8001fc2:	f3bf 8f4f 	dsb	sy
 8001fc6:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001fc8:	bf00      	nop
 8001fca:	e7fe      	b.n	8001fca <xTaskIncrementTick+0x46>
 8001fcc:	4b71      	ldr	r3, [pc, #452]	; (8002194 <xTaskIncrementTick+0x210>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	4b71      	ldr	r3, [pc, #452]	; (8002198 <xTaskIncrementTick+0x214>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6f      	ldr	r2, [pc, #444]	; (8002194 <xTaskIncrementTick+0x210>)
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4a6f      	ldr	r2, [pc, #444]	; (8002198 <xTaskIncrementTick+0x214>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b6e      	ldr	r3, [pc, #440]	; (800219c <xTaskIncrementTick+0x218>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	4a6d      	ldr	r2, [pc, #436]	; (800219c <xTaskIncrementTick+0x218>)
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	f000 f94f 	bl	800228c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001fee:	4b6c      	ldr	r3, [pc, #432]	; (80021a0 <xTaskIncrementTick+0x21c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a3a      	ldr	r2, [r7, #32]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f0c0 80aa 	bcc.w	800214e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ffa:	4b66      	ldr	r3, [pc, #408]	; (8002194 <xTaskIncrementTick+0x210>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d104      	bne.n	800200e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002004:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <xTaskIncrementTick+0x21c>)
 8002006:	f04f 32ff 	mov.w	r2, #4294967295
 800200a:	601a      	str	r2, [r3, #0]
                    break;
 800200c:	e09f      	b.n	800214e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800200e:	4b61      	ldr	r3, [pc, #388]	; (8002194 <xTaskIncrementTick+0x210>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800201e:	6a3a      	ldr	r2, [r7, #32]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	429a      	cmp	r2, r3
 8002024:	d203      	bcs.n	800202e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002026:	4a5e      	ldr	r2, [pc, #376]	; (80021a0 <xTaskIncrementTick+0x21c>)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800202c:	e08f      	b.n	800214e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	68d2      	ldr	r2, [r2, #12]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	6892      	ldr	r2, [r2, #8]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	3304      	adds	r3, #4
 8002050:	429a      	cmp	r2, r3
 8002052:	d103      	bne.n	800205c <xTaskIncrementTick+0xd8>
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2200      	movs	r2, #0
 8002060:	615a      	str	r2, [r3, #20]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	1e5a      	subs	r2, r3, #1
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01e      	beq.n	80020b2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	6a12      	ldr	r2, [r2, #32]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	69d2      	ldr	r2, [r2, #28]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	3318      	adds	r3, #24
 8002096:	429a      	cmp	r2, r3
 8002098:	d103      	bne.n	80020a2 <xTaskIncrementTick+0x11e>
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2200      	movs	r2, #0
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 f84f 	bl	8003158 <SEGGER_SYSVIEW_OnTaskStartReady>
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	2201      	movs	r2, #1
 80020c0:	409a      	lsls	r2, r3
 80020c2:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <xTaskIncrementTick+0x220>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	4a36      	ldr	r2, [pc, #216]	; (80021a4 <xTaskIncrementTick+0x220>)
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <xTaskIncrementTick+0x224>)
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	3304      	adds	r3, #4
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	3204      	adds	r2, #4
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1d1a      	adds	r2, r3, #4
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <xTaskIncrementTick+0x224>)
 8002110:	441a      	add	r2, r3
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	615a      	str	r2, [r3, #20]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211a:	4923      	ldr	r1, [pc, #140]	; (80021a8 <xTaskIncrementTick+0x224>)
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1c59      	adds	r1, r3, #1
 800212a:	481f      	ldr	r0, [pc, #124]	; (80021a8 <xTaskIncrementTick+0x224>)
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4403      	add	r3, r0
 8002136:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <xTaskIncrementTick+0x228>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	429a      	cmp	r2, r3
 8002144:	f4ff af59 	bcc.w	8001ffa <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002148:	2301      	movs	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800214c:	e755      	b.n	8001ffa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <xTaskIncrementTick+0x228>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002154:	4914      	ldr	r1, [pc, #80]	; (80021a8 <xTaskIncrementTick+0x224>)
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d901      	bls.n	800216a <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002166:	2301      	movs	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <xTaskIncrementTick+0x22c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002172:	2301      	movs	r3, #1
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	e004      	b.n	8002182 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <xTaskIncrementTick+0x230>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <xTaskIncrementTick+0x230>)
 8002180:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002184:	4618      	mov	r0, r3
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000078 	.word	0x20000078
 8002190:	2000005c 	.word	0x2000005c
 8002194:	20000054 	.word	0x20000054
 8002198:	20000058 	.word	0x20000058
 800219c:	2000006c 	.word	0x2000006c
 80021a0:	20000070 	.word	0x20000070
 80021a4:	20000060 	.word	0x20000060
 80021a8:	2000002c 	.word	0x2000002c
 80021ac:	20000028 	.word	0x20000028
 80021b0:	20000068 	.word	0x20000068
 80021b4:	20000064 	.word	0x20000064

080021b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <vTaskSwitchContext+0xbc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <vTaskSwitchContext+0xc0>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80021cc:	e04d      	b.n	800226a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <vTaskSwitchContext+0xc0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <vTaskSwitchContext+0xc4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80021e2:	7afb      	ldrb	r3, [r7, #11]
 80021e4:	f1c3 031f 	rsb	r3, r3, #31
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	4925      	ldr	r1, [pc, #148]	; (8002280 <vTaskSwitchContext+0xc8>)
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10a      	bne.n	8002214 <vTaskSwitchContext+0x5c>
        __asm volatile
 80021fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002202:	f383 8811 	msr	BASEPRI, r3
 8002206:	f3bf 8f6f 	isb	sy
 800220a:	f3bf 8f4f 	dsb	sy
 800220e:	607b      	str	r3, [r7, #4]
    }
 8002210:	bf00      	nop
 8002212:	e7fe      	b.n	8002212 <vTaskSwitchContext+0x5a>
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <vTaskSwitchContext+0xc8>)
 8002220:	4413      	add	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	3308      	adds	r3, #8
 8002236:	429a      	cmp	r2, r3
 8002238:	d104      	bne.n	8002244 <vTaskSwitchContext+0x8c>
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <vTaskSwitchContext+0xcc>)
 800224c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <vTaskSwitchContext+0xcc>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <vTaskSwitchContext+0xd0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d102      	bne.n	8002260 <vTaskSwitchContext+0xa8>
 800225a:	f000 ff1f 	bl	800309c <SEGGER_SYSVIEW_OnIdle>
}
 800225e:	e004      	b.n	800226a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <vTaskSwitchContext+0xcc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 ff35 	bl	80030d4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000078 	.word	0x20000078
 8002278:	20000068 	.word	0x20000068
 800227c:	20000060 	.word	0x20000060
 8002280:	2000002c 	.word	0x2000002c
 8002284:	20000028 	.word	0x20000028
 8002288:	20000074 	.word	0x20000074

0800228c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <prvResetNextTaskUnblockTime+0x30>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <prvResetNextTaskUnblockTime+0x34>)
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80022a2:	e005      	b.n	80022b0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <prvResetNextTaskUnblockTime+0x30>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <prvResetNextTaskUnblockTime+0x34>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000054 	.word	0x20000054
 80022c0:	20000070 	.word	0x20000070
	...

080022d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <pxCurrentTCBConst2>)
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	6808      	ldr	r0, [r1, #0]
 80022d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022da:	f380 8809 	msr	PSP, r0
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f380 8811 	msr	BASEPRI, r0
 80022ea:	4770      	bx	lr
 80022ec:	f3af 8000 	nop.w

080022f0 <pxCurrentTCBConst2>:
 80022f0:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop

080022f8 <vInitPrioGroupValue>:
}
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80022fe:	4b37      	ldr	r3, [pc, #220]	; (80023dc <vInitPrioGroupValue+0xe4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <vInitPrioGroupValue+0xe8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d10a      	bne.n	800231e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	613b      	str	r3, [r7, #16]
    }
 800231a:	bf00      	nop
 800231c:	e7fe      	b.n	800231c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800231e:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <vInitPrioGroupValue+0xe4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a30      	ldr	r2, [pc, #192]	; (80023e4 <vInitPrioGroupValue+0xec>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d10a      	bne.n	800233e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	60fb      	str	r3, [r7, #12]
    }
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <vInitPrioGroupValue+0xf0>)
 8002340:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	22ff      	movs	r2, #255	; 0xff
 800234e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <vInitPrioGroupValue+0xf4>)
 8002364:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <vInitPrioGroupValue+0xf8>)
 8002368:	2207      	movs	r2, #7
 800236a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800236c:	e009      	b.n	8002382 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <vInitPrioGroupValue+0xf8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3b01      	subs	r3, #1
 8002374:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <vInitPrioGroupValue+0xf8>)
 8002376:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	2b80      	cmp	r3, #128	; 0x80
 800238c:	d0ef      	beq.n	800236e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <vInitPrioGroupValue+0xf8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	d00a      	beq.n	80023b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	60bb      	str	r3, [r7, #8]
    }
 80023ac:	bf00      	nop
 80023ae:	e7fe      	b.n	80023ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <vInitPrioGroupValue+0xf8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <vInitPrioGroupValue+0xf8>)
 80023b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <vInitPrioGroupValue+0xf8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <vInitPrioGroupValue+0xf8>)
 80023c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80023ce:	bf00      	nop
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00
 80023e0:	410fc271 	.word	0x410fc271
 80023e4:	410fc270 	.word	0x410fc270
 80023e8:	e000e400 	.word	0xe000e400
 80023ec:	2000007c 	.word	0x2000007c
 80023f0:	20000080 	.word	0x20000080
	...

08002400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002400:	f3ef 8009 	mrs	r0, PSP
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <pxCurrentTCBConst>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	f01e 0f10 	tst.w	lr, #16
 8002410:	bf08      	it	eq
 8002412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241a:	6010      	str	r0, [r2, #0]
 800241c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002424:	f380 8811 	msr	BASEPRI, r0
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f7ff fec2 	bl	80021b8 <vTaskSwitchContext>
 8002434:	f04f 0000 	mov.w	r0, #0
 8002438:	f380 8811 	msr	BASEPRI, r0
 800243c:	bc09      	pop	{r0, r3}
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	6808      	ldr	r0, [r1, #0]
 8002442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002446:	f01e 0f10 	tst.w	lr, #16
 800244a:	bf08      	it	eq
 800244c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002450:	f380 8809 	msr	PSP, r0
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	f3af 8000 	nop.w

08002460 <pxCurrentTCBConst>:
 8002460:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop

08002468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
        __asm volatile
 800246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	607b      	str	r3, [r7, #4]
    }
 8002480:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002482:	f000 fd91 	bl	8002fa8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002486:	f7ff fd7d 	bl	8001f84 <xTaskIncrementTick>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002490:	f000 fde8 	bl	8003064 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <SysTick_Handler+0x50>)
 8002496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e001      	b.n	80024a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800249e:	f000 fdc5 	bl	800302c <SEGGER_SYSVIEW_RecordExitISR>
 80024a2:	2300      	movs	r3, #0
 80024a4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80024ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000ed04 	.word	0xe000ed04

080024bc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <_DoInit+0x98>)
 80024c4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2203      	movs	r2, #3
 80024ca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a20      	ldr	r2, [pc, #128]	; (8002558 <_DoInit+0x9c>)
 80024d6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a20      	ldr	r2, [pc, #128]	; (800255c <_DoInit+0xa0>)
 80024dc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <_DoInit+0x9c>)
 80024fc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a17      	ldr	r2, [pc, #92]	; (8002560 <_DoInit+0xa4>)
 8002502:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2210      	movs	r2, #16
 8002508:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3307      	adds	r3, #7
 8002520:	4a10      	ldr	r2, [pc, #64]	; (8002564 <_DoInit+0xa8>)
 8002522:	6810      	ldr	r0, [r2, #0]
 8002524:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002526:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <_DoInit+0xac>)
 800252e:	6810      	ldr	r0, [r2, #0]
 8002530:	6018      	str	r0, [r3, #0]
 8002532:	8891      	ldrh	r1, [r2, #4]
 8002534:	7992      	ldrb	r2, [r2, #6]
 8002536:	8099      	strh	r1, [r3, #4]
 8002538:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800253a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002544:	f3bf 8f5f 	dmb	sy
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	200005f4 	.word	0x200005f4
 8002558:	08003420 	.word	0x08003420
 800255c:	20000084 	.word	0x20000084
 8002560:	20000484 	.word	0x20000484
 8002564:	0800342c 	.word	0x0800342c
 8002568:	08003430 	.word	0x08003430

0800256c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	; 0x30
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002578:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <SEGGER_RTT_ReadNoLock+0x108>)
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <SEGGER_RTT_ReadNoLock+0x1e>
 8002586:	f7ff ff99 	bl	80024bc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	4a37      	ldr	r2, [pc, #220]	; (8002674 <SEGGER_RTT_ReadNoLock+0x108>)
 8002598:	4413      	add	r3, r2
 800259a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80025b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d92b      	bls.n	8002610 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	bf28      	it	cs
 80025ca:	4613      	movcs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	4413      	add	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	6939      	ldr	r1, [r7, #16]
 80025dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025de:	f000 fefd 	bl	80033dc <memcpy>
    NumBytesRead += NumBytesRem;
 80025e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4413      	add	r3, r2
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	4413      	add	r3, r2
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80025fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4413      	add	r3, r2
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002608:	429a      	cmp	r2, r3
 800260a:	d101      	bne.n	8002610 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800260c:	2300      	movs	r3, #0
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4293      	cmp	r3, r2
 800261e:	bf28      	it	cs
 8002620:	4613      	movcs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d019      	beq.n	800265e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	4413      	add	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	6939      	ldr	r1, [r7, #16]
 8002638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800263a:	f000 fecf 	bl	80033dc <memcpy>
    NumBytesRead += NumBytesRem;
 800263e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	4413      	add	r3, r2
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4413      	add	r3, r2
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4413      	add	r3, r2
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002668:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800266c:	4618      	mov	r0, r3
 800266e:	3730      	adds	r7, #48	; 0x30
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200005f4 	.word	0x200005f4

08002678 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002688:	e002      	b.n	8002690 <_EncodeStr+0x18>
    Len++;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	3301      	adds	r3, #1
 800268e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f6      	bne.n	800268a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d901      	bls.n	80026a8 <_EncodeStr+0x30>
    Len = Limit;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2bfe      	cmp	r3, #254	; 0xfe
 80026ac:	d806      	bhi.n	80026bc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	60fa      	str	r2, [r7, #12]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e011      	b.n	80026e0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	60fa      	str	r2, [r7, #12]
 80026c2:	22ff      	movs	r2, #255	; 0xff
 80026c4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	60fa      	str	r2, [r7, #12]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	0a19      	lsrs	r1, r3, #8
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	60fa      	str	r2, [r7, #12]
 80026dc:	b2ca      	uxtb	r2, r1
 80026de:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80026e4:	e00a      	b.n	80026fc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	1c53      	adds	r3, r2, #1
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1c59      	adds	r1, r3, #1
 80026f0:	60f9      	str	r1, [r7, #12]
 80026f2:	7812      	ldrb	r2, [r2, #0]
 80026f4:	701a      	strb	r2, [r3, #0]
    n++;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	429a      	cmp	r2, r3
 8002702:	d3f0      	bcc.n	80026e6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8002704:	68fb      	ldr	r3, [r7, #12]
}
 8002706:	4618      	mov	r0, r3
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002732:	4b36      	ldr	r3, [pc, #216]	; (800280c <_HandleIncomingPacket+0xe0>)
 8002734:	7e1b      	ldrb	r3, [r3, #24]
 8002736:	4618      	mov	r0, r3
 8002738:	1cfb      	adds	r3, r7, #3
 800273a:	2201      	movs	r2, #1
 800273c:	4619      	mov	r1, r3
 800273e:	f7ff ff15 	bl	800256c <SEGGER_RTT_ReadNoLock>
 8002742:	4603      	mov	r3, r0
 8002744:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	dd54      	ble.n	80027f6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	2b80      	cmp	r3, #128	; 0x80
 8002750:	d032      	beq.n	80027b8 <_HandleIncomingPacket+0x8c>
 8002752:	2b80      	cmp	r3, #128	; 0x80
 8002754:	dc42      	bgt.n	80027dc <_HandleIncomingPacket+0xb0>
 8002756:	2b07      	cmp	r3, #7
 8002758:	dc16      	bgt.n	8002788 <_HandleIncomingPacket+0x5c>
 800275a:	2b00      	cmp	r3, #0
 800275c:	dd3e      	ble.n	80027dc <_HandleIncomingPacket+0xb0>
 800275e:	3b01      	subs	r3, #1
 8002760:	2b06      	cmp	r3, #6
 8002762:	d83b      	bhi.n	80027dc <_HandleIncomingPacket+0xb0>
 8002764:	a201      	add	r2, pc, #4	; (adr r2, 800276c <_HandleIncomingPacket+0x40>)
 8002766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276a:	bf00      	nop
 800276c:	0800278f 	.word	0x0800278f
 8002770:	08002795 	.word	0x08002795
 8002774:	0800279b 	.word	0x0800279b
 8002778:	080027a1 	.word	0x080027a1
 800277c:	080027a7 	.word	0x080027a7
 8002780:	080027ad 	.word	0x080027ad
 8002784:	080027b3 	.word	0x080027b3
 8002788:	2b7f      	cmp	r3, #127	; 0x7f
 800278a:	d036      	beq.n	80027fa <_HandleIncomingPacket+0xce>
 800278c:	e026      	b.n	80027dc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800278e:	f000 fa4b 	bl	8002c28 <SEGGER_SYSVIEW_Start>
      break;
 8002792:	e037      	b.n	8002804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002794:	f000 fb02 	bl	8002d9c <SEGGER_SYSVIEW_Stop>
      break;
 8002798:	e034      	b.n	8002804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800279a:	f000 fbd3 	bl	8002f44 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800279e:	e031      	b.n	8002804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80027a0:	f000 fbbc 	bl	8002f1c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80027a4:	e02e      	b.n	8002804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80027a6:	f000 fb1f 	bl	8002de8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80027aa:	e02b      	b.n	8002804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80027ac:	f000 fdb4 	bl	8003318 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80027b0:	e028      	b.n	8002804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80027b2:	f000 fd93 	bl	80032dc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80027b6:	e025      	b.n	8002804 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80027b8:	4b14      	ldr	r3, [pc, #80]	; (800280c <_HandleIncomingPacket+0xe0>)
 80027ba:	7e1b      	ldrb	r3, [r3, #24]
 80027bc:	4618      	mov	r0, r3
 80027be:	1cfb      	adds	r3, r7, #3
 80027c0:	2201      	movs	r2, #1
 80027c2:	4619      	mov	r1, r3
 80027c4:	f7ff fed2 	bl	800256c <SEGGER_RTT_ReadNoLock>
 80027c8:	4603      	mov	r3, r0
 80027ca:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	dd15      	ble.n	80027fe <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fd01 	bl	80031dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80027da:	e010      	b.n	80027fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	da0e      	bge.n	8002802 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <_HandleIncomingPacket+0xe0>)
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	4618      	mov	r0, r3
 80027ea:	1cfb      	adds	r3, r7, #3
 80027ec:	2201      	movs	r2, #1
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7ff febc 	bl	800256c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80027f4:	e005      	b.n	8002802 <_HandleIncomingPacket+0xd6>
    }
  }
 80027f6:	bf00      	nop
 80027f8:	e004      	b.n	8002804 <_HandleIncomingPacket+0xd8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e002      	b.n	8002804 <_HandleIncomingPacket+0xd8>
      break;
 80027fe:	bf00      	nop
 8002800:	e000      	b.n	8002804 <_HandleIncomingPacket+0xd8>
      break;
 8002802:	bf00      	nop
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000494 	.word	0x20000494

08002810 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	; 0x30
 8002814:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002816:	2301      	movs	r3, #1
 8002818:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002824:	4b31      	ldr	r3, [pc, #196]	; (80028ec <_TrySendOverflowPacket+0xdc>)
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
 800282a:	e00b      	b.n	8002844 <_TrySendOverflowPacket+0x34>
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	b2da      	uxtb	r2, r3
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	09db      	lsrs	r3, r3, #7
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	2b7f      	cmp	r3, #127	; 0x7f
 8002848:	d8f0      	bhi.n	800282c <_TrySendOverflowPacket+0x1c>
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <_TrySendOverflowPacket+0xe0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <_TrySendOverflowPacket+0xdc>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	e00b      	b.n	800288c <_TrySendOverflowPacket+0x7c>
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	6279      	str	r1, [r7, #36]	; 0x24
 800287e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	09db      	lsrs	r3, r3, #7
 800288a:	623b      	str	r3, [r7, #32]
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	2b7f      	cmp	r3, #127	; 0x7f
 8002890:	d8f0      	bhi.n	8002874 <_TrySendOverflowPacket+0x64>
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	627a      	str	r2, [r7, #36]	; 0x24
 8002898:	6a3a      	ldr	r2, [r7, #32]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <_TrySendOverflowPacket+0xdc>)
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	4618      	mov	r0, r3
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	f7fd fcac 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80028b8:	4603      	mov	r3, r0
 80028ba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <_TrySendOverflowPacket+0xdc>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <_TrySendOverflowPacket+0xdc>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <_TrySendOverflowPacket+0xdc>)
 80028d2:	701a      	strb	r2, [r3, #0]
 80028d4:	e004      	b.n	80028e0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <_TrySendOverflowPacket+0xdc>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	3301      	adds	r3, #1
 80028dc:	4a03      	ldr	r2, [pc, #12]	; (80028ec <_TrySendOverflowPacket+0xdc>)
 80028de:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80028e0:	693b      	ldr	r3, [r7, #16]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3730      	adds	r7, #48	; 0x30
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000494 	.word	0x20000494
 80028f0:	e0001004 	.word	0xe0001004

080028f4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002900:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <_SendPacket+0x1c0>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d010      	beq.n	800292a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002908:	4b6a      	ldr	r3, [pc, #424]	; (8002ab4 <_SendPacket+0x1c0>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80a3 	beq.w	8002a58 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002912:	4b68      	ldr	r3, [pc, #416]	; (8002ab4 <_SendPacket+0x1c0>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d109      	bne.n	800292e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800291a:	f7ff ff79 	bl	8002810 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <_SendPacket+0x1c0>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	f040 809a 	bne.w	8002a5c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8002928:	e001      	b.n	800292e <_SendPacket+0x3a>
    goto Send;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <_SendPacket+0x3c>
Send:
 800292e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b1f      	cmp	r3, #31
 8002934:	d809      	bhi.n	800294a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002936:	4b5f      	ldr	r3, [pc, #380]	; (8002ab4 <_SendPacket+0x1c0>)
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	f040 808b 	bne.w	8002a60 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b17      	cmp	r3, #23
 800294e:	d807      	bhi.n	8002960 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	3b01      	subs	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e03d      	b.n	80029dc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b7f      	cmp	r3, #127	; 0x7f
 800296c:	d912      	bls.n	8002994 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	09da      	lsrs	r2, r3, #7
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3b01      	subs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	3a01      	subs	r2, #1
 8002986:	60fa      	str	r2, [r7, #12]
 8002988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800298c:	b2da      	uxtb	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e006      	b.n	80029a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3b01      	subs	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b7f      	cmp	r3, #127	; 0x7f
 80029a6:	d912      	bls.n	80029ce <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	09da      	lsrs	r2, r3, #7
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	3a01      	subs	r2, #1
 80029c0:	60fa      	str	r2, [r7, #12]
 80029c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e006      	b.n	80029dc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <_SendPacket+0x1c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80029e2:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <_SendPacket+0x1c0>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	e00b      	b.n	8002a0e <_SendPacket+0x11a>
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	1c59      	adds	r1, r3, #1
 80029fe:	6279      	str	r1, [r7, #36]	; 0x24
 8002a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	09db      	lsrs	r3, r3, #7
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	2b7f      	cmp	r3, #127	; 0x7f
 8002a12:	d8f0      	bhi.n	80029f6 <_SendPacket+0x102>
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	627a      	str	r2, [r7, #36]	; 0x24
 8002a1a:	6a3a      	ldr	r2, [r7, #32]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <_SendPacket+0x1c0>)
 8002a26:	785b      	ldrb	r3, [r3, #1]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	68f9      	ldr	r1, [r7, #12]
 8002a34:	f7fd fbec 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <_SendPacket+0x1c0>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	60d3      	str	r3, [r2, #12]
 8002a48:	e00b      	b.n	8002a62 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <_SendPacket+0x1c0>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <_SendPacket+0x1c0>)
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e004      	b.n	8002a62 <_SendPacket+0x16e>
    goto SendDone;
 8002a58:	bf00      	nop
 8002a5a:	e002      	b.n	8002a62 <_SendPacket+0x16e>
      goto SendDone;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <_SendPacket+0x16e>
      goto SendDone;
 8002a60:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <_SendPacket+0x1c0>)
 8002a64:	7e1b      	ldrb	r3, [r3, #24]
 8002a66:	4619      	mov	r1, r3
 8002a68:	4a14      	ldr	r2, [pc, #80]	; (8002abc <_SendPacket+0x1c8>)
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	440b      	add	r3, r1
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	336c      	adds	r3, #108	; 0x6c
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <_SendPacket+0x1c0>)
 8002a7a:	7e1b      	ldrb	r3, [r3, #24]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	490f      	ldr	r1, [pc, #60]	; (8002abc <_SendPacket+0x1c8>)
 8002a80:	4603      	mov	r3, r0
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4403      	add	r3, r0
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3370      	adds	r3, #112	; 0x70
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d00b      	beq.n	8002aaa <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <_SendPacket+0x1c0>)
 8002a94:	789b      	ldrb	r3, [r3, #2]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <_SendPacket+0x1c0>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002aa0:	f7ff fe44 	bl	800272c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <_SendPacket+0x1c0>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002aaa:	bf00      	nop
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000494 	.word	0x20000494
 8002ab8:	e0001004 	.word	0xe0001004
 8002abc:	200005f4 	.word	0x200005f4

08002ac0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8002acc:	f04f 0120 	mov.w	r1, #32
 8002ad0:	f381 8811 	msr	BASEPRI, r1
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4808      	ldr	r0, [pc, #32]	; (8002af8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002ad8:	f7ff fe1b 	bl	8002712 <_PreparePacket>
 8002adc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68b8      	ldr	r0, [r7, #8]
 8002ae4:	f7ff ff06 	bl	80028f4 <_SendPacket>
  RECORD_END();
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f383 8811 	msr	BASEPRI, r3
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200004c4 	.word	0x200004c4

08002afc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002b06:	f3ef 8311 	mrs	r3, BASEPRI
 8002b0a:	f04f 0120 	mov.w	r1, #32
 8002b0e:	f381 8811 	msr	BASEPRI, r1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	4816      	ldr	r0, [pc, #88]	; (8002b70 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002b16:	f7ff fdfc 	bl	8002712 <_PreparePacket>
 8002b1a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	e00b      	b.n	8002b42 <SEGGER_SYSVIEW_RecordU32+0x46>
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	1c59      	adds	r1, r3, #1
 8002b32:	61f9      	str	r1, [r7, #28]
 8002b34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	09db      	lsrs	r3, r3, #7
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b7f      	cmp	r3, #127	; 0x7f
 8002b46:	d8f0      	bhi.n	8002b2a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	61fa      	str	r2, [r7, #28]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68f9      	ldr	r1, [r7, #12]
 8002b5c:	6938      	ldr	r0, [r7, #16]
 8002b5e:	f7ff fec9 	bl	80028f4 <_SendPacket>
  RECORD_END();
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f383 8811 	msr	BASEPRI, r3
}
 8002b68:	bf00      	nop
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200004c4 	.word	0x200004c4

08002b74 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	; 0x30
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002b80:	f3ef 8311 	mrs	r3, BASEPRI
 8002b84:	f04f 0120 	mov.w	r1, #32
 8002b88:	f381 8811 	msr	BASEPRI, r1
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	4825      	ldr	r0, [pc, #148]	; (8002c24 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002b90:	f7ff fdbf 	bl	8002712 <_PreparePacket>
 8002b94:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba2:	e00b      	b.n	8002bbc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	1c59      	adds	r1, r3, #1
 8002bac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	09db      	lsrs	r3, r3, #7
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8002bc0:	d8f0      	bhi.n	8002ba4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	e00b      	b.n	8002bf4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	1c59      	adds	r1, r3, #1
 8002be4:	6279      	str	r1, [r7, #36]	; 0x24
 8002be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	09db      	lsrs	r3, r3, #7
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8002bf8:	d8f0      	bhi.n	8002bdc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	627a      	str	r2, [r7, #36]	; 0x24
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	6979      	ldr	r1, [r7, #20]
 8002c0e:	69b8      	ldr	r0, [r7, #24]
 8002c10:	f7ff fe70 	bl	80028f4 <_SendPacket>
  RECORD_END();
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f383 8811 	msr	BASEPRI, r3
}
 8002c1a:	bf00      	nop
 8002c1c:	3730      	adds	r7, #48	; 0x30
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200004c4 	.word	0x200004c4

08002c28 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08c      	sub	sp, #48	; 0x30
 8002c2c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8002c2e:	4b58      	ldr	r3, [pc, #352]	; (8002d90 <SEGGER_SYSVIEW_Start+0x168>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002c34:	f3ef 8311 	mrs	r3, BASEPRI
 8002c38:	f04f 0120 	mov.w	r1, #32
 8002c3c:	f381 8811 	msr	BASEPRI, r1
 8002c40:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002c42:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <SEGGER_SYSVIEW_Start+0x168>)
 8002c44:	785b      	ldrb	r3, [r3, #1]
 8002c46:	220a      	movs	r2, #10
 8002c48:	4952      	ldr	r1, [pc, #328]	; (8002d94 <SEGGER_SYSVIEW_Start+0x16c>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fae0 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002c56:	200a      	movs	r0, #10
 8002c58:	f7ff ff32 	bl	8002ac0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8002c60:	f04f 0120 	mov.w	r1, #32
 8002c64:	f381 8811 	msr	BASEPRI, r1
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	484b      	ldr	r0, [pc, #300]	; (8002d98 <SEGGER_SYSVIEW_Start+0x170>)
 8002c6c:	f7ff fd51 	bl	8002712 <_PreparePacket>
 8002c70:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7a:	4b45      	ldr	r3, [pc, #276]	; (8002d90 <SEGGER_SYSVIEW_Start+0x168>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c80:	e00b      	b.n	8002c9a <SEGGER_SYSVIEW_Start+0x72>
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	1c59      	adds	r1, r3, #1
 8002c8a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	09db      	lsrs	r3, r3, #7
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c9e:	d8f0      	bhi.n	8002c82 <SEGGER_SYSVIEW_Start+0x5a>
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb4:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <SEGGER_SYSVIEW_Start+0x168>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	e00b      	b.n	8002cd4 <SEGGER_SYSVIEW_Start+0xac>
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	1c59      	adds	r1, r3, #1
 8002cc4:	6279      	str	r1, [r7, #36]	; 0x24
 8002cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	09db      	lsrs	r3, r3, #7
 8002cd2:	623b      	str	r3, [r7, #32]
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8002cd8:	d8f0      	bhi.n	8002cbc <SEGGER_SYSVIEW_Start+0x94>
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	627a      	str	r2, [r7, #36]	; 0x24
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <SEGGER_SYSVIEW_Start+0x168>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	e00b      	b.n	8002d0e <SEGGER_SYSVIEW_Start+0xe6>
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	1c59      	adds	r1, r3, #1
 8002cfe:	61f9      	str	r1, [r7, #28]
 8002d00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	09db      	lsrs	r3, r3, #7
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b7f      	cmp	r3, #127	; 0x7f
 8002d12:	d8f0      	bhi.n	8002cf6 <SEGGER_SYSVIEW_Start+0xce>
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	61fa      	str	r2, [r7, #28]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	e00b      	b.n	8002d46 <SEGGER_SYSVIEW_Start+0x11e>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	1c59      	adds	r1, r3, #1
 8002d36:	6179      	str	r1, [r7, #20]
 8002d38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	09db      	lsrs	r3, r3, #7
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b7f      	cmp	r3, #127	; 0x7f
 8002d4a:	d8f0      	bhi.n	8002d2e <SEGGER_SYSVIEW_Start+0x106>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	617a      	str	r2, [r7, #20]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002d5c:	2218      	movs	r2, #24
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fdc7 	bl	80028f4 <_SendPacket>
      RECORD_END();
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <SEGGER_SYSVIEW_Start+0x168>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <SEGGER_SYSVIEW_Start+0x168>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002d7a:	f000 f8e3 	bl	8002f44 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002d7e:	f000 f8cd 	bl	8002f1c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002d82:	f000 fac9 	bl	8003318 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8002d86:	bf00      	nop
 8002d88:	3730      	adds	r7, #48	; 0x30
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000494 	.word	0x20000494
 8002d94:	08003450 	.word	0x08003450
 8002d98:	200004c4 	.word	0x200004c4

08002d9c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002da2:	f3ef 8311 	mrs	r3, BASEPRI
 8002da6:	f04f 0120 	mov.w	r1, #32
 8002daa:	f381 8811 	msr	BASEPRI, r1
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	480b      	ldr	r0, [pc, #44]	; (8002de0 <SEGGER_SYSVIEW_Stop+0x44>)
 8002db2:	f7ff fcae 	bl	8002712 <_PreparePacket>
 8002db6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <SEGGER_SYSVIEW_Stop+0x48>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002dc0:	220b      	movs	r2, #11
 8002dc2:	6839      	ldr	r1, [r7, #0]
 8002dc4:	6838      	ldr	r0, [r7, #0]
 8002dc6:	f7ff fd95 	bl	80028f4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <SEGGER_SYSVIEW_Stop+0x48>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f383 8811 	msr	BASEPRI, r3
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200004c4 	.word	0x200004c4
 8002de4:	20000494 	.word	0x20000494

08002de8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002dee:	f3ef 8311 	mrs	r3, BASEPRI
 8002df2:	f04f 0120 	mov.w	r1, #32
 8002df6:	f381 8811 	msr	BASEPRI, r1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	4845      	ldr	r0, [pc, #276]	; (8002f14 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002dfe:	f7ff fc88 	bl	8002712 <_PreparePacket>
 8002e02:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0c:	4b42      	ldr	r3, [pc, #264]	; (8002f18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e12:	e00b      	b.n	8002e2c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	1c59      	adds	r1, r3, #1
 8002e1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	09db      	lsrs	r3, r3, #7
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8002e30:	d8f0      	bhi.n	8002e14 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	e00b      	b.n	8002e66 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	1c59      	adds	r1, r3, #1
 8002e56:	6279      	str	r1, [r7, #36]	; 0x24
 8002e58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	09db      	lsrs	r3, r3, #7
 8002e64:	623b      	str	r3, [r7, #32]
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	2b7f      	cmp	r3, #127	; 0x7f
 8002e6a:	d8f0      	bhi.n	8002e4e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	627a      	str	r2, [r7, #36]	; 0x24
 8002e72:	6a3a      	ldr	r2, [r7, #32]
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e00b      	b.n	8002ea0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	1c59      	adds	r1, r3, #1
 8002e90:	61f9      	str	r1, [r7, #28]
 8002e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	09db      	lsrs	r3, r3, #7
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ea4:	d8f0      	bhi.n	8002e88 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	61fa      	str	r2, [r7, #28]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	e00b      	b.n	8002ed8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1c59      	adds	r1, r3, #1
 8002ec8:	6179      	str	r1, [r7, #20]
 8002eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	09db      	lsrs	r3, r3, #7
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b7f      	cmp	r3, #127	; 0x7f
 8002edc:	d8f0      	bhi.n	8002ec0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	617a      	str	r2, [r7, #20]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002eee:	2218      	movs	r2, #24
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68b8      	ldr	r0, [r7, #8]
 8002ef4:	f7ff fcfe 	bl	80028f4 <_SendPacket>
  RECORD_END();
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002f06:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	4798      	blx	r3
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3730      	adds	r7, #48	; 0x30
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200004c4 	.word	0x200004c4
 8002f18:	20000494 	.word	0x20000494

08002f1c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002f32:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4798      	blx	r3
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000494 	.word	0x20000494

08002f44 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01a      	beq.n	8002f88 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d015      	beq.n	8002f88 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002f5c:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4798      	blx	r3
 8002f64:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002f68:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002f6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	000a      	movs	r2, r1
 8002f78:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4621      	mov	r1, r4
 8002f80:	200d      	movs	r0, #13
 8002f82:	f7ff fdf7 	bl	8002b74 <SEGGER_SYSVIEW_RecordU32x2>
 8002f86:	e006      	b.n	8002f96 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	200c      	movs	r0, #12
 8002f90:	f7ff fdb4 	bl	8002afc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000494 	.word	0x20000494
 8002fa4:	e0001004 	.word	0xe0001004

08002fa8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002fae:	f3ef 8311 	mrs	r3, BASEPRI
 8002fb2:	f04f 0120 	mov.w	r1, #32
 8002fb6:	f381 8811 	msr	BASEPRI, r1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	4819      	ldr	r0, [pc, #100]	; (8003024 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002fbe:	f7ff fba8 	bl	8002712 <_PreparePacket>
 8002fc2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002fc8:	4b17      	ldr	r3, [pc, #92]	; (8003028 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e00b      	b.n	8002ff4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	1c59      	adds	r1, r3, #1
 8002fe4:	6179      	str	r1, [r7, #20]
 8002fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	09db      	lsrs	r3, r3, #7
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff8:	d8f0      	bhi.n	8002fdc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	617a      	str	r2, [r7, #20]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800300a:	2202      	movs	r2, #2
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	68b8      	ldr	r0, [r7, #8]
 8003010:	f7ff fc70 	bl	80028f4 <_SendPacket>
  RECORD_END();
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f383 8811 	msr	BASEPRI, r3
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200004c4 	.word	0x200004c4
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003032:	f3ef 8311 	mrs	r3, BASEPRI
 8003036:	f04f 0120 	mov.w	r1, #32
 800303a:	f381 8811 	msr	BASEPRI, r1
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	4807      	ldr	r0, [pc, #28]	; (8003060 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003042:	f7ff fb66 	bl	8002712 <_PreparePacket>
 8003046:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003048:	2203      	movs	r2, #3
 800304a:	6839      	ldr	r1, [r7, #0]
 800304c:	6838      	ldr	r0, [r7, #0]
 800304e:	f7ff fc51 	bl	80028f4 <_SendPacket>
  RECORD_END();
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f383 8811 	msr	BASEPRI, r3
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	200004c4 	.word	0x200004c4

08003064 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800306a:	f3ef 8311 	mrs	r3, BASEPRI
 800306e:	f04f 0120 	mov.w	r1, #32
 8003072:	f381 8811 	msr	BASEPRI, r1
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	4807      	ldr	r0, [pc, #28]	; (8003098 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800307a:	f7ff fb4a 	bl	8002712 <_PreparePacket>
 800307e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003080:	2212      	movs	r2, #18
 8003082:	6839      	ldr	r1, [r7, #0]
 8003084:	6838      	ldr	r0, [r7, #0]
 8003086:	f7ff fc35 	bl	80028f4 <_SendPacket>
  RECORD_END();
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f383 8811 	msr	BASEPRI, r3
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	200004c4 	.word	0x200004c4

0800309c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80030a2:	f3ef 8311 	mrs	r3, BASEPRI
 80030a6:	f04f 0120 	mov.w	r1, #32
 80030aa:	f381 8811 	msr	BASEPRI, r1
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	4807      	ldr	r0, [pc, #28]	; (80030d0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80030b2:	f7ff fb2e 	bl	8002712 <_PreparePacket>
 80030b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80030b8:	2211      	movs	r2, #17
 80030ba:	6839      	ldr	r1, [r7, #0]
 80030bc:	6838      	ldr	r0, [r7, #0]
 80030be:	f7ff fc19 	bl	80028f4 <_SendPacket>
  RECORD_END();
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f383 8811 	msr	BASEPRI, r3
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	200004c4 	.word	0x200004c4

080030d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80030dc:	f3ef 8311 	mrs	r3, BASEPRI
 80030e0:	f04f 0120 	mov.w	r1, #32
 80030e4:	f381 8811 	msr	BASEPRI, r1
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	4819      	ldr	r0, [pc, #100]	; (8003150 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80030ec:	f7ff fb11 	bl	8002712 <_PreparePacket>
 80030f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80030f6:	4b17      	ldr	r3, [pc, #92]	; (8003154 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	e00b      	b.n	8003122 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	1c59      	adds	r1, r3, #1
 8003112:	61f9      	str	r1, [r7, #28]
 8003114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	09db      	lsrs	r3, r3, #7
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b7f      	cmp	r3, #127	; 0x7f
 8003126:	d8f0      	bhi.n	800310a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	61fa      	str	r2, [r7, #28]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003138:	2204      	movs	r2, #4
 800313a:	68f9      	ldr	r1, [r7, #12]
 800313c:	6938      	ldr	r0, [r7, #16]
 800313e:	f7ff fbd9 	bl	80028f4 <_SendPacket>
  RECORD_END();
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f383 8811 	msr	BASEPRI, r3
}
 8003148:	bf00      	nop
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200004c4 	.word	0x200004c4
 8003154:	20000494 	.word	0x20000494

08003158 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003160:	f3ef 8311 	mrs	r3, BASEPRI
 8003164:	f04f 0120 	mov.w	r1, #32
 8003168:	f381 8811 	msr	BASEPRI, r1
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	4819      	ldr	r0, [pc, #100]	; (80031d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003170:	f7ff facf 	bl	8002712 <_PreparePacket>
 8003174:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e00b      	b.n	80031a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	1c59      	adds	r1, r3, #1
 8003196:	61f9      	str	r1, [r7, #28]
 8003198:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	09db      	lsrs	r3, r3, #7
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b7f      	cmp	r3, #127	; 0x7f
 80031aa:	d8f0      	bhi.n	800318e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	61fa      	str	r2, [r7, #28]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80031bc:	2206      	movs	r2, #6
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	6938      	ldr	r0, [r7, #16]
 80031c2:	f7ff fb97 	bl	80028f4 <_SendPacket>
  RECORD_END();
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f383 8811 	msr	BASEPRI, r3
}
 80031cc:	bf00      	nop
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200004c4 	.word	0x200004c4
 80031d8:	20000494 	.word	0x20000494

080031dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08c      	sub	sp, #48	; 0x30
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06d      	beq.n	80032ca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80031f4:	2300      	movs	r3, #0
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f8:	e008      	b.n	800320c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	3301      	adds	r3, #1
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003210:	429a      	cmp	r2, r3
 8003212:	d3f2      	bcc.n	80031fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8003214:	e000      	b.n	8003218 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003216:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d055      	beq.n	80032ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800321e:	f3ef 8311 	mrs	r3, BASEPRI
 8003222:	f04f 0120 	mov.w	r1, #32
 8003226:	f381 8811 	msr	BASEPRI, r1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	482a      	ldr	r0, [pc, #168]	; (80032d8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800322e:	f7ff fa70 	bl	8002712 <_PreparePacket>
 8003232:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	623b      	str	r3, [r7, #32]
 8003240:	e00b      	b.n	800325a <SEGGER_SYSVIEW_SendModule+0x7e>
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	1c59      	adds	r1, r3, #1
 800324a:	6279      	str	r1, [r7, #36]	; 0x24
 800324c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	09db      	lsrs	r3, r3, #7
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	2b7f      	cmp	r3, #127	; 0x7f
 800325e:	d8f0      	bhi.n	8003242 <SEGGER_SYSVIEW_SendModule+0x66>
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	627a      	str	r2, [r7, #36]	; 0x24
 8003266:	6a3a      	ldr	r2, [r7, #32]
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e00b      	b.n	8003294 <SEGGER_SYSVIEW_SendModule+0xb8>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	1c59      	adds	r1, r3, #1
 8003284:	61f9      	str	r1, [r7, #28]
 8003286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	09db      	lsrs	r3, r3, #7
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b7f      	cmp	r3, #127	; 0x7f
 8003298:	d8f0      	bhi.n	800327c <SEGGER_SYSVIEW_SendModule+0xa0>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	61fa      	str	r2, [r7, #28]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	4619      	mov	r1, r3
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff f9e0 	bl	8002678 <_EncodeStr>
 80032b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80032ba:	2216      	movs	r2, #22
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	6938      	ldr	r0, [r7, #16]
 80032c0:	f7ff fb18 	bl	80028f4 <_SendPacket>
      RECORD_END();
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80032ca:	bf00      	nop
 80032cc:	3730      	adds	r7, #48	; 0x30
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200004bc 	.word	0x200004bc
 80032d8:	200004c4 	.word	0x200004c4

080032dc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00f      	beq.n	800330a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f2      	bne.n	80032f0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200004bc 	.word	0x200004bc

08003318 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800331e:	f3ef 8311 	mrs	r3, BASEPRI
 8003322:	f04f 0120 	mov.w	r1, #32
 8003326:	f381 8811 	msr	BASEPRI, r1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	4817      	ldr	r0, [pc, #92]	; (800338c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800332e:	f7ff f9f0 	bl	8002712 <_PreparePacket>
 8003332:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	e00b      	b.n	800335c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	6179      	str	r1, [r7, #20]
 800334e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	09db      	lsrs	r3, r3, #7
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b7f      	cmp	r3, #127	; 0x7f
 8003360:	d8f0      	bhi.n	8003344 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	617a      	str	r2, [r7, #20]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003372:	221b      	movs	r2, #27
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	68b8      	ldr	r0, [r7, #8]
 8003378:	f7ff fabc 	bl	80028f4 <_SendPacket>
  RECORD_END();
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f383 8811 	msr	BASEPRI, r3
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	200004c4 	.word	0x200004c4
 8003390:	200004c0 	.word	0x200004c0

08003394 <__libc_init_array>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	4d0d      	ldr	r5, [pc, #52]	; (80033cc <__libc_init_array+0x38>)
 8003398:	4c0d      	ldr	r4, [pc, #52]	; (80033d0 <__libc_init_array+0x3c>)
 800339a:	1b64      	subs	r4, r4, r5
 800339c:	10a4      	asrs	r4, r4, #2
 800339e:	2600      	movs	r6, #0
 80033a0:	42a6      	cmp	r6, r4
 80033a2:	d109      	bne.n	80033b8 <__libc_init_array+0x24>
 80033a4:	4d0b      	ldr	r5, [pc, #44]	; (80033d4 <__libc_init_array+0x40>)
 80033a6:	4c0c      	ldr	r4, [pc, #48]	; (80033d8 <__libc_init_array+0x44>)
 80033a8:	f000 f82e 	bl	8003408 <_init>
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	2600      	movs	r6, #0
 80033b2:	42a6      	cmp	r6, r4
 80033b4:	d105      	bne.n	80033c2 <__libc_init_array+0x2e>
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033bc:	4798      	blx	r3
 80033be:	3601      	adds	r6, #1
 80033c0:	e7ee      	b.n	80033a0 <__libc_init_array+0xc>
 80033c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c6:	4798      	blx	r3
 80033c8:	3601      	adds	r6, #1
 80033ca:	e7f2      	b.n	80033b2 <__libc_init_array+0x1e>
 80033cc:	08003464 	.word	0x08003464
 80033d0:	08003464 	.word	0x08003464
 80033d4:	08003464 	.word	0x08003464
 80033d8:	08003468 	.word	0x08003468

080033dc <memcpy>:
 80033dc:	440a      	add	r2, r1
 80033de:	4291      	cmp	r1, r2
 80033e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80033e4:	d100      	bne.n	80033e8 <memcpy+0xc>
 80033e6:	4770      	bx	lr
 80033e8:	b510      	push	{r4, lr}
 80033ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033f2:	4291      	cmp	r1, r2
 80033f4:	d1f9      	bne.n	80033ea <memcpy+0xe>
 80033f6:	bd10      	pop	{r4, pc}

080033f8 <memset>:
 80033f8:	4402      	add	r2, r0
 80033fa:	4603      	mov	r3, r0
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d100      	bne.n	8003402 <memset+0xa>
 8003400:	4770      	bx	lr
 8003402:	f803 1b01 	strb.w	r1, [r3], #1
 8003406:	e7f9      	b.n	80033fc <memset+0x4>

08003408 <_init>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr

08003414 <_fini>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	bf00      	nop
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr
